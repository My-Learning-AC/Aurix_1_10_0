/**
 * \file geth_mdio.h
 * \brief Functions to interface to the Geth Bridge
 *
 * \version V0.1.0
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** RS           Ronny Schulze                                                 **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2021-11-16, DM:   Initial version                                  **
*******************************************************************************/

#ifndef IFX_XGMAC_MDIO_H
#define IFX_XGMAC_MDIO_H 1

#include "Ifx_Types.h"
#include "geth_mac.h"
#include "IfxGeth_reg.h"

/**********************************************************************************************************************
 * ENUMS
 *********************************************************************************************************************/
/* Anonymous structure/union guard start */
#if defined (__TASKING__)
#pragma warning 586
#endif



/**********************************************************************************************************************
 * API PROTOTYPES
 *********************************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Reads a register value from an external Ethernet Phy through the MDIO interface
 * @param macInstance_p pointer to the ethernet register block
 * @param macIndex_u8 MAC port index
 * @param phyAddr_u8 external ethernet phy address
 * @param devAddr_u8 phy internal device address
 * @param regNum_u16 phy device internal register address
 * @param regVal_p register value as return value
 * @param timeOut_u32 timeout value
 * @return SUCCESS or FAILURE
 */
sint32 Geth_Mdio_Read(Ifx_GETH *const gethInstance_p, const uint8 macIndex_u8, const uint8 phyAddr_u8, const uint8 devAddr_u8, const uint16 regNum_u16, uint16 *const regVal_p, uint32 timeOut_u32);


/**
 * @brief Writes a register value to an external Ethernet Phy through the MDIO interface
 * @param macInstance_p pointer to the ethernet register block
 * @param macIndex_u8 MAC port index
 * @param phyAddr_u8 external ethernet phy address
 * @param devAddr_u8 phy internal device address
 * @param regNum_u16 phy device internal register address
 * @param regVal_u16 register value
 * @param timeOut_u32 timeout value
 * @return SUCCESS or FAILURE
 */
sint32 Geth_Mdio_Write(Ifx_GETH *const gethInstance_p, const uint8 macIndex_u8, const uint8 phyAddr_u8, const uint8 devAddr_u8, const uint16 regNum_u16, uint16 regVal_u16, uint32 timeOut_u32);

sint32 geth0_mdio_write_cl22(uint8 phy_addr, uint16 reg_addr, uint16 reg_val);
sint32 geth0_mdio_read_cl22(uint8 phy_addr, uint16 reg_addr, uint16 *const reg_val);
sint32 geth0_mdio_write_cl45(uint8 phy_addr, uint8 dev_addr, uint16 reg_addr, uint16 reg_val);
sint32 geth0_mdio_read_cl45(uint8 phy_addr, uint8 dev_addr, uint16 reg_addr, uint16 *const reg_val);

sint32 geth1_mdio_write_cl22(uint8 phy_addr, uint16 reg_addr, uint16 reg_val);
sint32 geth1_mdio_read_cl22(uint8 phy_addr, uint16 reg_addr, uint16 *const reg_val);
sint32 geth1_mdio_write_cl45(uint8 phy_addr, uint8 dev_addr, uint16 reg_addr, uint16 reg_val);
sint32 geth1_mdio_read_cl45(uint8 phy_addr, uint8 dev_addr, uint16 reg_addr, uint16 *const reg_val);

#ifdef __cplusplus
}
#endif


#endif /* IFX_XGMAC_H */
