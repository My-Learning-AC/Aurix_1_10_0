/**
 * \file IfxCss_regdef.h
 * \brief
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_CSS/V0.2.0.1.7
 * Specification: latest @ 2023-05-19 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.1.1.1.17
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Css_Registers Css Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Css_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Css_Registers
 * 
 * \defgroup IfxSfr_Css_Registers_union Register unions
 * \ingroup IfxSfr_Css_Registers
 * 
 * \defgroup IfxSfr_Css_Registers_struct Memory map
 * \ingroup IfxSfr_Css_Registers
 */
#ifndef IFXCSS_REGDEF_H
#define IFXCSS_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Css_Registers_Bitfields
 * \{  */
/** \brief CSS Global AAD Forwarding Allowed */
typedef struct _Ifx_CSS_AADFWDAL_Bits
{
    __IO Ifx_Strict_32Bit CH0:1;           /**< \brief [0:0] Channel 0 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH1:1;           /**< \brief [1:1] Channel 1 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH2:1;           /**< \brief [2:2] Channel 2 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH3:1;           /**< \brief [3:3] Channel 3 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH4:1;           /**< \brief [4:4] Channel 4 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH5:1;           /**< \brief [5:5] Channel 5 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH6:1;           /**< \brief [6:6] Channel 6 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH7:1;           /**< \brief [7:7] Channel 7 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH8:1;           /**< \brief [8:8] Channel 8 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH9:1;           /**< \brief [9:9] Channel 9 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH10:1;          /**< \brief [10:10] Channel 10 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH11:1;          /**< \brief [11:11] Channel 11 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH12:1;          /**< \brief [12:12] Channel 12 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH13:1;          /**< \brief [13:13] Channel 13 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH14:1;          /**< \brief [14:14] Channel 14 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH15:1;          /**< \brief [15:15] Channel 15 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH16:1;          /**< \brief [16:16] Channel 16 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH17:1;          /**< \brief [17:17] Channel 17 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH18:1;          /**< \brief [18:18] Channel 18 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH19:1;          /**< \brief [19:19] Channel 19 AAD forwarding allowed (rw) */
    __IO Ifx_Strict_32Bit CH20:1;          /**< \brief [20:20] Channel 20 AAD forwarding allowed (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_CSS_AADFWDAL_Bits;

/** \brief PRS access enable register */
typedef struct _Ifx_CSS_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CSS_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CSS_ACCEN_RDA_CS_Bits
{
    __I  Ifx_Strict_32Bit :12;             /**< \brief [11:0] \internal Reserved */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID 12 - EN12 (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID 13 - EN13 (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [27:14] \internal Reserved */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID 28 - EN28 (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CSS_ACCEN_RDA_CS_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CSS_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CSS_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CSS_ACCEN_WRA_CS_Bits
{
    __I  Ifx_Strict_32Bit :12;             /**< \brief [11:0] \internal Reserved */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID 12 - EN12 (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID 13 - EN13 (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID 28 - EN28 (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CSS_ACCEN_WRA_CS_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CSS_ACCEN_WRB_SRI_CS_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_ACCEN_WRB_SRI_CS_Bits;

/** \brief CSS Alarm Trigger Status Register */
typedef struct _Ifx_CSS_ALARM_STAT_Bits
{
    __I  Ifx_Strict_32Bit GLOBAL:1;        /**< \brief [0:0] Global Alarm Flag (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __I  Ifx_Strict_32Bit ILPROT:1;        /**< \brief [2:2] Illegal PROT Alarm Flag (rh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_ALARM_STAT_Bits;

/** \brief CSS Clear Alarm Trigger Status Register */
typedef struct _Ifx_CSS_ALARM_STATCLR_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __O  Ifx_Strict_32Bit ILPROT:1;        /**< \brief [2:2] Clear Illegal  PROT Alarm Flag (w) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_ALARM_STATCLR_Bits;

/** \brief CSS Global Authentication Failure Status Summary Register */
typedef struct _Ifx_CSS_AUTHFAIL_Bits
{
    __I  Ifx_Strict_32Bit CH0:1;           /**< \brief [0:0] Channel 0 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH1:1;           /**< \brief [1:1] Channel 1 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH2:1;           /**< \brief [2:2] Channel 2 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH3:1;           /**< \brief [3:3] Channel 3 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH4:1;           /**< \brief [4:4] Channel 4 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH5:1;           /**< \brief [5:5] Channel 5 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH6:1;           /**< \brief [6:6] Channel 6 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH7:1;           /**< \brief [7:7] Channel 7 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH8:1;           /**< \brief [8:8] Channel 8 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH9:1;           /**< \brief [9:9] Channel 9 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH10:1;          /**< \brief [10:10] Channel 10 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH11:1;          /**< \brief [11:11] Channel 11 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH12:1;          /**< \brief [12:12] Channel 12 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH13:1;          /**< \brief [13:13] Channel 13 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH14:1;          /**< \brief [14:14] Channel 14 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH15:1;          /**< \brief [15:15] Channel 15 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH16:1;          /**< \brief [16:16] Channel 16 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH17:1;          /**< \brief [17:17] Channel 17 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH18:1;          /**< \brief [18:18] Channel 18 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH19:1;          /**< \brief [19:19] Channel 19 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit CH20:1;          /**< \brief [20:20] Channel 20 Authentication fail alarm (rh) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_CSS_AUTHFAIL_Bits;

/** \brief Channel specific configuration read access enable register A */
typedef struct _Ifx_CSS_CH_ACCEN_CFG_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CSS_CH_ACCEN_CFG_RDA_Bits;

/** \brief Channel specific configuration read access enable register B */
typedef struct _Ifx_CSS_CH_ACCEN_CFG_RDB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_CH_ACCEN_CFG_RDB_Bits;

/** \brief Channel specific configuration write access enable register A */
typedef struct _Ifx_CSS_CH_ACCEN_CFG_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CSS_CH_ACCEN_CFG_WRA_Bits;

/** \brief Channel specific configuration write access enable register B */
typedef struct _Ifx_CSS_CH_ACCEN_CFG_WRB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_CH_ACCEN_CFG_WRB_Bits;

/** \brief Channel specific data read access enable register A */
typedef struct _Ifx_CSS_CH_ACCEN_DATA_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CSS_CH_ACCEN_DATA_RDA_Bits;

/** \brief Channel specific data read access enable register B */
typedef struct _Ifx_CSS_CH_ACCEN_DATA_RDB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_CH_ACCEN_DATA_RDB_Bits;

/** \brief Channel specific data write access enable register A */
typedef struct _Ifx_CSS_CH_ACCEN_DATA_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CSS_CH_ACCEN_DATA_WRA_Bits;

/** \brief Channel specific data write access enable register B */
typedef struct _Ifx_CSS_CH_ACCEN_DATA_WRB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_CH_ACCEN_DATA_WRB_Bits;

/** \brief CSS Alarm Configuration Register */
typedef struct _Ifx_CSS_CH_ALARM_CFG_Bits
{
    __IO Ifx_Strict_32Bit ALMNODE:3;       /**< \brief [2:0] Alarm Node Configuration (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_CH_ALARM_CFG_Bits;

/** \brief CSS Alarm Configuration Shadow Register */
typedef struct _Ifx_CSS_CH_ALARM_CFGSH_Bits
{
    __IO Ifx_Strict_32Bit ALMNODE:3;       /**< \brief [2:0] Alarm Node Configuration (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_CH_ALARM_CFGSH_Bits;

/** \brief CSS Alarm Trigger Status Register */
typedef struct _Ifx_CSS_CH_ALARM_STAT_Bits
{
    __I  Ifx_Strict_32Bit GLOBAL:1;        /**< \brief [0:0] Global Alarm Flag (rh) */
    __I  Ifx_Strict_32Bit HWF:1;           /**< \brief [1:1] Channel Specific Hardware Fault Alarm Flag (rh) */
    __I  Ifx_Strict_32Bit ILPROT:1;        /**< \brief [2:2] Illegal PROT Alarm Flag (rh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_CH_ALARM_STAT_Bits;

/** \brief CSS Clear Alarm Trigger Status Register */
typedef struct _Ifx_CSS_CH_ALARM_STATCLR_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __O  Ifx_Strict_32Bit HWF:1;           /**< \brief [1:1] Clear Channel Specific Hardware Fault Alarm Flag (w) */
    __O  Ifx_Strict_32Bit ILPROT:1;        /**< \brief [2:2] Clear Illegal  PROT Alarm Flag (w) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CSS_CH_ALARM_STATCLR_Bits;

/** \brief CSS IV Assignment Register */
typedef struct _Ifx_CSS_CH_ASGN_IV_Bits
{
    __IO Ifx_Strict_32Bit SIZE:8;          /**< \brief [7:0] Size of the IV section (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit BASE:9;          /**< \brief [24:16] Base address of the IV section (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CSS_CH_ASGN_IV_Bits;

/** \brief CSS Key Assignment Register */
typedef struct _Ifx_CSS_CH_ASGN_KEY_Bits
{
    __IO Ifx_Strict_32Bit SIZE:8;          /**< \brief [7:0] Size of the key section (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [14:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WRENA:1;         /**< \brief [15:15] Channel master write access to key section (rw) */
    __IO Ifx_Strict_32Bit BASE:9;          /**< \brief [24:16] Base address of the key section (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CSS_CH_ASGN_KEY_Bits;

/** \brief CSS Authentication Configuration Register */
typedef struct _Ifx_CSS_CH_AUTHCFG_Bits
{
    __IO Ifx_Strict_32Bit ALARMTH:4;       /**< \brief [3:0] Authentication alarm threshold (rw) */
    __O  Ifx_Strict_32Bit THLCK:1;         /**< \brief [4:4] Authentication alarm threshold lock bit (w) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __O  Ifx_Strict_32Bit CLRCNT:1;        /**< \brief [8:8] Authentication alarm counter clear (w) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_CSS_CH_AUTHCFG_Bits;

/** \brief CSS Authentication Fail Count Status Register */
typedef struct _Ifx_CSS_CH_AUTHFC_Bits
{
    __I  Ifx_Strict_32Bit FAILCNT:8;       /**< \brief [7:0] Authentication fail counter (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_CH_AUTHFC_Bits;

/** \brief CSS Authentication Result Register */
typedef struct _Ifx_CSS_CH_AUTHRES_Bits
{
    __I  Ifx_Strict_32Bit CNT:8;           /**< \brief [7:0] Comparison counter (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [9:8] \internal Reserved */
    __I  Ifx_Strict_32Bit CMPLEN:10;       /**< \brief [19:10] Length of the compared MAC (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit INVRES:1;        /**< \brief [24:24] Inverse MAC comparison result (rh) */
    __I  Ifx_Strict_32Bit RES:1;           /**< \brief [25:25] MAC comparison result (rh) */
    __I  Ifx_Strict_32Bit FAULT:1;         /**< \brief [26:26] Fault within AUTHRES (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [30:27] \internal Reserved */
    __I  Ifx_Strict_32Bit DONE:1;          /**< \brief [31:31] MAC Verification Done (rh) */
} Ifx_CSS_CH_AUTHRES_Bits;

/** \brief CSS Channel Configuration Register */
typedef struct _Ifx_CSS_CH_CFG_Bits
{
    __IO Ifx_Strict_32Bit UFLEN:1;         /**< \brief [0:0] Output FIFO Underflow Enable (rw) */
    __IO Ifx_Strict_32Bit DINCFG:2;        /**< \brief [2:1] Data Input Configuration (rw) */
    __IO Ifx_Strict_32Bit MACREDIR:1;      /**< \brief [3:3] MAC Redirecting To Data Output FIFO (rw) */
    __IO Ifx_Strict_32Bit FIXMAP:1;        /**< \brief [4:4] Fix mapping between channels and engines (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_CSS_CH_CFG_Bits;

/** \brief CSS Clear Key Usage Error Status Register */
typedef struct _Ifx_CSS_CH_CLR_KEYERR_Bits
{
    __O  Ifx_Strict_32Bit ILID:1;          /**< \brief [0:0] Illegal key ID selection (w) */
    __O  Ifx_Strict_32Bit DMGKEY:1;        /**< \brief [1:1] Damaged key (w) */
    __O  Ifx_Strict_32Bit ILCIPH:1;        /**< \brief [2:2] Forbidden use of a key for en/decryption (w) */
    __O  Ifx_Strict_32Bit ILGEN:1;         /**< \brief [3:3] Forbidden use of a key for MAC generation (w) */
    __O  Ifx_Strict_32Bit ILVER:1;         /**< \brief [4:4] Forbidden use of a key for MAC Verification (w) */
    __O  Ifx_Strict_32Bit ILDBG:1;         /**< \brief [5:5] Forbidden use of key while debug (w) */
    __O  Ifx_Strict_32Bit UNINKEY:1;       /**< \brief [6:6] Used key is not initialized (w) */
    __O  Ifx_Strict_32Bit KEYSIZE:1;       /**< \brief [7:7] Key has the wrong size (w) */
    __O  Ifx_Strict_32Bit IVSEL:1;         /**< \brief [8:8] Initial Vector was selected as key (w) */
    __O  Ifx_Strict_32Bit SECBTFL:1;       /**< \brief [9:9] Secure boot key fail (w) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_CSS_CH_CLR_KEYERR_Bits;

/** \brief CSS Clear Operation Status Register */
typedef struct _Ifx_CSS_CH_CLR_OP_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __O  Ifx_Strict_32Bit DOUTUFL:1;       /**< \brief [4:4] Sticky Data Output FIFO Underflow Status (w) */
    __O  Ifx_Strict_32Bit IGNACC:1;        /**< \brief [5:5] Ignored Configuration Write Access (w) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_CSS_CH_CLR_OP_Bits;

/** \brief CSS Clear Operation Error Status Register */
typedef struct _Ifx_CSS_CH_CLR_OPERR_Bits
{
    __O  Ifx_Strict_32Bit ILOP:1;          /**< \brief [0:0] Illegal operation (w) */
    __O  Ifx_Strict_32Bit ILIV:1;          /**< \brief [1:1] Illegal IV selection (w) */
    __O  Ifx_Strict_32Bit ILLEN:1;         /**< \brief [2:2] Illegal Length of Data (w) */
    __O  Ifx_Strict_32Bit ILVER:1;         /**< \brief [3:3] Illegal MAC verification (w) */
    __O  Ifx_Strict_32Bit NOIV:1;          /**< \brief [4:4] No valid IV (w) */
    __O  Ifx_Strict_32Bit ILSEQ:1;         /**< \brief [5:5] Illegal programming sequence (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [6:6] \internal Reserved */
    __O  Ifx_Strict_32Bit DINOFL:1;        /**< \brief [7:7] Sticky Data Input FIFO Overflow (w) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_CH_CLR_OPERR_Bits;

/** \brief CSS Cryptographic Configuration Register */
typedef struct _Ifx_CSS_CH_CRYPT_CFG_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ENC:1;           /**< \brief [4:4] Encryption (rw) */
    __IO Ifx_Strict_32Bit MACVER:1;        /**< \brief [5:5] MAC Verification (rw) */
    __IO Ifx_Strict_32Bit HWPAD:2;         /**< \brief [7:6] Hardware Padding Type (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_CH_CRYPT_CFG_Bits;

/** \brief CSS Cryptographic Key and IV Selection Register */
typedef struct _Ifx_CSS_CH_CRYPT_KEYSEL_Bits
{
    __IO Ifx_Strict_32Bit IV:8;            /**< \brief [7:0] ID of the IV (rw) */
    __IO Ifx_Strict_32Bit KEY1:8;          /**< \brief [15:8] ID of the first key (rw) */
    __IO Ifx_Strict_32Bit KEY2:8;          /**< \brief [23:16] ID of the second key (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CSS_CH_CRYPT_KEYSEL_Bits;

/** \brief Data In/Out, with supported address space */
typedef struct _Ifx_CSS_CH_DATA_A_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] DATA In or Out (rwh) */
} Ifx_CSS_CH_DATA_A_Bits;

/** \brief Data In/Out, with supported address space */
typedef struct _Ifx_CSS_CH_DATA_B_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] DATA In or Out (rwh) */
} Ifx_CSS_CH_DATA_B_Bits;

/** \brief CSS Hash Configuration Register */
typedef struct _Ifx_CSS_CH_HASH_CFG_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __IO Ifx_Strict_32Bit HMACEN:1;        /**< \brief [4:4] HMAC operation enable (rw) */
    __IO Ifx_Strict_32Bit HASHVER:1;       /**< \brief [5:5] Hash verification (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __IO Ifx_Strict_32Bit HMACKLEN:7;      /**< \brief [14:8] HMAC key length (rw) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_CSS_CH_HASH_CFG_Bits;

/** \brief CSS Hash Key and IV Selection Register */
typedef struct _Ifx_CSS_CH_HASH_KEYSEL_Bits
{
    __IO Ifx_Strict_32Bit IV:8;            /**< \brief [7:0] ID of the IV (rw) */
    __IO Ifx_Strict_32Bit KEY1:8;          /**< \brief [15:8] ID of the first key (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CSS_CH_HASH_KEYSEL_Bits;

/** \brief CSS Interrupt Node Pointer Register */
typedef struct _Ifx_CSS_CH_INP_Bits
{
    __IO Ifx_Strict_32Bit DINNODE:5;       /**< \brief [4:0] Node of Input Data Service Request (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit DOUTNODE:5;      /**< \brief [12:8] Node of Output Data Service Request (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit MACNODE:5;       /**< \brief [20:16] Node of MAC Generation/Verification Service Request (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __IO Ifx_Strict_32Bit ERRNODE:5;       /**< \brief [28:24] Node of Error Service Request (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CSS_CH_INP_Bits;

/** \brief CSS Interrupt Configuration Register */
typedef struct _Ifx_CSS_CH_INTR_CFG_Bits
{
    __IO Ifx_Strict_32Bit DIN:1;           /**< \brief [0:0] Enable Interrupt for Data Input Service request (rw) */
    __IO Ifx_Strict_32Bit DOUT:1;          /**< \brief [1:1] Enable Interrupt for Data Output (rw) */
    __IO Ifx_Strict_32Bit MAC:1;           /**< \brief [2:2] Enable Interrupt after MAC generation/verification finished (rw) */
    __IO Ifx_Strict_32Bit ERR:1;           /**< \brief [3:3] Enable Error Service Request (rw) */
    __IO Ifx_Strict_32Bit STREAM:2;        /**< \brief [5:4] Streaming mode configuration (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [6:6] \internal Reserved */
    __IO Ifx_Strict_32Bit INLVLPOL:1;      /**< \brief [7:7] Input Level Polarity (rw) */
    __IO Ifx_Strict_32Bit DINLVL:7;        /**< \brief [14:8] Input Data FIFO trigger level (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit DINQUANT:7;      /**< \brief [22:16] Input Data FIFO transfer quantity (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __IO Ifx_Strict_32Bit DOUTLVL:7;       /**< \brief [30:24] Output Data FIFO trigger level (rw) */
    __IO Ifx_Strict_32Bit OUTMODE:1;       /**< \brief [31:31] Output FIFO Mode (rw) */
} Ifx_CSS_CH_INTR_CFG_Bits;

/** \brief CSS Interrupt Trigger Status Register */
typedef struct _Ifx_CSS_CH_INTR_STAT_Bits
{
    __I  Ifx_Strict_32Bit DIN:1;           /**< \brief [0:0] Data Input Service Request Triggered (rh) */
    __I  Ifx_Strict_32Bit DOUT:1;          /**< \brief [1:1] Data Output Service Request Triggered (rh) */
    __I  Ifx_Strict_32Bit MAC:1;           /**< \brief [2:2] MAC Service Request Triggered (rh) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [3:3] Error Service Request Triggered (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CSS_CH_INTR_STAT_Bits;

/** \brief CSS Clear Interrupt Trigger Status Register */
typedef struct _Ifx_CSS_CH_INTR_STATCLR_Bits
{
    __O  Ifx_Strict_32Bit DIN:1;           /**< \brief [0:0] Clear Data Input Service Request Status (w) */
    __O  Ifx_Strict_32Bit DOUT:1;          /**< \brief [1:1] Clear Data Output Service Request Trigger Status (w) */
    __O  Ifx_Strict_32Bit MAC:1;           /**< \brief [2:2] Clear MAC Service Request Trigger Status (w) */
    __O  Ifx_Strict_32Bit ERR:1;           /**< \brief [3:3] Clear Error Service Request Trigger Status (w) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CSS_CH_INTR_STATCLR_Bits;

/** \brief CSS Initial Vector Input */
typedef struct _Ifx_CSS_CH_IV_VALUE_Bits
{
    __O  Ifx_Strict_32Bit IV:32;           /**< \brief [31:0] IV Input (w) */
} Ifx_CSS_CH_IV_VALUE_Bits;

/** \brief CSS IV Write Command Register */
typedef struct _Ifx_CSS_CH_IV_WRCMD_Bits
{
    __IO Ifx_Strict_32Bit ID:8;            /**< \brief [7:0] ID (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_CH_IV_WRCMD_Bits;

/** \brief CSS IV Write Status Register */
typedef struct _Ifx_CSS_CH_IV_WRSTAT_Bits
{
    __IO Ifx_Strict_32Bit ILLEN:1;         /**< \brief [0:0] Sticky Bit Wrong length (rw0ch) */
    __IO Ifx_Strict_32Bit NOIV:1;          /**< \brief [1:1] Sticky Bit No IV to be written (rw0ch) */
    __IO Ifx_Strict_32Bit ILLOC:1;         /**< \brief [2:2] Sticky Bit Illegal location (rw0ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [4:3] \internal Reserved */
    __IO Ifx_Strict_32Bit ILID:1;          /**< \brief [5:5] Sticky Bit Illegal ID (rw0ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __IO Ifx_Strict_32Bit OCC:1;           /**< \brief [8:8] Sticky Bit Addressed memory location is occupied (rw0ch) */
    __IO Ifx_Strict_32Bit NOCMD:1;         /**< \brief [9:9] Sticky Bit IV Write Without Command (rw0ch) */
    __IO Ifx_Strict_32Bit REASGN:1;        /**< \brief [10:10] Sticky Bit re-assignment of IV section (rw0ch) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [30:11] \internal Reserved */
    __I  Ifx_Strict_32Bit BUSY:1;          /**< \brief [31:31] IV Write Busy (rh) */
} Ifx_CSS_CH_IV_WRSTAT_Bits;

/** \brief CSS Key Attributes Register */
typedef struct _Ifx_CSS_CH_KEY_ATTR_Bits
{
    __IO Ifx_Strict_32Bit ID:8;            /**< \brief [7:0] ID (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [9:8] \internal Reserved */
    __I  Ifx_Strict_32Bit MACSIZE:6;       /**< \brief [15:10] MAC size for verification (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [17:16] \internal Reserved */
    __I  Ifx_Strict_32Bit SECBTRES:1;      /**< \brief [18:18] Secure boot restricted (rh) */
    __I  Ifx_Strict_32Bit VER:1;           /**< \brief [19:19] MAC verification capability (rh) */
    __I  Ifx_Strict_32Bit GEN:1;           /**< \brief [20:20] MAC generation capability of key (rh) */
    __I  Ifx_Strict_32Bit CIPH:1;          /**< \brief [21:21] Cipher capability of key (rh) */
    __I  Ifx_Strict_32Bit DBG:1;           /**< \brief [22:22] Debug restriction of key (rh) */
    __I  Ifx_Strict_32Bit WRP:1;           /**< \brief [23:23] Write protection of key (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [25:24] \internal Reserved */
    __I  Ifx_Strict_32Bit KEYSIZE:3;       /**< \brief [28:26] Key length indicator (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __I  Ifx_Strict_32Bit ERROR:1;         /**< \brief [31:31] Error loading key attributes (rh) */
} Ifx_CSS_CH_KEY_ATTR_Bits;

/** \brief CSS Key Input Register */
typedef struct _Ifx_CSS_CH_KEY_VALUE_Bits
{
    __O  Ifx_Strict_32Bit KEY:32;          /**< \brief [31:0] Key Input (w) */
} Ifx_CSS_CH_KEY_VALUE_Bits;

/** \brief CSS Key Write Command Register */
typedef struct _Ifx_CSS_CH_KEY_WRCMD_Bits
{
    __IO Ifx_Strict_32Bit ID:8;            /**< \brief [7:0] ID (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [9:8] \internal Reserved */
    __IO Ifx_Strict_32Bit MACSIZE:6;       /**< \brief [15:10] Size Of MAC For Comparison (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [17:16] \internal Reserved */
    __IO Ifx_Strict_32Bit SECBTRES:1;      /**< \brief [18:18] Secure boot restricted (rw) */
    __IO Ifx_Strict_32Bit VER:1;           /**< \brief [19:19] MAC verification capability (rw) */
    __IO Ifx_Strict_32Bit GEN:1;           /**< \brief [20:20] MAC generation capability of key (rw) */
    __IO Ifx_Strict_32Bit CIPH:1;          /**< \brief [21:21] Cipher capability of key (rw) */
    __IO Ifx_Strict_32Bit DBG:1;           /**< \brief [22:22] Debug restriction of key (rw) */
    __IO Ifx_Strict_32Bit WRP:1;           /**< \brief [23:23] Write protection of key (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [25:24] \internal Reserved */
    __IO Ifx_Strict_32Bit KEYSIZE:2;       /**< \brief [27:26] Length of the key or MAC to be written (rw) */
    __IO Ifx_Strict_32Bit FROMOUT:1;       /**< \brief [28:28] Copy result from Data Output FIFO to key storage (rw) */
    __IO Ifx_Strict_32Bit XORKEY:1;        /**< \brief [29:29] XOR new Key with current Key (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [30:30] \internal Reserved */
    __IO Ifx_Strict_32Bit WR:1;            /**< \brief [31:31] Write Key (rw) */
} Ifx_CSS_CH_KEY_WRCMD_Bits;

/** \brief CSS Key Write Status Register */
typedef struct _Ifx_CSS_CH_KEY_WRSTAT_Bits
{
    __IO Ifx_Strict_32Bit ILLEN:1;         /**< \brief [0:0] Sticky Bit illegal key length (rw0ch) */
    __IO Ifx_Strict_32Bit NOKEY:1;         /**< \brief [1:1] Sticky Bit No Key to be written (rw0ch) */
    __IO Ifx_Strict_32Bit ILLOC:1;         /**< \brief [2:2] Sticky Bit Illegal location (rw0ch) */
    __IO Ifx_Strict_32Bit WRP:1;           /**< \brief [3:3] Sticky Bit Key is write protected (rw0ch) */
    __IO Ifx_Strict_32Bit ILXOR:1;         /**< \brief [4:4] Sticky bit wrong length during XORing (rw0ch) */
    __IO Ifx_Strict_32Bit ILID:1;          /**< \brief [5:5] Sticky Bit Illegal ID (rw0ch) */
    __IO Ifx_Strict_32Bit NOWR:1;          /**< \brief [6:6] Sticky Bit No Write Access for Key Storage (rw0ch) */
    __IO Ifx_Strict_32Bit NOUPD:1;         /**< \brief [7:7] Sticky Bit No Attribute Update (rw0ch) */
    __IO Ifx_Strict_32Bit OCC:1;           /**< \brief [8:8] Sticky Bit Addressed memory location is occupied (rw0ch) */
    __IO Ifx_Strict_32Bit NOCMD:1;         /**< \brief [9:9] Sticky Bit Key Write Without Command (rw0ch) */
    __IO Ifx_Strict_32Bit REASGN:1;        /**< \brief [10:10] Sticky Bit re-assignment of key section (rw0ch) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [30:11] \internal Reserved */
    __I  Ifx_Strict_32Bit BUSY:1;          /**< \brief [31:31] Key Write Busy (rh) */
} Ifx_CSS_CH_KEY_WRSTAT_Bits;

/** \brief CSS Additional Authenticated Data Length Register */
typedef struct _Ifx_CSS_CH_LEN_AAD_Bits
{
    __IO Ifx_Strict_32Bit LEN:31;          /**< \brief [30:0] Length of the bit stream of AAD (rw) */
    __IO Ifx_Strict_32Bit FINAL:1;         /**< \brief [31:31] Final message part indicator (rw) */
} Ifx_CSS_CH_LEN_AAD_Bits;

/** \brief CSS Plain Cipher Text Length Register */
typedef struct _Ifx_CSS_CH_LEN_PC_Bits
{
    __IO Ifx_Strict_32Bit LEN:31;          /**< \brief [30:0] Length of the plain text (encryption) or cipher text (decryption) (rw) */
    __IO Ifx_Strict_32Bit FINAL:1;         /**< \brief [31:31] Final message part indicator (rw) */
} Ifx_CSS_CH_LEN_PC_Bits;

/** \brief CSS MAC Length Register */
typedef struct _Ifx_CSS_CH_MACLEN_Bits
{
    __IO Ifx_Strict_32Bit MACLEN:11;       /**< \brief [10:0] MAC Length (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CSS_CH_MACLEN_Bits;

/** \brief CSS MAC Status Register */
typedef struct _Ifx_CSS_CH_MAC_STAT_Bits
{
    __I  Ifx_Strict_32Bit MACBYTES:7;      /**< \brief [6:0] Available bytes of MAC (rh) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_CSS_CH_MAC_STAT_Bits;

/** \brief CSS Channel $i Generated or Reference MAC */
typedef struct _Ifx_CSS_CH_MAC_VALUE_Bits
{
    __IO Ifx_UReg_32Bit MAC:32;            /**< \brief [31:0] Output of the generated MAC and Input of the reference MAC for MAC verification (rwh) */
} Ifx_CSS_CH_MAC_VALUE_Bits;

/** \brief CSS Operation Control Register */
typedef struct _Ifx_CSS_CH_OPCTRL_Bits
{
    __IO Ifx_Strict_32Bit CRYPT:5;         /**< \brief [4:0] Crypto Mode (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit HASH:5;          /**< \brief [12:8] Hash Mode (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_CSS_CH_OPCTRL_Bits;

/** \brief CSS Resource Mapper Configuration */
typedef struct _Ifx_CSS_CH_RESMAP_Bits
{
    __IO Ifx_Strict_32Bit NBMAX:2;         /**< \brief [1:0] Maximum Number of Bytes (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit TIMEOUT:1;       /**< \brief [4:4] Timeout Time (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit PRIO:1;          /**< \brief [8:8] CSS Channel Priority Configuration (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_CSS_CH_RESMAP_Bits;

/** \brief CSS Channel Status Register FIFO */
typedef struct _Ifx_CSS_CH_STAT_FIFO_Bits
{
    __I  Ifx_Strict_32Bit INSIZE:9;        /**< \brief [8:0] Input Data FIFO depth (r) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [14:9] \internal Reserved */
    __I  Ifx_Strict_32Bit AADFWDAL:1;      /**< \brief [15:15] Additional Authenticated Data Forwarding Allowed (rh) */
    __I  Ifx_Strict_32Bit OUTSIZE:9;       /**< \brief [24:16] Output Data FIFO depth (r) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CSS_CH_STAT_FIFO_Bits;

/** \brief CSS Key Usage Error Status Register */
typedef struct _Ifx_CSS_CH_STAT_KEYERR_Bits
{
    __I  Ifx_Strict_32Bit ILID:1;          /**< \brief [0:0] Illegal key ID selection (rh) */
    __I  Ifx_Strict_32Bit DMGKEY:1;        /**< \brief [1:1] Damaged key (rh) */
    __I  Ifx_Strict_32Bit ILCIPH:1;        /**< \brief [2:2] Forbidden use of a key for en/decryption (rh) */
    __I  Ifx_Strict_32Bit ILGEN:1;         /**< \brief [3:3] Forbidden use of a key for MAC generation (rh) */
    __I  Ifx_Strict_32Bit ILVER:1;         /**< \brief [4:4] Forbidden use of a key for MAC Verification (rh) */
    __I  Ifx_Strict_32Bit ILDBG:1;         /**< \brief [5:5] Forbidden use of key while debug (rh) */
    __I  Ifx_Strict_32Bit UNINKEY:1;       /**< \brief [6:6] Used key is not initialized (rh) */
    __I  Ifx_Strict_32Bit KEYSIZE:1;       /**< \brief [7:7] Key has the wrong size (rh) */
    __I  Ifx_Strict_32Bit IVSEL:1;         /**< \brief [8:8] Initial Vector was selected as key (rh) */
    __I  Ifx_Strict_32Bit SECBTFL:1;       /**< \brief [9:9] Secure boot key fail (rh) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_CSS_CH_STAT_KEYERR_Bits;

/** \brief CSS Channel Status Register Key and IV */
typedef struct _Ifx_CSS_CH_STAT_KEYIV_Bits
{
    __I  Ifx_Strict_32Bit KEYNUM:8;        /**< \brief [7:0] Number of available key slots (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [14:8] \internal Reserved */
    __I  Ifx_Strict_32Bit WRKEY:1;         /**< \brief [15:15] Host is allowed to write keys (rh) */
    __I  Ifx_Strict_32Bit IVNUM:8;         /**< \brief [23:16] Number of available IV slots (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CSS_CH_STAT_KEYIV_Bits;

/** \brief CSS Lock Status of Length Status Register */
typedef struct _Ifx_CSS_CH_STAT_LCKLEN_Bits
{
    __I  Ifx_Strict_32Bit LCKPC:1;         /**< \brief [0:0] Lock status of PC length register (rh) */
    __I  Ifx_Strict_32Bit LCKAAD:1;        /**< \brief [1:1] Lock status of AAD length register (rh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CSS_CH_STAT_LCKLEN_Bits;

/** \brief CSS Length Status Register */
typedef struct _Ifx_CSS_CH_STAT_LEN_Bits
{
    __I  Ifx_Strict_32Bit LEN:31;          /**< \brief [30:0] Remaining Length of the data (rh) */
    __I  Ifx_Strict_32Bit DATATYPE:1;      /**< \brief [31:31] Data Type in Process (rh) */
} Ifx_CSS_CH_STAT_LEN_Bits;

/** \brief CSS Operation Status Register */
typedef struct _Ifx_CSS_CH_STAT_OP_Bits
{
    __I  Ifx_Strict_32Bit INIT:1;          /**< \brief [0:0] Channel Initialization Status Flag (rh) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [1:1] Error bit (rh) */
    __I  Ifx_Strict_32Bit MACGEN:1;        /**< \brief [2:2] The MAC value has been generated (rh) */
    __I  Ifx_Strict_32Bit MACVER:1;        /**< \brief [3:3] The MAC value has been verified (rh) */
    __I  Ifx_Strict_32Bit DOUTUFL:1;       /**< \brief [4:4] Sticky Data Output FIFO Underflow Status (rh) */
    __I  Ifx_Strict_32Bit IGNACC:1;        /**< \brief [5:5] Ignored Configuration Write Access (rh) */
    __I  Ifx_Strict_32Bit VERPEND:1;       /**< \brief [6:6] Verification pending (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __I  Ifx_Strict_32Bit INCNT:11;        /**< \brief [18:8] Input Data Level Count (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [19:19] \internal Reserved */
    __I  Ifx_Strict_32Bit OUTCNT:11;       /**< \brief [30:20] Output Data Level Count (rh) */
    __I  Ifx_Strict_32Bit CHBUSY:1;        /**< \brief [31:31] Channel Busy (rh) */
} Ifx_CSS_CH_STAT_OP_Bits;

/** \brief CSS Operation Error Status Register */
typedef struct _Ifx_CSS_CH_STAT_OPERR_Bits
{
    __I  Ifx_Strict_32Bit ILOP:1;          /**< \brief [0:0] Illegal operation (rh) */
    __I  Ifx_Strict_32Bit ILIV:1;          /**< \brief [1:1] Illegal IV selection (rh) */
    __I  Ifx_Strict_32Bit ILLEN:1;         /**< \brief [2:2] Illegal length of data (rh) */
    __I  Ifx_Strict_32Bit ILVER:1;         /**< \brief [3:3] Illegal MAC verification (rh) */
    __I  Ifx_Strict_32Bit NOIV:1;          /**< \brief [4:4] No valid IV (rh) */
    __I  Ifx_Strict_32Bit ILSEQ:1;         /**< \brief [5:5] Illegal programming sequence (rh) */
    __I  Ifx_Strict_32Bit ALARM:1;         /**< \brief [6:6] HWF alarm triggered (rh) */
    __I  Ifx_Strict_32Bit DINOFL:1;        /**< \brief [7:7] Sticky Data Input FIFO Overflow (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CSS_CH_STAT_OPERR_Bits;

/** \brief CSS Resource Mapper configuration status register */
typedef struct _Ifx_CSS_CH_STAT_RESMAP_Bits
{
    __I  Ifx_Strict_32Bit NBMAX:2;         /**< \brief [1:0] Maximum Number of Bytes (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __I  Ifx_Strict_32Bit TIMEOUT:1;       /**< \brief [4:4] Timeout Time (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit PRIO:1;          /**< \brief [8:8] CSS Channel Priority Configuration (rh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_CSS_CH_STAT_RESMAP_Bits;

/** \brief CSS Trigger Channel Reset Register */
typedef struct _Ifx_CSS_CH_TRGRES_Bits
{
    __O  Ifx_Strict_32Bit TRGRES:1;        /**< \brief [0:0] Trigger Reset (w) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CSS_CH_TRGRES_Bits;

/** \brief CSS Global Feature Status Register */
typedef struct _Ifx_CSS_FEATSTAT_Bits
{
    __I  Ifx_Strict_32Bit CHAVAIL:5;       /**< \brief [4:0] Number of Channels, highest available Channel ID (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit KEYIVSIZE:5;     /**< \brief [12:8] Size of the Key- and IV Storage (r) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [14:13] \internal Reserved */
    __I  Ifx_Strict_32Bit PRIVSIZE:3;      /**< \brief [17:15] Total number of memory slots for private channel 0 keys and IVs (r) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [21:18] \internal Reserved */
    __I  Ifx_Strict_32Bit AES:1;           /**< \brief [22:22] AES available (rh) */
    __I  Ifx_Strict_32Bit MD5:1;           /**< \brief [23:23] MD5 available (rh) */
    __I  Ifx_Strict_32Bit SHA1:1;          /**< \brief [24:24] SHA1 available (rh) */
    __I  Ifx_Strict_32Bit SHA2:1;          /**< \brief [25:25] SHA2 available (rh) */
    __I  Ifx_Strict_32Bit SHA3:1;          /**< \brief [26:26] SHA3 available (rh) */
    __I  Ifx_Strict_32Bit CHAPOLY:1;       /**< \brief [27:27] ChaCha20Poly1305 available (rh) */
    __I  Ifx_Strict_32Bit SM3:1;           /**< \brief [28:28] SM3 available (rh) */
    __I  Ifx_Strict_32Bit SM4:1;           /**< \brief [29:29] SM4 available (rh) */
    __I  Ifx_Strict_32Bit SIPHASH:1;       /**< \brief [30:30] SipHash available (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_FEATSTAT_Bits;

/** \brief Module Identification */
typedef struct _Ifx_CSS_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_CSS_ID_Bits;

/** \brief CSS Global Key Input Register */
typedef struct _Ifx_CSS_KEY_VALUE_Bits
{
    __O  Ifx_Strict_32Bit KEY:32;          /**< \brief [31:0] Input for the key to be stored inside CSS (w) */
} Ifx_CSS_KEY_VALUE_Bits;

/** \brief CSS Global Key Write Command Register */
typedef struct _Ifx_CSS_KEY_WRCMD_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] Key Address (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [9:9] \internal Reserved */
    __IO Ifx_Strict_32Bit MACSIZE:6;       /**< \brief [15:10] MAC size for verification (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [17:16] \internal Reserved */
    __IO Ifx_Strict_32Bit SECBTRES:1;      /**< \brief [18:18] Secure boot restricted (rw) */
    __IO Ifx_Strict_32Bit VER:1;           /**< \brief [19:19] MAC verification capability (rw) */
    __IO Ifx_Strict_32Bit GEN:1;           /**< \brief [20:20] MAC generation capability (rw) */
    __IO Ifx_Strict_32Bit CIPH:1;          /**< \brief [21:21] Cipher capability (rw) */
    __IO Ifx_Strict_32Bit DBG:1;           /**< \brief [22:22] Debug restriction (rw) */
    __IO Ifx_Strict_32Bit WRP:1;           /**< \brief [23:23] Write Protection (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [25:24] \internal Reserved */
    __IO Ifx_Strict_32Bit KEYSIZE:2;       /**< \brief [27:26] Length of the key to be written (rw) */
    __IO Ifx_Strict_32Bit FROMOUT:1;       /**< \brief [28:28] Copy result from Data Output FIFO to key storage (rw) */
    __IO Ifx_Strict_32Bit XORKEY:1;        /**< \brief [29:29] XOR new Key with current Key (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [30:30] \internal Reserved */
    __IO Ifx_Strict_32Bit WR:1;            /**< \brief [31:31] Write Key (rw) */
} Ifx_CSS_KEY_WRCMD_Bits;

/** \brief CSS Global Key Write Status Register */
typedef struct _Ifx_CSS_KEY_WRSTAT_Bits
{
    __IO Ifx_Strict_32Bit ILLEN:1;         /**< \brief [0:0] Sticky bit illegal key length (rw0ch) */
    __IO Ifx_Strict_32Bit NOKEY:1;         /**< \brief [1:1] Sticky bit No key to be written (rw0ch) */
    __IO Ifx_Strict_32Bit ILLOC:1;         /**< \brief [2:2] Sticky Bit Illegal Key Write Location (rw0ch) */
    __IO Ifx_Strict_32Bit WRP:1;           /**< \brief [3:3] Sticky bit Key is write protected (rw0ch) */
    __IO Ifx_Strict_32Bit ILXOR:1;         /**< \brief [4:4] Sticky bit wrong length during XORing (rw0ch) */
    __IO Ifx_Strict_32Bit ILADDR:1;        /**< \brief [5:5] Sticky bit illegal address (rw0ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [6:6] \internal Reserved */
    __IO Ifx_Strict_32Bit NOUPD:1;         /**< \brief [7:7] Sticky bit No Attribute Update (rw0ch) */
    __IO Ifx_Strict_32Bit OCC:1;           /**< \brief [8:8] Sticky bit Addressed memory location is occupied (rw0ch) */
    __IO Ifx_Strict_32Bit NOCMD:1;         /**< \brief [9:9] Sticky Bit Key Write Without Command (rw0ch) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [30:10] \internal Reserved */
    __I  Ifx_Strict_32Bit BUSY:1;          /**< \brief [31:31] Key write busy (rh) */
} Ifx_CSS_KEY_WRSTAT_Bits;

/** \brief CSS Global OCDS Control and Status Register */
typedef struct _Ifx_CSS_OCS_Bits
{
    __IO Ifx_Strict_32Bit TGS:1;           /**< \brief [0:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit TGB:1;           /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_Strict_32Bit TG_P:1;          /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CSS_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_CSS_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_CSS_PROT_Bits;

/** \brief CSS Global Security Configuration */
typedef struct _Ifx_CSS_SECCFG_Bits
{
    __IO Ifx_Strict_32Bit EXTSECLCK:1;     /**< \brief [0:0] External Security Event Key Locking (rw) */
    __IO Ifx_Strict_32Bit SECLCK:2;        /**< \brief [2:1] Internal Security Event Key Locking Configuration (rw) */
    __IO Ifx_Strict_32Bit SECBTFL:1;       /**< \brief [3:3] Secure boot failed (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CSS_SECCFG_Bits;

/** \brief CSS Software Computed MAC Compare Control Register */
typedef struct _Ifx_CSS_SWMAC_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CHAN:5;          /**< \brief [4:0] Channel number for MAC comparison (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [9:5] \internal Reserved */
    __IO Ifx_Strict_32Bit MACSIZE:6;       /**< \brief [15:10] MAC length for verification (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CSS_SWMAC_CTRL_Bits;

/** \brief CSS Software Computed MAC Compare Status Register */
typedef struct _Ifx_CSS_SWMAC_STAT_Bits
{
    __I  Ifx_Strict_32Bit MACBYTES:7;      /**< \brief [6:0] Available bytes of MAC (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __I  Ifx_Strict_32Bit OPVAL:1;         /**< \brief [8:8] Selected Operation is valid (rh) */
    __I  Ifx_Strict_32Bit SWVAL:1;         /**< \brief [9:9] Software MAC value is valid (rh) */
    __I  Ifx_Strict_32Bit CHVAL:1;         /**< \brief [10:10] Channel MAC value is valid (rh) */
    __I  Ifx_Strict_32Bit CMPPEND:1;       /**< \brief [11:11] Channel MAC value computation is pending (rh) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [28:12] \internal Reserved */
    __I  Ifx_Strict_32Bit IGNACC:1;        /**< \brief [29:29] Ignored Configuration Write Access (rh) */
    __I  Ifx_Strict_32Bit ILVER:1;         /**< \brief [30:30] Illegal MAC Verification (rh) */
    __I  Ifx_Strict_32Bit DONE:1;          /**< \brief [31:31] Comparison finished (rh) */
} Ifx_CSS_SWMAC_STAT_Bits;

/** \brief CSS Clear Software Computed MAC Compare Status Register */
typedef struct _Ifx_CSS_SWMAC_STATCLR_Bits
{
    __I  Ifx_Strict_32Bit :29;             /**< \brief [28:0] \internal Reserved */
    __O  Ifx_Strict_32Bit IGNACC:1;        /**< \brief [29:29] Clear Ignored Configuration Write Access (w) */
    __O  Ifx_Strict_32Bit ILVER:1;         /**< \brief [30:30] Clear Illegal MAC Verification (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CSS_SWMAC_STATCLR_Bits;

/** \brief CSS Software Computed MAC Compare Register */
typedef struct _Ifx_CSS_SWMAC_VALUE_Bits
{
    __IO Ifx_UReg_32Bit MAC:32;            /**< \brief [31:0] Input of the software computed MAC for MAC compare operation (rwh) */
} Ifx_CSS_SWMAC_VALUE_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_css_Registers_union
 * \{   */
/** \brief CSS Global AAD Forwarding Allowed   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_AADFWDAL_Bits B;               /**< \brief Bitfield access */
} Ifx_CSS_AADFWDAL;

/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ACCEN_RDA_CS_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_ACCEN_RDA_CS;

/** \brief Read access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_CSS_ACCEN_RDB_SRI_CS;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_CSS_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ACCEN_WRA_CS_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_ACCEN_WRA_CS;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ACCEN_WRB_SRI_CS_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_ACCEN_WRB_SRI_CS;

/** \brief CSS Alarm Trigger Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ALARM_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_ALARM_STAT;

/** \brief CSS Clear Alarm Trigger Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ALARM_STATCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_ALARM_STATCLR;

/** \brief CSS Global Authentication Failure Status Summary Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_AUTHFAIL_Bits B;               /**< \brief Bitfield access */
} Ifx_CSS_AUTHFAIL;

/** \brief Channel specific configuration read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_CFG_RDA_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_CFG_RDA;

/** \brief Channel specific configuration read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_CFG_RDB_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_CFG_RDB;

/** \brief Channel specific configuration write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_CFG_WRA_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_CFG_WRA;

/** \brief Channel specific configuration write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_CFG_WRB_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_CFG_WRB;

/** \brief Channel specific data read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_DATA_RDA_Bits B;      /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_DATA_RDA;

/** \brief Channel specific data read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_DATA_RDB_Bits B;      /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_DATA_RDB;

/** \brief Channel specific data write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_DATA_WRA_Bits B;      /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_DATA_WRA;

/** \brief Channel specific data write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ACCEN_DATA_WRB_Bits B;      /**< \brief Bitfield access */
} Ifx_CSS_CH_ACCEN_DATA_WRB;

/** \brief CSS Alarm Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ALARM_CFG_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_ALARM_CFG;

/** \brief CSS Alarm Configuration Shadow Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ALARM_CFGSH_Bits B;         /**< \brief Bitfield access */
} Ifx_CSS_CH_ALARM_CFGSH;

/** \brief CSS Alarm Trigger Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ALARM_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_CH_ALARM_STAT;

/** \brief CSS Clear Alarm Trigger Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ALARM_STATCLR_Bits B;       /**< \brief Bitfield access */
} Ifx_CSS_CH_ALARM_STATCLR;

/** \brief CSS IV Assignment Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ASGN_IV_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_CH_ASGN_IV;

/** \brief CSS Key Assignment Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_ASGN_KEY_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_ASGN_KEY;

/** \brief CSS Authentication Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_AUTHCFG_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_CH_AUTHCFG;

/** \brief CSS Authentication Fail Count Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_AUTHFC_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_AUTHFC;

/** \brief CSS Authentication Result Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_AUTHRES_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_CH_AUTHRES;

/** \brief CSS Channel Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_CSS_CH_CFG;

/** \brief CSS Clear Key Usage Error Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CLR_KEYERR_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_CH_CLR_KEYERR;

/** \brief CSS Clear Operation Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CLR_OP_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_CLR_OP;

/** \brief CSS Clear Operation Error Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CLR_OPERR_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_CLR_OPERR;

/** \brief CSS Cryptographic Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CRYPT_CFG_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_CRYPT_CFG;

/** \brief CSS Cryptographic Key and IV Selection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_CRYPT_KEYSEL_Bits B;        /**< \brief Bitfield access */
} Ifx_CSS_CH_CRYPT_KEYSEL;

/** \brief Data In/Out, with supported address space   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_DATA_A_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_DATA_A;

/** \brief Data In/Out, with supported address space   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_DATA_B_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_DATA_B;

/** \brief CSS Hash Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_HASH_CFG_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_HASH_CFG;

/** \brief CSS Hash Key and IV Selection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_HASH_KEYSEL_Bits B;         /**< \brief Bitfield access */
} Ifx_CSS_CH_HASH_KEYSEL;

/** \brief CSS Interrupt Node Pointer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_INP_Bits B;                 /**< \brief Bitfield access */
} Ifx_CSS_CH_INP;

/** \brief CSS Interrupt Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_INTR_CFG_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_INTR_CFG;

/** \brief CSS Interrupt Trigger Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_INTR_STAT_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_INTR_STAT;

/** \brief CSS Clear Interrupt Trigger Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_INTR_STATCLR_Bits B;        /**< \brief Bitfield access */
} Ifx_CSS_CH_INTR_STATCLR;

/** \brief CSS Initial Vector Input   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_IV_VALUE_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_IV_VALUE;

/** \brief CSS IV Write Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_IV_WRCMD_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_IV_WRCMD;

/** \brief CSS IV Write Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_IV_WRSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_IV_WRSTAT;

/** \brief CSS Key Attributes Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_KEY_ATTR_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_KEY_ATTR;

/** \brief CSS Key Input Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_KEY_VALUE_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_KEY_VALUE;

/** \brief CSS Key Write Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_KEY_WRCMD_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_KEY_WRCMD;

/** \brief CSS Key Write Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_KEY_WRSTAT_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_CH_KEY_WRSTAT;

/** \brief CSS Additional Authenticated Data Length Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_LEN_AAD_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_CH_LEN_AAD;

/** \brief CSS Plain Cipher Text Length Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_LEN_PC_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_LEN_PC;

/** \brief CSS MAC Length Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_MACLEN_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_MACLEN;

/** \brief CSS MAC Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_MAC_STAT_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_MAC_STAT;

/** \brief CSS Channel $i Generated or Reference MAC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_MAC_VALUE_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_MAC_VALUE;

/** \brief CSS Operation Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_OPCTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_OPCTRL;

/** \brief CSS Resource Mapper Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_RESMAP_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_RESMAP;

/** \brief CSS Channel Status Register FIFO   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_FIFO_Bits B;           /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_FIFO;

/** \brief CSS Key Usage Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_KEYERR_Bits B;         /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_KEYERR;

/** \brief CSS Channel Status Register Key and IV   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_KEYIV_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_KEYIV;

/** \brief CSS Lock Status of Length Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_LCKLEN_Bits B;         /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_LCKLEN;

/** \brief CSS Length Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_LEN_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_LEN;

/** \brief CSS Operation Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_OP_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_OP;

/** \brief CSS Operation Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_OPERR_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_OPERR;

/** \brief CSS Resource Mapper configuration status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_STAT_RESMAP_Bits B;         /**< \brief Bitfield access */
} Ifx_CSS_CH_STAT_RESMAP;

/** \brief CSS Trigger Channel Reset Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_CH_TRGRES_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_CH_TRGRES;

/** \brief CSS Global Feature Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_FEATSTAT_Bits B;               /**< \brief Bitfield access */
} Ifx_CSS_FEATSTAT;

/** \brief Module Identification   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_CSS_ID;

/** \brief CSS Global Key Input Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_KEY_VALUE_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_KEY_VALUE;

/** \brief CSS Global Key Write Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_KEY_WRCMD_Bits B;              /**< \brief Bitfield access */
} Ifx_CSS_KEY_WRCMD;

/** \brief CSS Global Key Write Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_KEY_WRSTAT_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_KEY_WRSTAT;

/** \brief CSS Global OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_CSS_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CSS_PROT;

/** \brief CSS Global Security Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_SECCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_CSS_SECCFG;

/** \brief CSS Software Computed MAC Compare Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_SWMAC_CTRL_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_SWMAC_CTRL;

/** \brief CSS Software Computed MAC Compare Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_SWMAC_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_CSS_SWMAC_STAT;

/** \brief CSS Clear Software Computed MAC Compare Status Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_SWMAC_STATCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_CSS_SWMAC_STATCLR;

/** \brief CSS Software Computed MAC Compare Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSS_SWMAC_VALUE_Bits B;            /**< \brief Bitfield access */
} Ifx_CSS_SWMAC_VALUE;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_CSS_ACCENCS
{
       __IO Ifx_CSS_ACCEN_WRA_CS                WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_CSS_ACCEN_WRB_SRI_CS            WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_CSS_ACCEN_RDA_CS                RDA;                    /**< \brief 8, Read access enable register A*/
       __I  Ifx_CSS_ACCEN_RDB_SRI_CS            RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_CSS_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_CSS_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CSS_ACCENCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_KEY_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief KEY object */
typedef volatile struct _Ifx_CSS_KEY
{
       __IO Ifx_CSS_KEY_WRSTAT                  WRSTAT;                 /**< \brief 0, CSS Global Key Write Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[8];          /**< \brief 4, \internal Reserved */
       __IO Ifx_CSS_KEY_WRCMD                   WRCMD;                  /**< \brief C, CSS Global Key Write Command Register*/
       __O  Ifx_CSS_KEY_VALUE                   VALUE[8];               /**< \brief 10, CSS Global Key Input Register*/
} Ifx_CSS_KEY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_ALARM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ALARM object */
typedef volatile struct _Ifx_CSS_ALARM
{
       __I  Ifx_CSS_ALARM_STAT                  STAT;                   /**< \brief 0, CSS Alarm Trigger Status Register*/
       __O  Ifx_CSS_ALARM_STATCLR               STATCLR;                /**< \brief 4, CSS Clear Alarm Trigger Status Register*/
} Ifx_CSS_ALARM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_SWMAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SWMAC object */
typedef volatile struct _Ifx_CSS_SWMAC
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CSS_SWMAC_STAT                  STAT;                   /**< \brief 4, CSS Software Computed MAC Compare Status Register*/
       __O  Ifx_CSS_SWMAC_STATCLR               STATCLR;                /**< \brief 8, CSS Clear Software Computed MAC Compare Status Register*/
       __IO Ifx_CSS_SWMAC_CTRL                  CTRL;                   /**< \brief C, CSS Software Computed MAC Compare Control Register*/
       __IO Ifx_CSS_SWMAC_VALUE                 VALUE[16];              /**< \brief 10, CSS Software Computed MAC Compare Register*/
} Ifx_CSS_SWMAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_ACCEN_CFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CFG object */
typedef volatile struct _Ifx_CSS_CH_ACCEN_CFG
{
       __IO Ifx_CSS_CH_ACCEN_CFG_WRA            WRA;                    /**< \brief 0, Channel specific configuration write access enable register A*/
       __IO Ifx_CSS_CH_ACCEN_CFG_WRB            WRB;                    /**< \brief 4, Channel specific configuration write access enable register B*/
       __IO Ifx_CSS_CH_ACCEN_CFG_RDA            RDA;                    /**< \brief 8, Channel specific configuration read access enable register A*/
       __IO Ifx_CSS_CH_ACCEN_CFG_RDB            RDB;                    /**< \brief C, Channel specific configuration read access enable register B*/
       __IO Ifx_CSS_ACCEN_VM                    VM;                     /**< \brief 10, Channel specific configuration VM access enable register*/
       __IO Ifx_CSS_ACCEN_PRS                   PRS;                    /**< \brief 14, Channel specific configuration PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_CSS_CH_ACCEN_CFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_ACCEN_DATA_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief DATA object */
typedef volatile struct _Ifx_CSS_CH_ACCEN_DATA
{
       __IO Ifx_CSS_CH_ACCEN_DATA_WRA           WRA;                    /**< \brief 0, Channel specific data write access enable register A*/
       __IO Ifx_CSS_CH_ACCEN_DATA_WRB           WRB;                    /**< \brief 4, Channel specific data write access enable register B*/
       __IO Ifx_CSS_CH_ACCEN_DATA_RDA           RDA;                    /**< \brief 8, Channel specific data read access enable register A*/
       __IO Ifx_CSS_CH_ACCEN_DATA_RDB           RDB;                    /**< \brief C, Channel specific data read access enable register B*/
       __IO Ifx_CSS_ACCEN_VM                    VM;                     /**< \brief 10, Channel specific data VM access enable register*/
       __IO Ifx_CSS_ACCEN_PRS                   PRS;                    /**< \brief 14, Channel specific data PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_CSS_CH_ACCEN_DATA;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CSS_CH_ACCEN
{
       __IO Ifx_CSS_CH_ACCEN_CFG                CFG;                    /**< \brief 0, Access protection unit for configuration*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_CSS_CH_ACCEN_DATA               DATA;                   /**< \brief 20, Access protection unit for data*/
} Ifx_CSS_CH_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_CRYPT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CRYPT object */
typedef volatile struct _Ifx_CSS_CH_CRYPT
{
       __IO Ifx_CSS_CH_CRYPT_CFG                CFG;                    /**< \brief 0, CSS Cryptographic Configuration Register*/
       __IO Ifx_CSS_CH_CRYPT_KEYSEL             KEYSEL;                 /**< \brief 4, CSS Cryptographic Key and IV Selection Register*/
} Ifx_CSS_CH_CRYPT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_HASH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief HASH object */
typedef volatile struct _Ifx_CSS_CH_HASH
{
       __IO Ifx_CSS_CH_HASH_CFG                 CFG;                    /**< \brief 0, CSS Hash Configuration Register*/
       __IO Ifx_CSS_CH_HASH_KEYSEL              KEYSEL;                 /**< \brief 4, CSS Hash Key and IV Selection Register*/
} Ifx_CSS_CH_HASH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_LEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LEN object */
typedef volatile struct _Ifx_CSS_CH_LEN
{
       __IO Ifx_CSS_CH_LEN_PC                   PC;                     /**< \brief 0, CSS Plain Cipher Text Length Register*/
       __IO Ifx_CSS_CH_LEN_AAD                  AAD;                    /**< \brief 4, CSS Additional Authenticated Data Length Register*/
} Ifx_CSS_CH_LEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_STAT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief STAT object */
typedef volatile struct _Ifx_CSS_CH_STAT
{
       __I  Ifx_CSS_CH_STAT_LEN                 LEN;                    /**< \brief 0, CSS Length Status Register*/
       __I  Ifx_CSS_CH_STAT_OP                  OP;                     /**< \brief 4, CSS Operation Status Register*/
       __I  Ifx_CSS_CH_STAT_OPERR               OPERR;                  /**< \brief 8, CSS Operation Error Status Register*/
       __I  Ifx_CSS_CH_STAT_KEYERR              KEYERR;                 /**< \brief C, CSS Key Usage Error Status Register*/
       __I  Ifx_CSS_CH_STAT_LCKLEN              LCKLEN;                 /**< \brief 10, CSS Lock Status of Length Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_14[12];        /**< \brief 14, \internal Reserved */
       __I  Ifx_CSS_CH_STAT_KEYIV               KEYIV;                  /**< \brief 20, CSS Channel Status Register Key and IV*/
       __I  Ifx_CSS_CH_STAT_FIFO                FIFO;                   /**< \brief 24, CSS Channel Status Register FIFO*/
       __I  Ifx_CSS_CH_STAT_RESMAP              RESMAP;                 /**< \brief 28, CSS Resource Mapper configuration status register*/
} Ifx_CSS_CH_STAT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_CLR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CLR object */
typedef volatile struct _Ifx_CSS_CH_CLR
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __O  Ifx_CSS_CH_CLR_OP                   OP;                     /**< \brief 4, CSS Clear Operation Status Register*/
       __O  Ifx_CSS_CH_CLR_OPERR                OPERR;                  /**< \brief 8, CSS Clear Operation Error Status Register*/
       __O  Ifx_CSS_CH_CLR_KEYERR               KEYERR;                 /**< \brief C, CSS Clear Key Usage Error Status Register*/
} Ifx_CSS_CH_CLR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_KEY_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief KEY object */
typedef volatile struct _Ifx_CSS_CH_KEY
{
       __IO Ifx_CSS_CH_KEY_WRSTAT               WRSTAT;                 /**< \brief 0, CSS Key Write Status Register*/
       __IO Ifx_CSS_CH_KEY_ATTR                 ATTR;                   /**< \brief 4, CSS Key Attributes Register*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_CSS_CH_KEY_WRCMD                WRCMD;                  /**< \brief C, CSS Key Write Command Register*/
       __O  Ifx_CSS_CH_KEY_VALUE                VALUE[8];               /**< \brief 10, CSS Key Input Register*/
} Ifx_CSS_CH_KEY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_IV_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief IV object */
typedef volatile struct _Ifx_CSS_CH_IV
{
       __IO Ifx_CSS_CH_IV_WRSTAT                WRSTAT;                 /**< \brief 0, CSS IV Write Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[8];          /**< \brief 4, \internal Reserved */
       __IO Ifx_CSS_CH_IV_WRCMD                 WRCMD;                  /**< \brief C, CSS IV Write Command Register*/
       __O  Ifx_CSS_CH_IV_VALUE                 VALUE[4];               /**< \brief 10, CSS Initial Vector Input*/
} Ifx_CSS_CH_IV;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_MAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MAC object */
typedef volatile struct _Ifx_CSS_CH_MAC
{
       __I  Ifx_CSS_CH_MAC_STAT                 STAT;                   /**< \brief 0, CSS MAC Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[12];         /**< \brief 4, \internal Reserved */
       __IO Ifx_CSS_CH_MAC_VALUE                VALUE[16];              /**< \brief 10, CSS Channel $i Generated or Reference MAC*/
} Ifx_CSS_CH_MAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_INTR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief INTR object */
typedef volatile struct _Ifx_CSS_CH_INTR
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CSS_CH_INTR_STAT                STAT;                   /**< \brief 4, CSS Interrupt Trigger Status Register*/
       __O  Ifx_CSS_CH_INTR_STATCLR             STATCLR;                /**< \brief 8, CSS Clear Interrupt Trigger Status Register*/
       __IO Ifx_CSS_CH_INTR_CFG                 CFG;                    /**< \brief C, CSS Interrupt Configuration Register*/
} Ifx_CSS_CH_INTR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_ALARM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ALARM object */
typedef volatile struct _Ifx_CSS_CH_ALARM
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CSS_CH_ALARM_STAT               STAT;                   /**< \brief 4, CSS Alarm Trigger Status Register*/
       __O  Ifx_CSS_CH_ALARM_STATCLR            STATCLR;                /**< \brief 8, CSS Clear Alarm Trigger Status Register*/
       __IO Ifx_CSS_CH_ALARM_CFG                CFG;                    /**< \brief C, CSS Alarm Configuration Register*/
       __IO Ifx_CSS_CH_ALARM_CFGSH              CFGSH;                  /**< \brief 10, CSS Alarm Configuration Shadow Register*/
} Ifx_CSS_CH_ALARM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_ASGN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ASGN object */
typedef volatile struct _Ifx_CSS_CH_ASGN
{
       __IO Ifx_CSS_CH_ASGN_KEY                 KEY;                    /**< \brief 0, CSS Key Assignment Register*/
       __IO Ifx_CSS_CH_ASGN_IV                  IV;                     /**< \brief 4, CSS IV Assignment Register*/
} Ifx_CSS_CH_ASGN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_DATA_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DATA object */
typedef volatile struct _Ifx_CSS_CH_DATA
{
       __IO Ifx_CSS_CH_DATA_A                   A[512];                 /**< \brief 0, MIRROR, Data In/Out, with supported address space*/
       __IO Ifx_CSS_CH_DATA_B                   B[512];                 /**< \brief 800, MIRROR, Data In/Out, with supported address space*/
} Ifx_CSS_CH_DATA;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Css_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_CSS_CH
{
       __I  Ifx_UReg_8Bit                       reserved_0[60];         /**< \brief 0, \internal Reserved */
       __IO Ifx_CSS_PROT                        PROTCSE;                /**< \brief 3C, Channel specific PROT Register Cyber Security Endinit*/
       __IO Ifx_CSS_CH_ACCEN                    ACCEN;                  /**< \brief 40, Access protection units*/
       __IO Ifx_CSS_CH_CFG                      CFG;                    /**< \brief 7C, CSS Channel Configuration Register*/
       __IO Ifx_CSS_CH_CRYPT                    CRYPT;                  /**< \brief 80, */
       __IO Ifx_CSS_CH_HASH                     HASH;                   /**< \brief 88, */
       __IO Ifx_CSS_CH_MACLEN                   MACLEN;                 /**< \brief 90, CSS MAC Length Register*/
       __IO Ifx_CSS_CH_LEN                      LEN;                    /**< \brief 94, */
       __IO Ifx_CSS_CH_OPCTRL                   OPCTRL;                 /**< \brief 9C, CSS Operation Control Register*/
       __IO Ifx_CSS_CH_STAT                     STAT;                   /**< \brief A0, */
       __I  Ifx_UReg_8Bit                       reserved_CC[20];        /**< \brief CC, \internal Reserved */
       __IO Ifx_CSS_CH_CLR                      CLR;                    /**< \brief E0, */
       __I  Ifx_UReg_8Bit                       reserved_F0[32];        /**< \brief F0, \internal Reserved */
       __IO Ifx_CSS_CH_KEY                      KEY;                    /**< \brief 110, */
       __I  Ifx_UReg_8Bit                       reserved_140[16];       /**< \brief 140, \internal Reserved */
       __IO Ifx_CSS_CH_IV                       IV;                     /**< \brief 150, */
       __IO Ifx_CSS_CH_MAC                      MAC;                    /**< \brief 170, */
       __I  Ifx_UReg_8Bit                       reserved_1C0[64];       /**< \brief 1C0, \internal Reserved */
       __I  Ifx_CSS_CH_AUTHRES                  AUTHRES;                /**< \brief 200, CSS Authentication Result Register*/
       __I  Ifx_UReg_8Bit                       reserved_204[252];      /**< \brief 204, \internal Reserved */
       __IO Ifx_CSS_CH_INTR                     INTR;                   /**< \brief 300, */
       __IO Ifx_CSS_CH_ALARM                    ALARM;                  /**< \brief 310, */
       __I  Ifx_UReg_8Bit                       reserved_324[28];       /**< \brief 324, \internal Reserved */
       __I  Ifx_CSS_CH_AUTHFC                   AUTHFC;                 /**< \brief 340, CSS Authentication Fail Count Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_344[956];      /**< \brief 344, \internal Reserved */
       __O  Ifx_CSS_CH_TRGRES                   TRGRES;                 /**< \brief 700, CSS Trigger Channel Reset Register*/
       __I  Ifx_UReg_8Bit                       reserved_704[260];      /**< \brief 704, \internal Reserved */
       __IO Ifx_CSS_CH_AUTHCFG                  AUTHCFG;                /**< \brief 808, CSS Authentication Configuration Register*/
       __IO Ifx_CSS_CH_INP                      INP;                    /**< \brief 80C, CSS Interrupt Node Pointer Register*/
       __IO Ifx_CSS_CH_RESMAP                   RESMAP;                 /**< \brief 810, CSS Resource Mapper Configuration*/
       __I  Ifx_UReg_8Bit                       reserved_814[12];       /**< \brief 814, \internal Reserved */
       __IO Ifx_CSS_CH_ASGN                     ASGN;                   /**< \brief 820, */
       __I  Ifx_UReg_8Bit                       reserved_828[2008];     /**< \brief 828, \internal Reserved */
       __IO Ifx_CSS_CH_DATA                     DATA;                   /**< \brief 1000, */
} Ifx_CSS_CH;

/******************************************************************************/
/** \addtogroup IfxSfr_Css_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CSS object */
typedef volatile struct _Ifx_CSS
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CSS_ID                          ID;                     /**< \brief 8, Module Identification*/
       __I  Ifx_CSS_FEATSTAT                    FEATSTAT;               /**< \brief C, CSS Global Feature Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_10[44];        /**< \brief 10, \internal Reserved */
       __IO Ifx_CSS_PROT                        PROTCSE;                /**< \brief 3C, PROT Register Cyber Security Endinit for cs-master*/
       __IO Ifx_CSS_ACCENCS                     ACCENCS;                /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_60[16];        /**< \brief 60, \internal Reserved */
       __IO Ifx_CSS_KEY                         KEY;                    /**< \brief 70, CSS Global Key Input Register*/
       __IO Ifx_CSS_SECCFG                      SECCFG;                 /**< \brief A0, CSS Global Security Configuration*/
       __I  Ifx_UReg_8Bit                       reserved_A4[4];         /**< \brief A4, \internal Reserved */
       __IO Ifx_CSS_OCS                         OCS;                    /**< \brief A8, CSS Global OCDS Control and Status Register*/
       __IO Ifx_CSS_AADFWDAL                    AADFWDAL;               /**< \brief AC, CSS Global AAD Forwarding Allowed*/
       __I  Ifx_UReg_8Bit                       reserved_B0[16];        /**< \brief B0, \internal Reserved */
       __I  Ifx_CSS_AUTHFAIL                    AUTHFAIL;               /**< \brief C0, CSS Global Authentication Failure Status Summary Register*/
       __IO Ifx_CSS_ALARM                       ALARM;                  /**< \brief C4, CSS Clear Alarm Trigger Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_CC[100];       /**< \brief CC, \internal Reserved */
       __IO Ifx_CSS_SWMAC                       SWMAC;                  /**< \brief 130, CSS Software Computed MAC Register*/
       __I  Ifx_UReg_8Bit                       reserved_180[7808];     /**< \brief 180, \internal Reserved */
       __IO Ifx_CSS_CH                          CH[21];                 /**< \brief 2000, */
       __I  Ifx_UReg_8Bit                       reserved_2C000[147456];    /**< \brief 2C000, \internal Reserved */
} Ifx_CSS;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXCSS_REGDEF_H */
