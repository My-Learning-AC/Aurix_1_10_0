#if CW.getSettingsVar("DebugMode") == 'Activated':
#    if 0x00000400 == CW.showMessageBox("debug mode", "<font size=6>attach with debugger?</font>", 4,0x00010400):
#        CW.showSplash("debug mode", "<font size=6>waiting for debugger ...</font>", 1)
#
#import debugpy
#debugpy.configure(python="C:/Users/mysliwid/AppData/Local/Programs/Python/Python38/python.exe")
#debugpy.listen(5678)
#debugpy.wait_for_client()
#CW.hideSplash()

STATE_SUCCESS = 0
STATE_FAIL = -1

COLOR_BLACK = 0x000000
COLOR_BLUE  = 0x0000FF
COLOR_GREEN = 0x00CF00

QUEUE_MODE_s = ['DISABLED', 'ENABLED', 'AVB']
MODE_s = ['DISABLED', 'undefined', 'ENABLED']
LINK_MODE_s = ['DISABLED', 'ENABLED', 'DASHED']

gethBrdgToDmaTxLink_obj = [[[GETH_BRDG_PORT0_Tx0_DMA0_Link, GETH_BRDG_PORT0_Tx0_DMA1_Link, GETH_BRDG_PORT0_Tx0_DMA2_Link, GETH_BRDG_PORT0_Tx0_DMA3_Link, GETH_BRDG_PORT0_Tx0_DMA4_Link, GETH_BRDG_PORT0_Tx0_DMA5_Link, GETH_BRDG_PORT0_Tx0_DMA6_Link, GETH_BRDG_PORT0_Tx0_DMA7_Link],
[GETH_BRDG_PORT0_Tx1_DMA0_Link, GETH_BRDG_PORT0_Tx1_DMA1_Link, GETH_BRDG_PORT0_Tx1_DMA2_Link, GETH_BRDG_PORT0_Tx1_DMA3_Link, GETH_BRDG_PORT0_Tx1_DMA4_Link, GETH_BRDG_PORT0_Tx1_DMA5_Link, GETH_BRDG_PORT0_Tx1_DMA6_Link, GETH_BRDG_PORT0_Tx1_DMA7_Link],
[GETH_BRDG_PORT0_Tx2_DMA0_Link, GETH_BRDG_PORT0_Tx2_DMA1_Link, GETH_BRDG_PORT0_Tx2_DMA2_Link, GETH_BRDG_PORT0_Tx2_DMA3_Link, GETH_BRDG_PORT0_Tx2_DMA4_Link, GETH_BRDG_PORT0_Tx2_DMA5_Link, GETH_BRDG_PORT0_Tx2_DMA6_Link, GETH_BRDG_PORT0_Tx2_DMA7_Link],
[GETH_BRDG_PORT0_Tx3_DMA0_Link, GETH_BRDG_PORT0_Tx3_DMA1_Link, GETH_BRDG_PORT0_Tx3_DMA2_Link, GETH_BRDG_PORT0_Tx3_DMA3_Link, GETH_BRDG_PORT0_Tx3_DMA4_Link, GETH_BRDG_PORT0_Tx3_DMA5_Link, GETH_BRDG_PORT0_Tx3_DMA6_Link, GETH_BRDG_PORT0_Tx3_DMA7_Link],
[GETH_BRDG_PORT0_Tx4_DMA0_Link, GETH_BRDG_PORT0_Tx4_DMA1_Link, GETH_BRDG_PORT0_Tx4_DMA2_Link, GETH_BRDG_PORT0_Tx4_DMA3_Link, GETH_BRDG_PORT0_Tx4_DMA4_Link, GETH_BRDG_PORT0_Tx4_DMA5_Link, GETH_BRDG_PORT0_Tx4_DMA6_Link, GETH_BRDG_PORT0_Tx4_DMA7_Link],
[GETH_BRDG_PORT0_Tx5_DMA0_Link, GETH_BRDG_PORT0_Tx5_DMA1_Link, GETH_BRDG_PORT0_Tx5_DMA2_Link, GETH_BRDG_PORT0_Tx5_DMA3_Link, GETH_BRDG_PORT0_Tx5_DMA4_Link, GETH_BRDG_PORT0_Tx5_DMA5_Link, GETH_BRDG_PORT0_Tx5_DMA6_Link, GETH_BRDG_PORT0_Tx5_DMA7_Link],
[GETH_BRDG_PORT0_Tx6_DMA0_Link, GETH_BRDG_PORT0_Tx6_DMA1_Link, GETH_BRDG_PORT0_Tx6_DMA2_Link, GETH_BRDG_PORT0_Tx6_DMA3_Link, GETH_BRDG_PORT0_Tx6_DMA4_Link, GETH_BRDG_PORT0_Tx6_DMA5_Link, GETH_BRDG_PORT0_Tx6_DMA6_Link, GETH_BRDG_PORT0_Tx6_DMA7_Link],
[GETH_BRDG_PORT0_Tx7_DMA0_Link, GETH_BRDG_PORT0_Tx7_DMA1_Link, GETH_BRDG_PORT0_Tx7_DMA2_Link, GETH_BRDG_PORT0_Tx7_DMA3_Link, GETH_BRDG_PORT0_Tx7_DMA4_Link, GETH_BRDG_PORT0_Tx7_DMA5_Link, GETH_BRDG_PORT0_Tx7_DMA6_Link, GETH_BRDG_PORT0_Tx7_DMA7_Link]],
[[GETH_BRDG_PORT1_Tx0_DMA0_Link, GETH_BRDG_PORT1_Tx0_DMA1_Link, GETH_BRDG_PORT1_Tx0_DMA2_Link, GETH_BRDG_PORT1_Tx0_DMA3_Link, GETH_BRDG_PORT1_Tx0_DMA4_Link, GETH_BRDG_PORT1_Tx0_DMA5_Link, GETH_BRDG_PORT1_Tx0_DMA6_Link, GETH_BRDG_PORT1_Tx0_DMA7_Link],
[GETH_BRDG_PORT1_Tx1_DMA0_Link, GETH_BRDG_PORT1_Tx1_DMA1_Link, GETH_BRDG_PORT1_Tx1_DMA2_Link, GETH_BRDG_PORT1_Tx1_DMA3_Link, GETH_BRDG_PORT1_Tx1_DMA4_Link, GETH_BRDG_PORT1_Tx1_DMA5_Link, GETH_BRDG_PORT1_Tx1_DMA6_Link, GETH_BRDG_PORT1_Tx1_DMA7_Link],
[GETH_BRDG_PORT1_Tx2_DMA0_Link, GETH_BRDG_PORT1_Tx2_DMA1_Link, GETH_BRDG_PORT1_Tx2_DMA2_Link, GETH_BRDG_PORT1_Tx2_DMA3_Link, GETH_BRDG_PORT1_Tx2_DMA4_Link, GETH_BRDG_PORT1_Tx2_DMA5_Link, GETH_BRDG_PORT1_Tx2_DMA6_Link, GETH_BRDG_PORT1_Tx2_DMA7_Link],
[GETH_BRDG_PORT1_Tx3_DMA0_Link, GETH_BRDG_PORT1_Tx3_DMA1_Link, GETH_BRDG_PORT1_Tx3_DMA2_Link, GETH_BRDG_PORT1_Tx3_DMA3_Link, GETH_BRDG_PORT1_Tx3_DMA4_Link, GETH_BRDG_PORT1_Tx3_DMA5_Link, GETH_BRDG_PORT1_Tx3_DMA6_Link, GETH_BRDG_PORT1_Tx3_DMA7_Link],
[GETH_BRDG_PORT1_Tx4_DMA0_Link, GETH_BRDG_PORT1_Tx4_DMA1_Link, GETH_BRDG_PORT1_Tx4_DMA2_Link, GETH_BRDG_PORT1_Tx4_DMA3_Link, GETH_BRDG_PORT1_Tx4_DMA4_Link, GETH_BRDG_PORT1_Tx4_DMA5_Link, GETH_BRDG_PORT1_Tx4_DMA6_Link, GETH_BRDG_PORT1_Tx4_DMA7_Link],
[GETH_BRDG_PORT1_Tx5_DMA0_Link, GETH_BRDG_PORT1_Tx5_DMA1_Link, GETH_BRDG_PORT1_Tx5_DMA2_Link, GETH_BRDG_PORT1_Tx5_DMA3_Link, GETH_BRDG_PORT1_Tx5_DMA4_Link, GETH_BRDG_PORT1_Tx5_DMA5_Link, GETH_BRDG_PORT1_Tx5_DMA6_Link, GETH_BRDG_PORT1_Tx5_DMA7_Link],
[GETH_BRDG_PORT1_Tx6_DMA0_Link, GETH_BRDG_PORT1_Tx6_DMA1_Link, GETH_BRDG_PORT1_Tx6_DMA2_Link, GETH_BRDG_PORT1_Tx6_DMA3_Link, GETH_BRDG_PORT1_Tx6_DMA4_Link, GETH_BRDG_PORT1_Tx6_DMA5_Link, GETH_BRDG_PORT1_Tx6_DMA6_Link, GETH_BRDG_PORT1_Tx6_DMA7_Link],
[GETH_BRDG_PORT1_Tx7_DMA0_Link, GETH_BRDG_PORT1_Tx7_DMA1_Link, GETH_BRDG_PORT1_Tx7_DMA2_Link, GETH_BRDG_PORT1_Tx7_DMA3_Link, GETH_BRDG_PORT1_Tx7_DMA4_Link, GETH_BRDG_PORT1_Tx7_DMA5_Link, GETH_BRDG_PORT1_Tx7_DMA6_Link, GETH_BRDG_PORT1_Tx7_DMA7_Link]]]

gethBrdgToDmaRxLink_obj = [[[GETH_BRDG_PORT0_Rx0_DMA0_Link, GETH_BRDG_PORT0_Rx0_DMA1_Link, GETH_BRDG_PORT0_Rx0_DMA2_Link, GETH_BRDG_PORT0_Rx0_DMA3_Link, GETH_BRDG_PORT0_Rx0_DMA4_Link, GETH_BRDG_PORT0_Rx0_DMA5_Link, GETH_BRDG_PORT0_Rx0_DMA6_Link, GETH_BRDG_PORT0_Rx0_DMA7_Link],
[GETH_BRDG_PORT0_Rx1_DMA0_Link, GETH_BRDG_PORT0_Rx1_DMA1_Link, GETH_BRDG_PORT0_Rx1_DMA2_Link, GETH_BRDG_PORT0_Rx1_DMA3_Link, GETH_BRDG_PORT0_Rx1_DMA4_Link, GETH_BRDG_PORT0_Rx1_DMA5_Link, GETH_BRDG_PORT0_Rx1_DMA6_Link, GETH_BRDG_PORT0_Rx1_DMA7_Link],
[GETH_BRDG_PORT0_Rx2_DMA0_Link, GETH_BRDG_PORT0_Rx2_DMA1_Link, GETH_BRDG_PORT0_Rx2_DMA2_Link, GETH_BRDG_PORT0_Rx2_DMA3_Link, GETH_BRDG_PORT0_Rx2_DMA4_Link, GETH_BRDG_PORT0_Rx2_DMA5_Link, GETH_BRDG_PORT0_Rx2_DMA6_Link, GETH_BRDG_PORT0_Rx2_DMA7_Link],
[GETH_BRDG_PORT0_Rx3_DMA0_Link, GETH_BRDG_PORT0_Rx3_DMA1_Link, GETH_BRDG_PORT0_Rx3_DMA2_Link, GETH_BRDG_PORT0_Rx3_DMA3_Link, GETH_BRDG_PORT0_Rx3_DMA4_Link, GETH_BRDG_PORT0_Rx3_DMA5_Link, GETH_BRDG_PORT0_Rx3_DMA6_Link, GETH_BRDG_PORT0_Rx3_DMA7_Link],
[GETH_BRDG_PORT0_Rx4_DMA0_Link, GETH_BRDG_PORT0_Rx4_DMA1_Link, GETH_BRDG_PORT0_Rx4_DMA2_Link, GETH_BRDG_PORT0_Rx4_DMA3_Link, GETH_BRDG_PORT0_Rx4_DMA4_Link, GETH_BRDG_PORT0_Rx4_DMA5_Link, GETH_BRDG_PORT0_Rx4_DMA6_Link, GETH_BRDG_PORT0_Rx4_DMA7_Link],
[GETH_BRDG_PORT0_Rx5_DMA0_Link, GETH_BRDG_PORT0_Rx5_DMA1_Link, GETH_BRDG_PORT0_Rx5_DMA2_Link, GETH_BRDG_PORT0_Rx5_DMA3_Link, GETH_BRDG_PORT0_Rx5_DMA4_Link, GETH_BRDG_PORT0_Rx5_DMA5_Link, GETH_BRDG_PORT0_Rx5_DMA6_Link, GETH_BRDG_PORT0_Rx5_DMA7_Link],
[GETH_BRDG_PORT0_Rx6_DMA0_Link, GETH_BRDG_PORT0_Rx6_DMA1_Link, GETH_BRDG_PORT0_Rx6_DMA2_Link, GETH_BRDG_PORT0_Rx6_DMA3_Link, GETH_BRDG_PORT0_Rx6_DMA4_Link, GETH_BRDG_PORT0_Rx6_DMA5_Link, GETH_BRDG_PORT0_Rx6_DMA6_Link, GETH_BRDG_PORT0_Rx6_DMA7_Link],
[GETH_BRDG_PORT0_Rx7_DMA0_Link, GETH_BRDG_PORT0_Rx7_DMA1_Link, GETH_BRDG_PORT0_Rx7_DMA2_Link, GETH_BRDG_PORT0_Rx7_DMA3_Link, GETH_BRDG_PORT0_Rx7_DMA4_Link, GETH_BRDG_PORT0_Rx7_DMA5_Link, GETH_BRDG_PORT0_Rx7_DMA6_Link, GETH_BRDG_PORT0_Rx7_DMA7_Link]],
[[GETH_BRDG_PORT1_Rx0_DMA0_Link, GETH_BRDG_PORT1_Rx0_DMA1_Link, GETH_BRDG_PORT1_Rx0_DMA2_Link, GETH_BRDG_PORT1_Rx0_DMA3_Link, GETH_BRDG_PORT1_Rx0_DMA4_Link, GETH_BRDG_PORT1_Rx0_DMA5_Link, GETH_BRDG_PORT1_Rx0_DMA6_Link, GETH_BRDG_PORT1_Rx0_DMA7_Link],
[GETH_BRDG_PORT1_Rx1_DMA0_Link, GETH_BRDG_PORT1_Rx1_DMA1_Link, GETH_BRDG_PORT1_Rx1_DMA2_Link, GETH_BRDG_PORT1_Rx1_DMA3_Link, GETH_BRDG_PORT1_Rx1_DMA4_Link, GETH_BRDG_PORT1_Rx1_DMA5_Link, GETH_BRDG_PORT1_Rx1_DMA6_Link, GETH_BRDG_PORT1_Rx1_DMA7_Link],
[GETH_BRDG_PORT1_Rx2_DMA0_Link, GETH_BRDG_PORT1_Rx2_DMA1_Link, GETH_BRDG_PORT1_Rx2_DMA2_Link, GETH_BRDG_PORT1_Rx2_DMA3_Link, GETH_BRDG_PORT1_Rx2_DMA4_Link, GETH_BRDG_PORT1_Rx2_DMA5_Link, GETH_BRDG_PORT1_Rx2_DMA6_Link, GETH_BRDG_PORT1_Rx2_DMA7_Link],
[GETH_BRDG_PORT1_Rx3_DMA0_Link, GETH_BRDG_PORT1_Rx3_DMA1_Link, GETH_BRDG_PORT1_Rx3_DMA2_Link, GETH_BRDG_PORT1_Rx3_DMA3_Link, GETH_BRDG_PORT1_Rx3_DMA4_Link, GETH_BRDG_PORT1_Rx3_DMA5_Link, GETH_BRDG_PORT1_Rx3_DMA6_Link, GETH_BRDG_PORT1_Rx3_DMA7_Link],
[GETH_BRDG_PORT1_Rx4_DMA0_Link, GETH_BRDG_PORT1_Rx4_DMA1_Link, GETH_BRDG_PORT1_Rx4_DMA2_Link, GETH_BRDG_PORT1_Rx4_DMA3_Link, GETH_BRDG_PORT1_Rx4_DMA4_Link, GETH_BRDG_PORT1_Rx4_DMA5_Link, GETH_BRDG_PORT1_Rx4_DMA6_Link, GETH_BRDG_PORT1_Rx4_DMA7_Link],
[GETH_BRDG_PORT1_Rx5_DMA0_Link, GETH_BRDG_PORT1_Rx5_DMA1_Link, GETH_BRDG_PORT1_Rx5_DMA2_Link, GETH_BRDG_PORT1_Rx5_DMA3_Link, GETH_BRDG_PORT1_Rx5_DMA4_Link, GETH_BRDG_PORT1_Rx5_DMA5_Link, GETH_BRDG_PORT1_Rx5_DMA6_Link, GETH_BRDG_PORT1_Rx5_DMA7_Link],
[GETH_BRDG_PORT1_Rx6_DMA0_Link, GETH_BRDG_PORT1_Rx6_DMA1_Link, GETH_BRDG_PORT1_Rx6_DMA2_Link, GETH_BRDG_PORT1_Rx6_DMA3_Link, GETH_BRDG_PORT1_Rx6_DMA4_Link, GETH_BRDG_PORT1_Rx6_DMA5_Link, GETH_BRDG_PORT1_Rx6_DMA6_Link, GETH_BRDG_PORT1_Rx6_DMA7_Link],
[GETH_BRDG_PORT1_Rx7_DMA0_Link, GETH_BRDG_PORT1_Rx7_DMA1_Link, GETH_BRDG_PORT1_Rx7_DMA2_Link, GETH_BRDG_PORT1_Rx7_DMA3_Link, GETH_BRDG_PORT1_Rx7_DMA4_Link, GETH_BRDG_PORT1_Rx7_DMA5_Link, GETH_BRDG_PORT1_Rx7_DMA6_Link, GETH_BRDG_PORT1_Rx7_DMA7_Link]]]

gethBrdgToDmaTxDashedLink_obj = [[[GETH_BRDG_PORT0_Tx0_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx0_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx1_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx1_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx2_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx2_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx3_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx3_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx4_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx4_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx5_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx5_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx6_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx6_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Tx7_DMA0_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA1_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA2_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA3_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA4_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA5_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA6_Dashed_Link, GETH_BRDG_PORT0_Tx7_DMA7_Dashed_Link]],
[[GETH_BRDG_PORT1_Tx0_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx0_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx1_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx1_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx2_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx2_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx3_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx3_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx4_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx4_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx5_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx5_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx6_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx6_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Tx7_DMA0_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA1_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA2_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA3_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA4_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA5_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA6_Dashed_Link, GETH_BRDG_PORT1_Tx7_DMA7_Dashed_Link]]]

gethBrdgToDmaRxDashedLink_obj = [[[GETH_BRDG_PORT0_Rx0_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx0_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx1_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx1_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx2_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx2_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx3_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx3_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx4_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx4_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx5_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx5_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx6_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx6_DMA7_Dashed_Link],
[GETH_BRDG_PORT0_Rx7_DMA0_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA1_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA2_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA3_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA4_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA5_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA6_Dashed_Link, GETH_BRDG_PORT0_Rx7_DMA7_Dashed_Link]],
[[GETH_BRDG_PORT1_Rx0_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx0_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx1_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx1_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx2_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx2_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx3_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx3_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx4_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx4_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx5_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx5_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx6_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx6_DMA7_Dashed_Link],
[GETH_BRDG_PORT1_Rx7_DMA0_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA1_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA2_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA3_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA4_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA5_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA6_Dashed_Link, GETH_BRDG_PORT1_Rx7_DMA7_Dashed_Link]]]

gethBrdgPortTxEn_obj = [[GETH_BRDG_PORT0_Tx0_EnVis, GETH_BRDG_PORT0_Tx1_EnVis, GETH_BRDG_PORT0_Tx2_EnVis, GETH_BRDG_PORT0_Tx3_EnVis, GETH_BRDG_PORT0_Tx4_EnVis, GETH_BRDG_PORT0_Tx5_EnVis, GETH_BRDG_PORT0_Tx6_EnVis, GETH_BRDG_PORT0_Tx7_EnVis],
[GETH_BRDG_PORT1_Tx0_EnVis, GETH_BRDG_PORT1_Tx1_EnVis, GETH_BRDG_PORT1_Tx2_EnVis, GETH_BRDG_PORT1_Tx3_EnVis, GETH_BRDG_PORT1_Tx4_EnVis, GETH_BRDG_PORT1_Tx5_EnVis, GETH_BRDG_PORT1_Tx6_EnVis, GETH_BRDG_PORT1_Tx7_EnVis]]

gethBrdgPortRxEn_obj = [[GETH_BRDG_PORT0_Rx0_EnVis, GETH_BRDG_PORT0_Rx1_EnVis, GETH_BRDG_PORT0_Rx2_EnVis, GETH_BRDG_PORT0_Rx3_EnVis, GETH_BRDG_PORT0_Rx4_EnVis, GETH_BRDG_PORT0_Rx5_EnVis, GETH_BRDG_PORT0_Rx6_EnVis, GETH_BRDG_PORT0_Rx7_EnVis],
[GETH_BRDG_PORT1_Rx0_EnVis, GETH_BRDG_PORT1_Rx1_EnVis, GETH_BRDG_PORT1_Rx2_EnVis, GETH_BRDG_PORT1_Rx3_EnVis, GETH_BRDG_PORT1_Rx4_EnVis, GETH_BRDG_PORT1_Rx5_EnVis, GETH_BRDG_PORT1_Rx6_EnVis, GETH_BRDG_PORT1_Rx7_EnVis]]

gethBrdgPortTxDis_obj = [[GETH_BRDG_PORT0_Tx0_DisVis, GETH_BRDG_PORT0_Tx1_DisVis, GETH_BRDG_PORT0_Tx2_DisVis, GETH_BRDG_PORT0_Tx3_DisVis, GETH_BRDG_PORT0_Tx4_DisVis, GETH_BRDG_PORT0_Tx5_DisVis, GETH_BRDG_PORT0_Tx6_DisVis, GETH_BRDG_PORT0_Tx7_DisVis],
[GETH_BRDG_PORT1_Tx0_DisVis, GETH_BRDG_PORT1_Tx1_DisVis, GETH_BRDG_PORT1_Tx2_DisVis, GETH_BRDG_PORT1_Tx3_DisVis, GETH_BRDG_PORT1_Tx4_DisVis, GETH_BRDG_PORT1_Tx5_DisVis, GETH_BRDG_PORT1_Tx6_DisVis, GETH_BRDG_PORT1_Tx7_DisVis]]

gethBrdgPortRxDis_obj = [[GETH_BRDG_PORT0_Rx0_DisVis, GETH_BRDG_PORT0_Rx1_DisVis, GETH_BRDG_PORT0_Rx2_DisVis, GETH_BRDG_PORT0_Rx3_DisVis, GETH_BRDG_PORT0_Rx4_DisVis, GETH_BRDG_PORT0_Rx5_DisVis, GETH_BRDG_PORT0_Rx6_DisVis, GETH_BRDG_PORT0_Rx7_DisVis],
[GETH_BRDG_PORT1_Rx0_DisVis, GETH_BRDG_PORT1_Rx1_DisVis, GETH_BRDG_PORT1_Rx2_DisVis, GETH_BRDG_PORT1_Rx3_DisVis, GETH_BRDG_PORT1_Rx4_DisVis, GETH_BRDG_PORT1_Rx5_DisVis, GETH_BRDG_PORT1_Rx6_DisVis, GETH_BRDG_PORT1_Rx7_DisVis]]

#gethBrdgPortChannelEn_obj = [[GETH_BRDG_PORT0_CH0_EN, GETH_BRDG_PORT0_CH1_EN, GETH_BRDG_PORT0_CH2_EN, GETH_BRDG_PORT0_CH3_EN, GETH_BRDG_PORT0_CH4_EN, GETH_BRDG_PORT0_CH5_EN, GETH_BRDG_PORT0_CH6_EN, GETH_BRDG_PORT0_CH7_EN],
#[GETH_BRDG_PORT1_CH0_EN, GETH_BRDG_PORT1_CH1_EN, GETH_BRDG_PORT1_CH2_EN, GETH_BRDG_PORT1_CH3_EN, GETH_BRDG_PORT1_CH4_EN, GETH_BRDG_PORT1_CH5_EN, GETH_BRDG_PORT1_CH6_EN, GETH_BRDG_PORT1_CH7_EN]]

gethBrdgPortChannelTxEn_obj = [[GETH_PORT_0_CONTROL_TXQ_EN0, GETH_PORT_0_CONTROL_TXQ_EN1, GETH_PORT_0_CONTROL_TXQ_EN2, GETH_PORT_0_CONTROL_TXQ_EN3, GETH_PORT_0_CONTROL_TXQ_EN4, GETH_PORT_0_CONTROL_TXQ_EN5, GETH_PORT_0_CONTROL_TXQ_EN6, GETH_PORT_0_CONTROL_TXQ_EN7],
                               [GETH_PORT_1_CONTROL_TXQ_EN0, GETH_PORT_1_CONTROL_TXQ_EN1, GETH_PORT_1_CONTROL_TXQ_EN2, GETH_PORT_1_CONTROL_TXQ_EN3, GETH_PORT_1_CONTROL_TXQ_EN4, GETH_PORT_1_CONTROL_TXQ_EN5, GETH_PORT_1_CONTROL_TXQ_EN6, GETH_PORT_1_CONTROL_TXQ_EN7]]

gethBrdgPortChannelRxEn_obj = [[GETH_PORT_0_CONTROL_RXC_EN0, GETH_PORT_0_CONTROL_RXC_EN1, GETH_PORT_0_CONTROL_RXC_EN2, GETH_PORT_0_CONTROL_RXC_EN3, GETH_PORT_0_CONTROL_RXC_EN4, GETH_PORT_0_CONTROL_RXC_EN5, GETH_PORT_0_CONTROL_RXC_EN6, GETH_PORT_0_CONTROL_RXC_EN7],
                               [GETH_PORT_1_CONTROL_RXC_EN0, GETH_PORT_1_CONTROL_RXC_EN1, GETH_PORT_1_CONTROL_RXC_EN2, GETH_PORT_1_CONTROL_RXC_EN3, GETH_PORT_1_CONTROL_RXC_EN4, GETH_PORT_1_CONTROL_RXC_EN5, GETH_PORT_1_CONTROL_RXC_EN6, GETH_PORT_1_CONTROL_RXC_EN7]]

gethMacTxEn_obj = [[GETH_PORT0_MAC_Tx0_EnVis, GETH_PORT0_MAC_Tx1_EnVis, GETH_PORT0_MAC_Tx2_EnVis, GETH_PORT0_MAC_Tx3_EnVis, GETH_PORT0_MAC_Tx4_EnVis, GETH_PORT0_MAC_Tx5_EnVis, GETH_PORT0_MAC_Tx6_EnVis, GETH_PORT0_MAC_Tx7_EnVis],
[GETH_PORT1_MAC_Tx0_EnVis, GETH_PORT1_MAC_Tx1_EnVis, GETH_PORT1_MAC_Tx2_EnVis, GETH_PORT1_MAC_Tx3_EnVis, GETH_PORT1_MAC_Tx4_EnVis, GETH_PORT1_MAC_Tx5_EnVis, GETH_PORT1_MAC_Tx6_EnVis, GETH_PORT1_MAC_Tx7_EnVis]]

gethMacRxEn_obj = [[GETH_PORT0_MAC_Rx0_EnVis, GETH_PORT0_MAC_Rx1_EnVis, GETH_PORT0_MAC_Rx2_EnVis, GETH_PORT0_MAC_Rx3_EnVis, GETH_PORT0_MAC_Rx4_EnVis, GETH_PORT0_MAC_Rx5_EnVis, GETH_PORT0_MAC_Rx6_EnVis, GETH_PORT0_MAC_Rx7_EnVis],
[GETH_PORT1_MAC_Rx0_EnVis, GETH_PORT1_MAC_Rx1_EnVis, GETH_PORT1_MAC_Rx2_EnVis, GETH_PORT1_MAC_Rx3_EnVis, GETH_PORT1_MAC_Rx4_EnVis, GETH_PORT1_MAC_Rx5_EnVis, GETH_PORT1_MAC_Rx6_EnVis, GETH_PORT1_MAC_Rx7_EnVis]]

gethMacTxAv_obj = [[GETH_PORT0_MAC_Tx0_AvVis, GETH_PORT0_MAC_Tx1_AvVis, GETH_PORT0_MAC_Tx2_AvVis, GETH_PORT0_MAC_Tx3_AvVis, GETH_PORT0_MAC_Tx4_AvVis, GETH_PORT0_MAC_Tx5_AvVis, GETH_PORT0_MAC_Tx6_AvVis, GETH_PORT0_MAC_Tx7_AvVis],
[GETH_PORT1_MAC_Tx0_AvVis, GETH_PORT1_MAC_Tx1_AvVis, GETH_PORT1_MAC_Tx2_AvVis, GETH_PORT1_MAC_Tx3_AvVis, GETH_PORT1_MAC_Tx4_AvVis, GETH_PORT1_MAC_Tx5_AvVis, GETH_PORT1_MAC_Tx6_AvVis, GETH_PORT1_MAC_Tx7_AvVis]]

gethMacRxAv_obj = [[GETH_PORT0_MAC_Rx0_AvVis, GETH_PORT0_MAC_Rx1_AvVis, GETH_PORT0_MAC_Rx2_AvVis, GETH_PORT0_MAC_Rx3_AvVis, GETH_PORT0_MAC_Rx4_AvVis, GETH_PORT0_MAC_Rx5_AvVis, GETH_PORT0_MAC_Rx6_AvVis, GETH_PORT0_MAC_Rx7_AvVis],
[GETH_PORT1_MAC_Rx0_AvVis, GETH_PORT1_MAC_Rx1_AvVis, GETH_PORT1_MAC_Rx2_AvVis, GETH_PORT1_MAC_Rx3_AvVis, GETH_PORT1_MAC_Rx4_AvVis, GETH_PORT1_MAC_Rx5_AvVis, GETH_PORT1_MAC_Rx6_AvVis, GETH_PORT1_MAC_Rx7_AvVis]]

gethMacTxDis_obj = [[GETH_PORT0_MAC_Tx0_DisVis, GETH_PORT0_MAC_Tx1_DisVis, GETH_PORT0_MAC_Tx2_DisVis, GETH_PORT0_MAC_Tx3_DisVis, GETH_PORT0_MAC_Tx4_DisVis, GETH_PORT0_MAC_Tx5_DisVis, GETH_PORT0_MAC_Tx6_DisVis, GETH_PORT0_MAC_Tx7_DisVis],
[GETH_PORT1_MAC_Tx0_DisVis, GETH_PORT1_MAC_Tx1_DisVis, GETH_PORT1_MAC_Tx2_DisVis, GETH_PORT1_MAC_Tx3_DisVis, GETH_PORT1_MAC_Tx4_DisVis, GETH_PORT1_MAC_Tx5_DisVis, GETH_PORT1_MAC_Tx6_DisVis, GETH_PORT1_MAC_Tx7_DisVis]]

gethMacRxDis_obj = [[GETH_PORT0_MAC_Rx0_DisVis, GETH_PORT0_MAC_Rx1_DisVis, GETH_PORT0_MAC_Rx2_DisVis, GETH_PORT0_MAC_Rx3_DisVis, GETH_PORT0_MAC_Rx4_DisVis, GETH_PORT0_MAC_Rx5_DisVis, GETH_PORT0_MAC_Rx6_DisVis, GETH_PORT0_MAC_Rx7_DisVis],
[GETH_PORT1_MAC_Rx0_DisVis, GETH_PORT1_MAC_Rx1_DisVis, GETH_PORT1_MAC_Rx2_DisVis, GETH_PORT1_MAC_Rx3_DisVis, GETH_PORT1_MAC_Rx4_DisVis, GETH_PORT1_MAC_Rx5_DisVis, GETH_PORT1_MAC_Rx6_DisVis, GETH_PORT1_MAC_Rx7_DisVis]]

gethDmaTxEn_obj = [GETH_DMA_CH0_Tx_EnVis, GETH_DMA_CH1_Tx_EnVis, GETH_DMA_CH2_Tx_EnVis, GETH_DMA_CH3_Tx_EnVis, GETH_DMA_CH4_Tx_EnVis, GETH_DMA_CH5_Tx_EnVis, GETH_DMA_CH6_Tx_EnVis, GETH_DMA_CH7_Tx_EnVis]
gethDmaRxEn_obj = [GETH_DMA_CH0_Rx_EnVis, GETH_DMA_CH1_Rx_EnVis, GETH_DMA_CH2_Rx_EnVis, GETH_DMA_CH3_Rx_EnVis, GETH_DMA_CH4_Rx_EnVis, GETH_DMA_CH5_Rx_EnVis, GETH_DMA_CH6_Rx_EnVis, GETH_DMA_CH7_Rx_EnVis]
gethDmaTxDis_obj = [GETH_DMA_CH0_Tx_DisVis, GETH_DMA_CH1_Tx_DisVis, GETH_DMA_CH2_Tx_DisVis, GETH_DMA_CH3_Tx_DisVis, GETH_DMA_CH4_Tx_DisVis, GETH_DMA_CH5_Tx_DisVis, GETH_DMA_CH6_Tx_DisVis, GETH_DMA_CH7_Tx_DisVis]
gethDmaRxDis_obj = [GETH_DMA_CH0_Rx_DisVis, GETH_DMA_CH1_Rx_DisVis, GETH_DMA_CH2_Rx_DisVis, GETH_DMA_CH3_Rx_DisVis, GETH_DMA_CH4_Rx_DisVis, GETH_DMA_CH5_Rx_DisVis, GETH_DMA_CH6_Rx_DisVis, GETH_DMA_CH7_Rx_DisVis]

#gethDmaEnable_obj = [GETH_DMA_CH0_EN, GETH_DMA_CH1_EN, GETH_DMA_CH2_EN, GETH_DMA_CH3_EN, GETH_DMA_CH4_EN, GETH_DMA_CH5_EN, GETH_DMA_CH6_EN, GETH_DMA_CH7_EN]
gethDmaTxEnable_obj = [GETH_DMA_TXCH0_EN, GETH_DMA_TXCH1_EN, GETH_DMA_TXCH2_EN, GETH_DMA_TXCH3_EN, GETH_DMA_TXCH4_EN, GETH_DMA_TXCH5_EN, GETH_DMA_TXCH6_EN, GETH_DMA_TXCH7_EN]
gethDmaRxEnable_obj = [GETH_DMA_RXCH0_EN, GETH_DMA_RXCH1_EN, GETH_DMA_RXCH2_EN, GETH_DMA_RXCH3_EN, GETH_DMA_RXCH4_EN, GETH_DMA_RXCH5_EN, GETH_DMA_RXCH6_EN, GETH_DMA_RXCH7_EN]

gethMacToBrdgTxLink_obj = [[GETH_PORT0_MAC_To_Brdg_Tx0_Link, GETH_PORT0_MAC_To_Brdg_Tx1_Link, GETH_PORT0_MAC_To_Brdg_Tx2_Link, GETH_PORT0_MAC_To_Brdg_Tx3_Link, GETH_PORT0_MAC_To_Brdg_Tx4_Link, GETH_PORT0_MAC_To_Brdg_Tx5_Link, GETH_PORT0_MAC_To_Brdg_Tx6_Link, GETH_PORT0_MAC_To_Brdg_Tx7_Link],
[GETH_PORT1_MAC_To_Brdg_Tx0_Link, GETH_PORT1_MAC_To_Brdg_Tx1_Link, GETH_PORT1_MAC_To_Brdg_Tx2_Link, GETH_PORT1_MAC_To_Brdg_Tx3_Link, GETH_PORT1_MAC_To_Brdg_Tx4_Link, GETH_PORT1_MAC_To_Brdg_Tx5_Link, GETH_PORT1_MAC_To_Brdg_Tx6_Link, GETH_PORT1_MAC_To_Brdg_Tx7_Link]]

gethMacToBrdgRxLink_obj = [[[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx0_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx1_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx2_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx3_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx4_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx5_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx6_To_Brdg_Rx7_Link], 
[GETH_PORT0_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx1_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx2_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx3_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx4_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx5_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx6_Link, GETH_PORT0_MAC_Rx7_To_Brdg_Rx7_Link]],
[[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx0_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx1_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx2_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx3_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx4_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx5_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx6_To_Brdg_Rx7_Link], 
[GETH_PORT1_MAC_Rx0_To_Brdg_Rx0_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx1_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx2_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx3_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx4_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx5_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx6_Link, GETH_PORT1_MAC_Rx7_To_Brdg_Rx7_Link]]]

gethMacRxQueueToDmaSelect_obj = [[GETH_PORT0_MTL_RXQ_DMA_MAP0_Q0MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP0_Q1MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP0_Q2MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP0_Q3MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP1_Q4MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP1_Q5MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP1_Q6MDMACH, GETH_PORT0_MTL_RXQ_DMA_MAP1_Q7MDMACH],
[GETH_PORT1_MTL_RXQ_DMA_MAP0_Q0MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP0_Q1MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP0_Q2MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP0_Q3MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP1_Q4MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP1_Q5MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP1_Q6MDMACH, GETH_PORT1_MTL_RXQ_DMA_MAP1_Q7MDMACH]]

gethMacQueueSelectTab_obj = [GETH_PORT0_MAC_QUEUE_SELECT, GETH_PORT1_MAC_QUEUE_SELECT]

#gethMacQueueEnable_obj = [[GETH_PORT0_MTL_QUEUE0_EN, GETH_PORT0_MTL_QUEUE1_EN, GETH_PORT0_MTL_QUEUE2_EN, GETH_PORT0_MTL_QUEUE3_EN, GETH_PORT0_MTL_QUEUE4_EN, GETH_PORT0_MTL_QUEUE5_EN, GETH_PORT0_MTL_QUEUE6_EN, GETH_PORT0_MTL_QUEUE7_EN],
#[GETH_PORT1_MTL_QUEUE0_EN, GETH_PORT1_MTL_QUEUE1_EN, GETH_PORT1_MTL_QUEUE2_EN, GETH_PORT1_MTL_QUEUE3_EN, GETH_PORT1_MTL_QUEUE4_EN, GETH_PORT1_MTL_QUEUE5_EN, GETH_PORT1_MTL_QUEUE6_EN, GETH_PORT1_MTL_QUEUE7_EN]]

gethMacQueueTxEnable_obj = [[GETH_PORT0_MTL_TXQ0_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ1_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ2_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ3_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ4_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ5_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ6_OPERATION_MODE_TXQEN, GETH_PORT0_MTL_TXQ7_OPERATION_MODE_TXQEN], 
                            [GETH_PORT1_MTL_TXQ0_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ1_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ2_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ3_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ4_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ5_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ6_OPERATION_MODE_TXQEN, GETH_PORT1_MTL_TXQ7_OPERATION_MODE_TXQEN]]

gethMacQueueRxEnable_obj = [[GETH_PORT0_MAC_RXQ_CTRL0_RXQ0EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ1EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ2EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ3EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ4EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ5EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ6EN, GETH_PORT0_MAC_RXQ_CTRL0_RXQ7EN],
                            [GETH_PORT1_MAC_RXQ_CTRL0_RXQ0EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ1EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ2EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ3EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ4EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ5EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ6EN, GETH_PORT1_MAC_RXQ_CTRL0_RXQ7EN]]

gethDmaBrdgPortSelect_obj = [GETH_DMA_PORT_SELECTION_CH0, GETH_DMA_PORT_SELECTION_CH1, GETH_DMA_PORT_SELECTION_CH2, GETH_DMA_PORT_SELECTION_CH3, GETH_DMA_PORT_SELECTION_CH4, GETH_DMA_PORT_SELECTION_CH5, GETH_DMA_PORT_SELECTION_CH6, GETH_DMA_PORT_SELECTION_CH7]

gethBrdgToDmaTxMap_obj = [[GETH_TXQ_MAP_PORT_0_TXQ0_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ1_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ2_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ3_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ4_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ5_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ6_DMA_MAP, GETH_TXQ_MAP_PORT_0_TXQ7_DMA_MAP], 
                          [GETH_TXQ_MAP_PORT_1_TXQ0_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ1_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ2_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ3_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ4_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ5_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ6_DMA_MAP, GETH_TXQ_MAP_PORT_1_TXQ7_DMA_MAP]]

gethBrdgToDmaRxMap_obj = [[GETH_RXQ_MAP_PORT_0_RXQ0_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ1_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ2_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ3_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ4_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ5_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ6_DMA_MAP, GETH_RXQ_MAP_PORT_0_RXQ7_DMA_MAP], 
                          [GETH_RXQ_MAP_PORT_1_RXQ0_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ1_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ2_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ3_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ4_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ5_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ6_DMA_MAP, GETH_RXQ_MAP_PORT_1_RXQ7_DMA_MAP]]

#gethBrdgPortForwardEn_obj = [[GETH_BRDG_PORT0_CH0_FWDEN, GETH_BRDG_PORT0_CH1_FWDEN, GETH_BRDG_PORT0_CH2_FWDEN, GETH_BRDG_PORT0_CH3_FWDEN, GETH_BRDG_PORT0_CH4_FWDEN, GETH_BRDG_PORT0_CH5_FWDEN, GETH_BRDG_PORT0_CH6_FWDEN, GETH_BRDG_PORT0_CH7_FWDEN], 
#[GETH_BRDG_PORT1_CH0_FWDEN, GETH_BRDG_PORT1_CH1_FWDEN, GETH_BRDG_PORT1_CH2_FWDEN, GETH_BRDG_PORT1_CH3_FWDEN, GETH_BRDG_PORT1_CH4_FWDEN, GETH_BRDG_PORT1_CH5_FWDEN, GETH_BRDG_PORT1_CH6_FWDEN, GETH_BRDG_PORT1_CH7_FWDEN]]
gethBrdgPortForwardEn_obj = [[GETH_PORT_0_CONTROL_FWD_EN0, GETH_PORT_0_CONTROL_FWD_EN1, GETH_PORT_0_CONTROL_FWD_EN2, GETH_PORT_0_CONTROL_FWD_EN3, GETH_PORT_0_CONTROL_FWD_EN4, GETH_PORT_0_CONTROL_FWD_EN5, GETH_PORT_0_CONTROL_FWD_EN6, GETH_PORT_0_CONTROL_FWD_EN7],
                             [GETH_PORT_1_CONTROL_FWD_EN0, GETH_PORT_1_CONTROL_FWD_EN1, GETH_PORT_1_CONTROL_FWD_EN2, GETH_PORT_1_CONTROL_FWD_EN3, GETH_PORT_1_CONTROL_FWD_EN4, GETH_PORT_1_CONTROL_FWD_EN5, GETH_PORT_1_CONTROL_FWD_EN6, GETH_PORT_1_CONTROL_FWD_EN7]]

gethBrdgPortToPortLink_obj = [[[GETH_BRDG_PORT0_Rx0_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx1_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx2_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx3_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx4_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx5_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx6_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx7_Link], 
[GETH_BRDG_PORT0_Rx7_PORT1_Tx0_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx1_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx2_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx3_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx4_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx5_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx6_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx7_Link]], 
[[GETH_BRDG_PORT1_Rx0_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx1_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx2_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx3_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx4_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx5_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx6_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx7_Link], 
[GETH_BRDG_PORT1_Rx7_PORT0_Tx0_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx1_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx2_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx3_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx4_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx5_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx6_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx7_Link]]]

#gethBrdgPortToPortDashedLink_obj[srcPort][srcRxCh][dstTxCh]
gethBrdgPortToPortDashedLink_obj = [[[GETH_BRDG_PORT0_Rx0_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx0_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx1_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx1_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx2_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx2_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx3_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx3_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx4_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx4_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx5_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx5_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx6_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx6_PORT1_Tx7_Dashed_Link], 
[GETH_BRDG_PORT0_Rx7_PORT1_Tx0_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx1_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx2_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx3_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx4_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx5_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx6_Dashed_Link, GETH_BRDG_PORT0_Rx7_PORT1_Tx7_Dashed_Link]], 
[[GETH_BRDG_PORT1_Rx0_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx0_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx1_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx1_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx2_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx2_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx3_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx3_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx4_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx4_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx5_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx5_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx6_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx6_PORT0_Tx7_Dashed_Link], 
[GETH_BRDG_PORT1_Rx7_PORT0_Tx0_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx1_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx2_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx3_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx4_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx5_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx6_Dashed_Link, GETH_BRDG_PORT1_Rx7_PORT0_Tx7_Dashed_Link]]]

#gethBrdgPortForwardMap_obj = [[GETH_TXQ_MAP_PORT_0_FWD0, GETH_TXQ_MAP_PORT_0_FWD1, GETH_TXQ_MAP_PORT_0_FWD2, GETH_TXQ_MAP_PORT_0_FWD3, GETH_TXQ_MAP_PORT_0_FWD4, GETH_TXQ_MAP_PORT_0_FWD5, GETH_TXQ_MAP_PORT_0_FWD6, GETH_TXQ_MAP_PORT_0_FWD7], 
#[GETH_TXQ_MAP_PORT_1_FWD0, GETH_TXQ_MAP_PORT_1_FWD1, GETH_TXQ_MAP_PORT_1_FWD2, GETH_TXQ_MAP_PORT_1_FWD3, GETH_TXQ_MAP_PORT_1_FWD4, GETH_TXQ_MAP_PORT_1_FWD5, GETH_TXQ_MAP_PORT_1_FWD6, GETH_TXQ_MAP_PORT_1_FWD7]]

#gethBrdgPortForwardTxMap_obj = [[GETH_TXQ_MAP_PORT_0_TXQ0_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ1_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ2_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ3_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ4_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ5_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ6_FWD_MAP, GETH_TXQ_MAP_PORT_0_TXQ7_FWD_MAP], 
#                                [GETH_TXQ_MAP_PORT_1_TXQ0_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ1_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ2_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ3_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ4_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ5_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ6_FWD_MAP, GETH_TXQ_MAP_PORT_1_TXQ7_FWD_MAP]]

gethBrdgPortForwardRxMap_obj = [[GETH_RXQ_MAP_PORT_0_RXQ0_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ1_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ2_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ3_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ4_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ5_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ6_FWD_MAP, GETH_RXQ_MAP_PORT_0_RXQ7_FWD_MAP], 
                                [GETH_RXQ_MAP_PORT_1_RXQ0_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ1_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ2_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ3_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ4_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ5_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ6_FWD_MAP, GETH_RXQ_MAP_PORT_1_RXQ7_FWD_MAP]]

gethMacEnable_obj = [GETH_MACEN_MAC0, GETH_MACEN_MAC1]

gethMacQueueTcSel_obj = [[GETH_PORT0_MTL_TXQ0_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ1_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ2_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ3_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ4_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ5_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ6_OPERATION_MODE_Q2TCMAP, GETH_PORT0_MTL_TXQ7_OPERATION_MODE_Q2TCMAP],
[GETH_PORT1_MTL_TXQ0_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ1_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ2_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ3_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ4_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ5_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ6_OPERATION_MODE_Q2TCMAP, GETH_PORT1_MTL_TXQ7_OPERATION_MODE_Q2TCMAP]]

gethMacQueuePayload_obj = [[GETH_PORT0_MTL_QUEUE0_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE1_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE2_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE3_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE4_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE5_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE6_PAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE7_PAYLOAD_SIZE],
[GETH_PORT1_MTL_QUEUE0_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE1_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE2_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE3_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE4_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE5_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE6_PAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE7_PAYLOAD_SIZE]]

gethMacRxQueuePrio_s =   [[['GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ0_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ1_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ2_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ3_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ4_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ5_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ6_7'], 
                           ['GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_0', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_1', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_2', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_3', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_4','GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_5', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_6', 'GETH.PORT0_MAC_RXQ_CTRL_PSRQ7_7']], 
                          [['GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ0_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ1_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ2_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ3_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ4_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ5_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ6_7'], 
                           ['GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_0', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_1', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_2', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_3', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_4','GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_5', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_6', 'GETH.PORT1_MAC_RXQ_CTRL_PSRQ7_7']]]

gethMacTimeStampEn_obj = [GETH_PORT0_MAC_TIMESTAMP_CONTROL_TSENA, GETH_PORT0_MAC_TIMESTAMP_CONTROL_TSENA]

gethMacTimeStampEn_s = ['GETH.PORT0_MAC_TIMESTAMP_CONTROL.TSENA', 'GETH.PORT0_MAC_TIMESTAMP_CONTROL.TSENA']
#gethDmaRxDescType_s = ['GETH.DMA_CH0_RX_DESC_TYPE.value=1', 'GETH.DMA_CH1_RX_DESC_TYPE.value=1', 'GETH.DMA_CH2_RX_DESC_TYPE.value=1', 'GETH.DMA_CH3_RX_DESC_TYPE.value=1', 'GETH.DMA_CH4_RX_DESC_TYPE.value=1', 'GETH.DMA_CH5_RX_DESC_TYPE.value=1', 'GETH.DMA_CH6_RX_DESC_TYPE.value=1', 'GETH.DMA_CH7_RX_DESC_TYPE.value=1']
gethDmaRxDescType_s = ['GETH.DMA_CH0_TS_EN=1', 'GETH.DMA_CH1_TS_EN=1', 'GETH.DMA_CH2_TS_EN=1', 'GETH.DMA_CH3_TS_EN=1', 'GETH.DMA_CH4_TS_EN=1', 'GETH.DMA_CH5_TS_EN=1', 'GETH.DMA_CH6_TS_EN=1', 'GETH.DMA_CH7_TS_EN=1']


#store a connection request from a bridge port to a DMA channel in case DMA cannel is in use already
DMA_CONNECT_REQUEST_BRDG_CH = [-1, -1, -1, -1, -1, -1, -1, -1]  #connection request from bridge channel x
DMA_CONNECT_REQUEST_BRDG_PORT = [-1, -1, -1, -1, -1, -1, -1, -1]#connection request from bridge port x

#stores the number of connections from bridge ports to the DMA channels
DMA_USECNT = [0, 0, 0, 0, 0, 0, 0, 0]

#representation of GETH.BRIDGE_DMA_PORT_SELECTION.PORTSEL$IDX$
DMA_PORTSEL = [-1, -1, -1, -1, -1, -1, -1, -1]

#stores the previous target DMA channel if forwarding is disabled
BRDG_PORTx_CHy_DmaSel_Store = [[0, 1, 2, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 6, 7]]

#stores the previous target channel in case of forwarding selected (GETH.TXQ_MAP_PORT_$PORT$.FWD$IDX$)
BRDG_PORTx_CHy_FwdSel_Store = [[0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0]]

def GethBrdgChannelTxEnableGet(portIdx_i, channelIdx_i):
    state_i = 0
    if (portIdx_i < 2) and (channelIdx_i < 8):
        state_i = gethBrdgPortChannelTxEn_obj[portIdx_i][channelIdx_i].checked
    return(state_i)

#def GethMacQueueStateSet(macIdx_i, queueIdx_i, mode):
#    state_i = 0
#    if (macIdx_i < 2) and (queueIdx_i < 8):
#        gethMacQueueEnable_obj[macIdx_i][queueIdx_i].setToValue(mode)

#def GethMacQueueStateGet(macIdx_i, queueIdx_i):
#    state_i = 0
#    if (macIdx_i < 2) and (queueIdx_i < 8):
#        state_i = int(gethMacQueueEnable_obj[macIdx_i][queueIdx_i].getValue())
#    return(state_i)
        
def GethMacToBrdgRxLinkShow(portIdx_i, queueIdx_i, channelIdx_i):
    if (portIdx_i < 2) and (queueIdx_i < 8) and (channelIdx_i < 8):
        gethMacToBrdgRxLink_obj[portIdx_i][queueIdx_i][channelIdx_i].text = "visible"
        
def GethMacToBrdgRxLinkHide(portIdx_i, queueIdx_i, channelIdx_i):
    if (portIdx_i < 2) and (queueIdx_i < 8) and (channelIdx_i < 8):
        gethMacToBrdgRxLink_obj[portIdx_i][queueIdx_i][channelIdx_i].text = "hidden"
        
def GethMacRxQueueToDmaSelectGet(portIdx_i, queueIdx_i):
    dmaChIdx_i = -1
    if (portIdx_i < 2) and (queueIdx_i < 8):
        dmaChIdx_i = gethMacRxQueueToDmaSelect_obj[portIdx_i][queueIdx_i].currentIndex
    return dmaChIdx_i

def GethMacRxQueueToDmaSelectSet(portIdx_i, queueIdx_i, dmaChIdx_i):
    if (portIdx_i < 2) and (queueIdx_i < 8) and (dmaChIdx_i < 8):
        gethMacRxQueueToDmaSelect_obj[portIdx_i][queueIdx_i].currentIndex = dmaChIdx_i

def GethMacRxQueueToDmaSelectEnable(portIdx_i, queueIdx_i):
    if (portIdx_i < 2) and (queueIdx_i < 8):
        gethMacRxQueueToDmaSelect_obj[portIdx_i][queueIdx_i].enabled = 1

def GethMacRxQueueToDmaSelectDisable(portIdx_i, queueIdx_i):
    if (portIdx_i < 2) and (queueIdx_i < 8):
        gethMacRxQueueToDmaSelect_obj[portIdx_i][queueIdx_i].enabled = 0

def GethMacQueueSelectTabColorSet(portIdx_i, queueIdx_i, color):
    tabIdx_i = -1
    if (portIdx_i < 2):
        tabIdx_i = gethMacQueueSelectTab_obj[portIdx_i].setTabTextColor(queueIdx_i, color)

def GethDmaBridgePortSet(dmaChIdx_i, portIdx_i):
    if (dmaChIdx_i < 8) and (portIdx_i < 2):
        #gethDmaBrdgPortSelect_obj[dmaChIdx_i].currentIndex = portIdx_i
        gethDmaBrdgPortSelect_obj[dmaChIdx_i].setToValue(portIdx_i)

def GethTxBrdgToDmaMapGet(portIdx_i, channelIdx_i):
    dmaChIdx_i = -1
    if (portIdx_i < 2) and (channelIdx_i < 8):
        dmaChIdx_i = gethBrdgToDmaTxMap_obj[portIdx_i][channelIdx_i].currentIndex
    return dmaChIdx_i

def GethRxBrdgToDmaMapGet(portIdx_i, channelIdx_i):
    dmaChIdx_i = -1
    if (portIdx_i < 2) and (channelIdx_i < 8):
        dmaChIdx_i = gethBrdgToDmaRxMap_obj[portIdx_i][channelIdx_i].currentIndex
    return dmaChIdx_i
    
def GethBrdgPortForwardEnableGet(portIdx_i, channelIdx_i):
    enableState_i = 0
    if (portIdx_i < 2) and (channelIdx_i < 8):
        enableState_i = gethBrdgPortForwardEn_obj[portIdx_i][channelIdx_i].checked
        if (enableState_i == 1):
            enableState_i = 2;
    return(enableState_i)

def GethDmaRequestSet(dmaChIdx_i, portIdx_i, channelIdx_i):
    if (dmaChIdx_i < 8) and (portIdx_i < 2) and (channelIdx_i < 8):
        DMA_CONNECT_REQUEST_BRDG_CH[dmaChIdx_i] = channelIdx_i
        DMA_CONNECT_REQUEST_BRDG_PORT[dmaChIdx_i] = portIdx_i

def GethDmaRequestGet(dmaChIdx_i):
    channelIdx_i = -1
    portIdx_i = -1
    if (dmaChIdx_i < 8):
        channelIdx_i = DMA_CONNECT_REQUEST_BRDG_CH[dmaChIdx_i]
        portIdx_i = DMA_CONNECT_REQUEST_BRDG_PORT[dmaChIdx_i]
    return portIdx_i, channelIdx_i
    
def GethDmaRequestClear(dmaChIdx_i):
    if (dmaChIdx_i < 8):
        DMA_CONNECT_REQUEST_BRDG_CH[dmaChIdx_i] = -1
        DMA_CONNECT_REQUEST_BRDG_PORT[dmaChIdx_i] = -1

def GethMacTxQueueTrafficClassGet(portIdx_i, queueIdx_i):
    trafficClass_i = -1
    if (portIdx_i < 2) and (queueIdx_i < 8):
        trafficClass_i = gethMacQueueTcSel_obj[portIdx_i][queueIdx_i].currentIndex
    return trafficClass_i

def GethMacQueuePayloadGet(portIdx_i, queueIdx_i):
    payloadSize_i = 0
    if (portIdx_i < 2) and (queueIdx_i < 8):
        payloadSize_i = gethMacQueuePayload_obj[portIdx_i][queueIdx_i].value
    return payloadSize_i

def setCwObj(element, value_i):
    #print("setCwObj(" + element.objectName + ") = " + str(value_i))
    application.setGuiElement(element.objectName, str(value_i), False, "", 0)
    #print("readback = " + str(element.checked))

class MacTrafficClassChannel:

    mode_s = ['SP', 'CBS', 'ETS']
    gethMacTcMode_obj = [[GETH_PORT0_MTL_TC0_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC1_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC2_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC3_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC4_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC5_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC6_ETS_CONTROL_TSA, GETH_PORT0_MTL_TC7_ETS_CONTROL_TSA],
                         [GETH_PORT1_MTL_TC0_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC1_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC2_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC3_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC4_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC5_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC6_ETS_CONTROL_TSA, GETH_PORT1_MTL_TC7_ETS_CONTROL_TSA]]

    gethMacTcMaxPayload_obj = [[GETH_PORT0_MTL_QUEUE5_CBS_MAXPAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE6_CBS_MAXPAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE7_CBS_MAXPAYLOAD_SIZE],
                               [GETH_PORT1_MTL_QUEUE5_CBS_MAXPAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE6_CBS_MAXPAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE7_CBS_MAXPAYLOAD_SIZE]]

    gethMacTcAutoCalc_obj = [[GETH_PORT0_MTL_QUEUE5_CBS_AUTO_CALC, GETH_PORT0_MTL_QUEUE6_CBS_AUTO_CALC, GETH_PORT0_MTL_QUEUE7_CBS_AUTO_CALC],
                             [GETH_PORT1_MTL_QUEUE5_CBS_AUTO_CALC, GETH_PORT1_MTL_QUEUE6_CBS_AUTO_CALC, GETH_PORT1_MTL_QUEUE7_CBS_AUTO_CALC]]

    gethMacTcMaxPayloadOthers_obj = [[GETH_PORT0_MTL_QUEUE5_BE_MAXPAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE6_BE_MAXPAYLOAD_SIZE, GETH_PORT0_MTL_QUEUE7_BE_MAXPAYLOAD_SIZE],
                                     [GETH_PORT1_MTL_QUEUE5_BE_MAXPAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE6_BE_MAXPAYLOAD_SIZE, GETH_PORT1_MTL_QUEUE7_BE_MAXPAYLOAD_SIZE]]

    CHANNEL_SP = 0
    CHANNEL_CBS = 1
    CHANNEL_ETS = 2
    def __init__(self, portIdx_i, channelIdx_i):
        self.portIdx_i = portIdx_i
        self.channelIdx_i = channelIdx_i
        self.payloadOwn_i = 0
        self.payloadOthers_i = 0
        self.mode = int(MacTrafficClassChannel.gethMacTcMode_obj[portIdx_i][channelIdx_i].getValue())
    
    def GethMacTcMaxPayloadSet(self, payloadSize_i):
        if (self.autoCalcGet() == 1):
            MacTrafficClassChannel.gethMacTcMaxPayload_obj[self.portIdx_i][self.channelIdx_i - 5].value = payloadSize_i

    def GethMacTcMaxOthersPayloadSet(self, payloadSize_i):
        if (self.autoCalcGet() == 1):
            MacTrafficClassChannel.gethMacTcMaxPayloadOthers_obj[self.portIdx_i][self.channelIdx_i - 5].value = payloadSize_i

    def autoCalcGet(self):
        state_i = 0
        if (self.channelIdx_i > 4) and (self.channelIdx_i < 8):
            state_i = MacTrafficClassChannel.gethMacTcAutoCalc_obj[self.portIdx_i][self.channelIdx_i - 5].checked
            if (state_i == 2):
                state_i = 1
        return state_i

    def payloadSizeSet(self, payloadSize_i):
        #print('MacTrafficClassChannel.payloadSizeSet( channel=' + str(self.channelIdx_i) + ', ' + str(payloadSize_i) + ')')
        self.payloadOwn_i = payloadSize_i
        if (self.autoCalcGet() == 1):
            #print('MacTrafficClassChannel.gethMacTcMaxPayload_obj set')
            MacTrafficClassChannel.gethMacTcMaxPayload_obj[self.portIdx_i][self.channelIdx_i - 5].value = payloadSize_i

    def payloadSizeGet(self):
        return self.payloadOwn_i

    def payloadSizeOthersSet(self, payloadSize_i):
        #print('MacTrafficClassChannel.payloadSizeOthersSet( channel=' + str(self.channelIdx_i) + ', ' + str(payloadSize_i) + ')')
        self.payloadOthers_i = payloadSize_i
        if (self.autoCalcGet() == 1):
            #print('MacTrafficClassChannel.gethMacTcMaxPayloadOthers_obj set')
            MacTrafficClassChannel.gethMacTcMaxPayloadOthers_obj[self.portIdx_i][self.channelIdx_i - 5].value = payloadSize_i

    def channelInUseSet(self):
        self.mode = int(MacTrafficClassChannel.gethMacTcMode_obj[self.portIdx_i][self.channelIdx_i].getValue())
        #print('MacTrafficClassChannel[' + str(self.channelIdx_i) + '].mode = ' + MacTrafficClassChannel.mode_s[self.mode])
        if (self.mode == MacTrafficClassChannel.CHANNEL_CBS):
            MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(self.channelIdx_i, COLOR_BLUE)
        else:
            MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(self.channelIdx_i, COLOR_GREEN)

    def channelInUseReset(self):
        MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(self.channelIdx_i, COLOR_BLACK)
        
    def onModeChange(self, mode_i):
        self.mode = mode_i
        if (self.mode == MacTrafficClassChannel.CHANNEL_CBS):
            MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(self.channelIdx_i, COLOR_BLUE)
        else:
            MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(self.channelIdx_i, COLOR_GREEN)
    
class MacTrafficClass:
    INIT_IN_PROGRESS = 0
    INIT_DONE = 1
    
    gethTcTabContainer_s = ['GETH.PORT0_MAC_TC_SELECT', 'GETH.PORT1_MAC_TC_SELECT']
    gethTcTabContainer_obj = [GETH_PORT0_MAC_TC_SELECT, GETH_PORT1_MAC_TC_SELECT]
    
    def __init__(self, portIdx_i):
        self.init = MacTrafficClass.INIT_IN_PROGRESS
        self.portIdx_i = portIdx_i
        self.channel = [MacTrafficClassChannel(portIdx_i, 0), MacTrafficClassChannel(portIdx_i, 1), MacTrafficClassChannel(portIdx_i, 2), MacTrafficClassChannel(portIdx_i, 3), MacTrafficClassChannel(portIdx_i, 4), MacTrafficClassChannel(portIdx_i, 5), MacTrafficClassChannel(portIdx_i, 6), MacTrafficClassChannel(portIdx_i, 7)]
        
    def maxPayloadSizeGet(self, channelIdx_i):  #GethMacQueueMaxPayloadSizeGet
        #print('MacTrafficClass.maxPayloadSizeGet(port=' + str(self.portIdx_i) + ', channel=' + str(channelIdx_i) + ')')
        payloadSize_i = 0
        temp_i = 0
        for i in range(0, 8):
            if (i != channelIdx_i):
                temp_i = self.channel[i].payloadSizeGet()
                #print('temp_i[' + str(i) + '] = ' + str(temp_i))
                if (payloadSize_i < temp_i):
                    payloadSize_i = temp_i
        return payloadSize_i

    def payloadSizeSet(self, channelIdx_i, payloadSize_i): #GethMacQueuePayloadSizeSet
        #print('MacTrafficClass.payloadSizeSet(port=' + str(self.portIdx_i) + ', channel=' + str(channelIdx_i) + ', ' + str(payloadSize_i) + ')')
        self.channel[channelIdx_i].payloadSizeSet(payloadSize_i)
        self.updatePayloadSizeInChannel()

    def payloadSizeOthersSet(self, channelIdx_i, payloadSize_i):
        self.channel[channelIdx_i].payloadSizeOthersSet(payloadSize_i)

    def updatePayloadSizeInChannel(self):
        if (self.init == MacTrafficClass.INIT_DONE):
            #print('MacTrafficClass.updatePayloadSizeInChannel(port=' + str(self.portIdx_i) + ')')
            payloadSize_i = 0
            for i in range(5, 8):
                payloadSize_i = self.maxPayloadSizeGet(i)
                #print('payloadSize_i[' + str(i) + '] = ' + str(payloadSize_i))
                self.payloadSizeOthersSet(i, payloadSize_i)
    
    def channelTabSelect(self, channelIdx_i):
        #print('MacTrafficClass.channelTabSelect(port=' + str(self.portIdx_i) + ', channel=' + str(channelIdx_i) + ')')
        application.runScript('SetTab(' + MacTrafficClass.gethTcTabContainer_s[self.portIdx_i] + ', ' + str(channelIdx_i) + ')')
        
    def channelTabInUseSet(self, channelIdx_i):
        #MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(channelIdx_i, COLOR_GREEN)
        self.channel[channelIdx_i].channelInUseSet()

    def channelTabInUseReset(self, channelIdx_i):
        #MacTrafficClass.gethTcTabContainer_obj[self.portIdx_i].setTabTextColor(channelIdx_i, COLOR_BLACK)
        self.channel[channelIdx_i].channelInUseReset()
    
    def initDoneSet(self):
        self.init = MacTrafficClass.INIT_DONE
        self.updatePayloadSizeInChannel()
        
class MacQueueTx:
    QUEUE_AV = 2
    QUEUE_ENABLED = 1
    QUEUE_DISABLED = 0
    QUEUE_UNINIT = -1
    
    def __init__(self, portIdx_i, queueIdx_i, bridgeChannel, trafficClass):
        self.init = 1
        self.queueIdx_i = queueIdx_i
        self.portIdx_i = portIdx_i
        self.bridgeChannel = bridgeChannel
        self.trafficClass = trafficClass
        self.mode = self.enableGet()
        self.gfxUpdateRequest = 0
        self.gfxQueueMode = MacQueueTx.QUEUE_UNINIT
        self.trafficClass_i = GethMacTxQueueTrafficClassGet(self.portIdx_i, self.queueIdx_i)
        self.trafficClassChannel = trafficClass.channel[self.trafficClass_i]
        self.payloadSize_i = GethMacQueuePayloadGet(self.portIdx_i, self.queueIdx_i)
        self.trafficClass.payloadSizeSet(self.trafficClass_i, self.payloadSize_i)
        #breakpoint()
        #self.onClickEvent(self.mode)

    def linkQueueRx(self, queueRx):
        self.queueRx = queueRx
        
    def gfxUpdate(self):
        #print('MacQueue.gfxUpdate attempt')
        #if (self.gfxUpdateRequest == 1):
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            self.gfxUpdateRequest = 0
            #print('MacQueue.gfxUpdate')
            application.runScript('setDef(Geth.Diagram.update=1)')

    def gfxQueueEnable(self):
        if (self.gfxQueueMode != MacQueueTx.QUEUE_ENABLED):
            self.gfxQueueMode = MacQueueTx.QUEUE_ENABLED
            gethMacTxEn_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            gethMacTxDis_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacTxAv_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1
            
    def gfxQueueAudioVideo(self):
        if (self.gfxQueueMode != MacQueueTx.QUEUE_AV):
            self.gfxQueueMode = MacQueueTx.QUEUE_AV
            gethMacTxEn_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacTxDis_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacTxAv_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            #GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_BLUE)
            GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1

    def gfxQueueDisabled(self):
        if (self.gfxQueueMode != MacQueueTx.QUEUE_DISABLED):
            self.gfxQueueMode = MacQueueTx.QUEUE_DISABLED
            gethMacTxEn_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacTxDis_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            gethMacTxAv_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            if self.queueRx.enableGet() == 0:
                GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_BLACK)
            self.gfxUpdateRequest = 1

    def payloadSizeGet():
        return self.payloadSize_i
        
    def enableGet(self):
        self.mode = int(gethMacQueueTxEnable_obj[self.portIdx_i][self.queueIdx_i].getValue())
        self.mode = self.mode ^ 3
        if (self.mode == 3):
            self.mode = 0
        return (self.mode)

    def setState(self, mode):
        if (self.portIdx_i < 2) and (self.queueIdx_i < 8):
            gethMacQueueTxEnable_obj[self.portIdx_i][self.queueIdx_i].setToValue(mode)

    def onClickEvent(self, mode):
        #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].onClickEvent(' +  QUEUE_MODE_s[mode] + ')')
        self.mode = mode
        if (mode == MacQueueTx.QUEUE_ENABLED):
            self.gfxQueueEnable()
            #self.bridgeChannel.enableSet(BridgeChannelTx.CHANNEL_ENABLED)
            self.trafficClass.channelTabSelect(self.trafficClass_i)
            self.trafficClass.channelTabInUseSet(self.trafficClass_i)
            self.payloadSize_i = GethMacQueuePayloadGet(self.portIdx_i, self.queueIdx_i)
            self.trafficClass.payloadSizeSet(self.trafficClass_i, self.payloadSize_i)
        elif (mode == MacQueueTx.QUEUE_AV):
            self.gfxQueueAudioVideo()
            #self.bridgeChannel.enableSet(BridgeChannelTx.CHANNEL_ENABLED)
            trafficClass_i = GethMacTxQueueTrafficClassGet(self.portIdx_i, self.queueIdx_i)
            #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].TrafficClass = ' + str(trafficClass_i))
            payloadSize_i = GethMacQueuePayloadGet(self.portIdx_i, self.queueIdx_i)
            #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].PayLoadSize = ' + str(payloadSize_i))
            self.trafficClass.payloadSizeSet(self.trafficClass_i, self.payloadSize_i)
            payloadSize_i = self.trafficClass.maxPayloadSizeGet(trafficClass_i)
            #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].MaxPayLoadSize = ' + str(payloadSize_i))
            self.trafficClassChannel.GethMacTcMaxOthersPayloadSet(payloadSize_i)
            self.trafficClass.channelTabSelect(self.trafficClass_i)
            self.trafficClass.channelTabInUseSet(self.trafficClass_i)
        else:
            self.gfxQueueDisabled()
            #self.bridgeChannel.enableSet(BridgeChannelTx.CHANNEL_DISABLED)
            self.trafficClass.channelTabInUseReset(self.trafficClass_i)
        self.gfxUpdate()

    def onPayloadSizeChange(self, payloadSize_i):
        self.payloadSize_i = payloadSize_i
        #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].onPayloadSizeChange(' +  str(payloadSize_i) + ')')
        trafficClass_i = GethMacTxQueueTrafficClassGet(self.portIdx_i, self.queueIdx_i)
        #payloadSize_i = GethMacQueuePayloadGet(self.portIdx_i, self.queueIdx_i)
        self.trafficClass.payloadSizeSet(self.trafficClass_i, self.payloadSize_i)
        #self.trafficClassChannel.payloadSizeSet(payloadSize_i)

    def enableSet(self, mode):
        if (mode <= MacQueueTx.QUEUE_AV):
            self.setState(mode)
            
    def assignBridgeChannel(self, bridgeChannel):
        self.bridgeChannel = bridgeChannel
    
    def trafficClassTabSelect(self):
        #print('Mac[' + str(self.portIdx_i) + '].QueueTx[' + str(self.queueIdx_i) + '].trafficClassTabSelect()')
        trafficClass_i = GethMacTxQueueTrafficClassGet(self.portIdx_i, self.queueIdx_i)
        self.trafficClass.channelTabSelect(trafficClass_i)

    def manualInit(self):
        self.onClickEvent(self.mode)
        self.init = 0

class MacQueueRx:
    QUEUE_AV = 2
    QUEUE_ENABLED = 1
    QUEUE_DISABLED = 0
    QUEUE_UNINIT = -1
    
    def __init__(self, portIdx_i, queueIdx_i, bridgeChannel):
        self.init = 1
        self.queueIdx_i = queueIdx_i
        self.portIdx_i = portIdx_i
        self.bridgeChannel = bridgeChannel
        self.mode = self.enableGet()
        self.gfxUpdateRequest = 0
        self.gfxQueueMode = MacQueueRx.QUEUE_UNINIT
        #breakpoint()
        #self.onClickEvent(self.mode)
        
    def linkQueueTx(self, queueTx):
        self.queueTx = queueTx

    def gfxUpdate(self):
        #print('MacQueue.gfxUpdate attempt')
        #if (self.gfxUpdateRequest == 1):
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            self.gfxUpdateRequest = 0
            #print('MacQueue.gfxUpdate')
            application.runScript('setDef(Geth.Diagram.update=1)')

    def gfxQueueEnable(self):
        if (self.gfxQueueMode != MacQueueRx.QUEUE_ENABLED):
            self.gfxQueueMode = MacQueueRx.QUEUE_ENABLED
            gethMacRxEn_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            gethMacRxDis_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacRxAv_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1
            
    def gfxQueueAudioVideo(self):
        if (self.gfxQueueMode != MacQueueRx.QUEUE_AV):
            self.gfxQueueMode = MacQueueRx.QUEUE_AV
            gethMacRxEn_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacRxDis_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacRxAv_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1

    def gfxQueueDisabled(self):
        if (self.gfxQueueMode != MacQueueRx.QUEUE_DISABLED):
            self.gfxQueueMode = MacQueueRx.QUEUE_DISABLED
            gethMacRxEn_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            gethMacRxDis_obj[self.portIdx_i][self.queueIdx_i].text = "visible"
            gethMacRxAv_obj[self.portIdx_i][self.queueIdx_i].text = "hidden"
            if self.queueTx.enableGet() == 0:
                GethMacQueueSelectTabColorSet(self.portIdx_i, self.queueIdx_i, COLOR_BLACK)
            self.gfxUpdateRequest = 1

    def enableRxLinkToBridge(self):
        rxBrdgChIdx_i = gethMacRxQueueToDmaSelect_obj[self.portIdx_i][self.queueIdx_i].currentIndex
        GethMacToBrdgRxLinkShow(self.portIdx_i, self.queueIdx_i, rxBrdgChIdx_i)

    def disableRxLinkToBridge(self):
        rxBrdgChIdx_i = gethMacRxQueueToDmaSelect_obj[self.portIdx_i][self.queueIdx_i].currentIndex
        GethMacToBrdgRxLinkHide(self.portIdx_i, self.queueIdx_i, rxBrdgChIdx_i)

    def enableGet(self):
        self.mode = int(gethMacQueueRxEnable_obj[self.portIdx_i][self.queueIdx_i].getValue())
        self.mode = self.mode ^ 3
        if (self.mode == 3):
            self.mode = 0
        return (self.mode)

    def setState(self, mode):
        if (self.portIdx_i < 2) and (self.queueIdx_i < 8):
            gethMacQueueRxEnable_obj[self.portIdx_i][self.queueIdx_i].setToValue(mode)
    
    def onClickEvent(self, mode):
        #print('Mac[' + str(self.portIdx_i) + '].QueueRx[' + str(self.queueIdx_i) + '].onClickEvent(' +  QUEUE_MODE_s[mode] + ')')
        self.mode = mode
        if (mode == MacQueueRx.QUEUE_ENABLED):
            self.gfxQueueEnable()
            #self.bridgeChannel.enableSet(BridgeChannelRx.CHANNEL_ENABLED)
            self.enableRxLinkToBridge()
        elif (mode == MacQueueRx.QUEUE_AV):
            self.gfxQueueAudioVideo()
            #self.bridgeChannel.enableSet(BridgeChannelRx.CHANNEL_ENABLED)
            self.enableRxLinkToBridge()
        else:
            self.gfxQueueDisabled()
            #self.bridgeChannel.enableSet(BridgeChannelRx.CHANNEL_DISABLED)
            self.disableRxLinkToBridge()
        self.gfxUpdate()

    def enableSet(self, mode):
        if (mode <= MacQueueRx.QUEUE_AV):
            self.setState(mode)
            
    def assignBridgeChannel(self, bridgeChannel):
        self.bridgeChannel = bridgeChannel
    
    def manualInit(self):
        self.onClickEvent(self.mode)
        self.init = 0
    
class MacAddress:
    gethMacAddr_obj = [[GETH_PORT0_MAC_ADDRESS0, GETH_PORT0_MAC_ADDRESS1, GETH_PORT0_MAC_ADDRESS2, GETH_PORT0_MAC_ADDRESS3, GETH_PORT0_MAC_ADDRESS4, GETH_PORT0_MAC_ADDRESS5, GETH_PORT0_MAC_ADDRESS6, GETH_PORT0_MAC_ADDRESS7, GETH_PORT0_MAC_ADDRESS8],
                       [GETH_PORT1_MAC_ADDRESS0, GETH_PORT1_MAC_ADDRESS1, GETH_PORT1_MAC_ADDRESS2, GETH_PORT1_MAC_ADDRESS3, GETH_PORT1_MAC_ADDRESS4, GETH_PORT1_MAC_ADDRESS5, GETH_PORT1_MAC_ADDRESS6, GETH_PORT1_MAC_ADDRESS7, GETH_PORT1_MAC_ADDRESS8]]

    gethMacAddrHigh_obj = [[GETH_PORT0_MAC_ADDRESS0_HIGH_VAR, GETH_PORT0_MAC_ADDRESS1_HIGH_VAR, GETH_PORT0_MAC_ADDRESS2_HIGH_VAR, GETH_PORT0_MAC_ADDRESS3_HIGH_VAR, GETH_PORT0_MAC_ADDRESS4_HIGH_VAR, GETH_PORT0_MAC_ADDRESS5_HIGH_VAR, GETH_PORT0_MAC_ADDRESS6_HIGH_VAR, GETH_PORT0_MAC_ADDRESS7_HIGH_VAR, GETH_PORT0_MAC_ADDRESS8_HIGH_VAR],
                          [GETH_PORT1_MAC_ADDRESS0_HIGH_VAR, GETH_PORT1_MAC_ADDRESS1_HIGH_VAR, GETH_PORT1_MAC_ADDRESS2_HIGH_VAR, GETH_PORT1_MAC_ADDRESS3_HIGH_VAR, GETH_PORT1_MAC_ADDRESS4_HIGH_VAR, GETH_PORT1_MAC_ADDRESS5_HIGH_VAR, GETH_PORT1_MAC_ADDRESS6_HIGH_VAR, GETH_PORT1_MAC_ADDRESS7_HIGH_VAR, GETH_PORT1_MAC_ADDRESS8_HIGH_VAR]]

    gethMacAddrLow_obj = [[GETH_PORT0_MAC_ADDRESS0_LOW_VAR, GETH_PORT0_MAC_ADDRESS1_LOW_VAR, GETH_PORT0_MAC_ADDRESS2_LOW_VAR, GETH_PORT0_MAC_ADDRESS3_LOW_VAR, GETH_PORT0_MAC_ADDRESS4_LOW_VAR, GETH_PORT0_MAC_ADDRESS5_LOW_VAR, GETH_PORT0_MAC_ADDRESS6_LOW_VAR, GETH_PORT0_MAC_ADDRESS7_LOW_VAR, GETH_PORT0_MAC_ADDRESS8_LOW_VAR],
                          [GETH_PORT1_MAC_ADDRESS0_LOW_VAR, GETH_PORT1_MAC_ADDRESS1_LOW_VAR, GETH_PORT1_MAC_ADDRESS2_LOW_VAR, GETH_PORT1_MAC_ADDRESS3_LOW_VAR, GETH_PORT1_MAC_ADDRESS4_LOW_VAR, GETH_PORT1_MAC_ADDRESS5_LOW_VAR, GETH_PORT1_MAC_ADDRESS6_LOW_VAR, GETH_PORT1_MAC_ADDRESS7_LOW_VAR, GETH_PORT1_MAC_ADDRESS8_LOW_VAR]]

    gethMacAddrMask_obj = [[GETH_PORT0_MAC_ADDRESS0_MASK_VAR, GETH_PORT0_MAC_ADDRESS1_MASK_VAR, GETH_PORT0_MAC_ADDRESS2_MASK_VAR, GETH_PORT0_MAC_ADDRESS3_MASK_VAR, GETH_PORT0_MAC_ADDRESS4_MASK_VAR, GETH_PORT0_MAC_ADDRESS5_MASK_VAR, GETH_PORT0_MAC_ADDRESS6_MASK_VAR, GETH_PORT0_MAC_ADDRESS7_MASK_VAR, GETH_PORT0_MAC_ADDRESS8_MASK_VAR], 
                           [GETH_PORT1_MAC_ADDRESS0_MASK_VAR, GETH_PORT1_MAC_ADDRESS1_MASK_VAR, GETH_PORT1_MAC_ADDRESS2_MASK_VAR, GETH_PORT1_MAC_ADDRESS3_MASK_VAR, GETH_PORT1_MAC_ADDRESS4_MASK_VAR, GETH_PORT1_MAC_ADDRESS5_MASK_VAR, GETH_PORT1_MAC_ADDRESS6_MASK_VAR, GETH_PORT1_MAC_ADDRESS7_MASK_VAR, GETH_PORT1_MAC_ADDRESS8_MASK_VAR]]

    def __init__(self, portIdx_i, addrIdx_i):
        self.addrIdx_i = addrIdx_i
        self.portIdx_i = portIdx_i

    def convertMacAddress(self, macTextObj):
        MBC = 0
        macText = macTextObj.text.upper()
        #print(macText)
        #LSB            MSB
        #00:03:19:00:01:00
        #  ^
        #  x
        x = macText.find(":")
        mac0_s = macText[:x]
        y = mac0_s.find("X")
        if (y == -1):
            mac0_i = int(mac0_s, 16)
        else:
            mac0_i = 0
            mac0_s = 'xx'
            MBC |= (1 << 0)

        x += 1
        #00:03:19:00:01:A0
        #   ^ ^
        #   x x2
        x2 = macText.find(":", x)
        mac1_s = macText[x:x2]
        y = mac1_s.find("X")
        if (y == -1):
            mac1_i = int(mac1_s, 16)
        else:
            mac1_i = 0
            mac1_s = 'xx'
            MBC |= (1 << 1)

        x = x2 + 1
        #00:03:19:00:01:00
        #      ^ ^
        #      x x2
        x2 = macText.find(":", x)
        mac2_s = macText[x:x2]
        y = mac2_s.find("X")
        if (y == -1):
            mac2_i = int(mac2_s, 16)
        else:
            mac2_i = 0
            mac2_s = 'xx'
            MBC |= (1 << 2)

        x = x2 + 1
        #00:03:19:00:01:00
        #         ^ ^
        #         x x2
        x2 = macText.find(":", x)
        mac3_s = macText[x:x2]
        y = mac3_s.find("X")
        if (y == -1):
            mac3_i = int(mac3_s, 16)
        else:
            mac3_i = 0
            mac3_s = 'xx'
            MBC |= (1 << 3)

        x = x2 + 1
        #00:03:19:00:01:00
        #            ^ ^
        #            x x2
        x2 = macText.find(":", x)
        mac4_s = macText[x:x2]
        y = mac4_s.find("X")
        if (y == -1):
            mac4_i = int(mac4_s, 16)
        else:
            mac4_i = 0
            mac4_s = 'xx'
            MBC |= (1 << 4)

        x = x2 + 1
        #00:03:19:00:01:00
        #               ^
        #               x
        mac5_s = macText[x:]
        y = mac5_s.find("X")
        if (y == -1):
            mac5_i = int(mac5_s, 16)
        else:
            mac5_i = 0
            mac5_s = 'xx'
            MBC |= (1 << 5)

        macLow = (mac3_i << 24) | (mac2_i << 16) | (mac1_i << 8) | mac0_i
        macHigh = (mac5_i << 8) | mac4_i
        
        macTextObj.text = mac0_s + ':' + mac1_s  + ':' + mac2_s  + ':' + mac3_s  + ':' + mac4_s  + ':' + mac5_s
        return macHigh, macLow, MBC
        
    def onMacAddrChange(self):
        #print('onMacAddrChange: ' + MacAddress.gethMacAddr_obj[self.portIdx_i][self.addrIdx_i].objectName)
        macHigh, macLow, MBC = self.convertMacAddress(MacAddress.gethMacAddr_obj[self.portIdx_i][self.addrIdx_i])
        MacAddress.gethMacAddrHigh_obj[self.portIdx_i][self.addrIdx_i].value = macHigh
        MacAddress.gethMacAddrLow_obj[self.portIdx_i][self.addrIdx_i].value = macLow
        MacAddress.gethMacAddrMask_obj[self.portIdx_i][self.addrIdx_i].value = MBC

class Mac:
    MAC_ENABLED = 2
    MAC_DISABLED = 0
    def __init__(self, portIdx_i, bridgePort):
        self.bridgePort = bridgePort
        self.trafficClass = MacTrafficClass(portIdx_i)
        self.portIdx_i = portIdx_i
        self.mode = gethMacEnable_obj[portIdx_i].checked
        self.queueTx = [MacQueueTx(portIdx_i, 0, bridgePort.channelTx[0], self.trafficClass), MacQueueTx(portIdx_i, 1, bridgePort.channelTx[1], self.trafficClass), MacQueueTx(portIdx_i, 2, bridgePort.channelTx[2], self.trafficClass), MacQueueTx(portIdx_i, 3, bridgePort.channelTx[3], self.trafficClass), MacQueueTx(portIdx_i, 4, bridgePort.channelTx[4], self.trafficClass), MacQueueTx(portIdx_i, 5, bridgePort.channelTx[5], self.trafficClass), MacQueueTx(portIdx_i, 6, bridgePort.channelTx[6], self.trafficClass), MacQueueTx(portIdx_i, 7, bridgePort.channelTx[7], self.trafficClass)]
        self.queueRx = [MacQueueRx(portIdx_i, 0, bridgePort.channelRx[0]), MacQueueRx(portIdx_i, 1, bridgePort.channelRx[1]), MacQueueRx(portIdx_i, 2, bridgePort.channelRx[2]), MacQueueRx(portIdx_i, 3, bridgePort.channelRx[3]), MacQueueRx(portIdx_i, 4, bridgePort.channelRx[4]), MacQueueRx(portIdx_i, 5, bridgePort.channelRx[5]), MacQueueRx(portIdx_i, 6, bridgePort.channelRx[6]), MacQueueRx(portIdx_i, 7, bridgePort.channelRx[7])]
        self.addr = [MacAddress(portIdx_i, 0), MacAddress(portIdx_i, 1), MacAddress(portIdx_i, 2), MacAddress(portIdx_i, 3), MacAddress(portIdx_i, 4), MacAddress(portIdx_i, 5), MacAddress(portIdx_i, 6), MacAddress(portIdx_i, 7), MacAddress(portIdx_i, 8)]
        for i in range(0, 8):
            self.queueTx[i].linkQueueRx(self.queueRx[i])
        for i in range(0, 8):
            self.queueRx[i].linkQueueTx(self.queueTx[i])
            
    def enableGet(self):
        return (self.mode)
        
    def enableSet(self, mode):
        ###print('Mac0.emableSet(' +  str(mode) + ')')
        self.enableState_i = mode
        if (mode == Mac.MAC_DISABLED):
            setCwObj(gethMacEnable_obj[self.portIdx_i], 0)
        else:
            setCwObj(gethMacEnable_obj[self.portIdx_i], 1)

    def QueueTxEnableGet(self, queueIdx_i):
        state_i = self.queueTx[queueIdx_i].enableGet()
        return state_i

    def QueueTxEnableSet(self, queueIdx_i, mode):
        self.queueTx[queueIdx_i].enableSet(mode)

    def QueueRxEnableGet(self, queueIdx_i):
        state_i = self.queueRx[queueIdx_i].enableGet()
        return state_i

    def QueueRxEnableSet(self, queueIdx_i, mode):
        self.queueRx[queueIdx_i].enableSet(mode)

    def onQueueTabSelectChange(self, queueIdx_i):
        #print('Mac[' + str(self.portIdx_i) + '].onQueueTabSelectChange(' + str(queueIdx_i) + ')')
        self.queueTx[queueIdx_i].trafficClassTabSelect()
    
    def manualInit(self):
        for idx in range(0, 8):
            self.queueTx[idx].manualInit()
            self.queueRx[idx].manualInit()
        for idx in range(0, 9):
            self.addr[idx].onMacAddrChange()
            
    def timeStampEnableClick(self, checkState_i):
        #print("timeStampEnableClick = " + str(checkState_i))
        dma.updateTimeStampCfg(self.portIdx_i, checkState_i)
            
class BridgeChannelTx:
    CHANNEL_ENABLED = 2
    CHANNEL_UNDEF = 1
    CHANNEL_DISABLED = 0
    CHANNEL_UNINIT = -1
    FORWARD_ENABLED = 2
    FORWARD_DISABLED = 0
    LINK_DISABLED = 0
    LINK_ENABLED = 1
    LINK_DASHED = 2
    LINK_UNINIT = -1
    
    def __init__(self, portIdx_i, channelIdx_i, dmaChannel):
        #print('++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.__init__ +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++')
        self.init = 1
        self.channelIdx_i = channelIdx_i
        self.portIdx_i = portIdx_i
        self.dmaLinkEn_b = 0
        dmaChIdx_i = GethTxBrdgToDmaMapGet(portIdx_i, channelIdx_i)
        #print("GethTxBrdgToDmaMapGet() = " + str(dmaChIdx_i))
        if (dmaChannel.dmaChIdx_i == dmaChIdx_i):
            self.dmaChannel = dmaChannel
        else:
            self.dmaChannel = dma.channelTx[dmaChIdx_i]
        self.mode = self.enableGet()
        self.linkedState = BridgeChannelTx.LINK_UNINIT
        self.linkedChannel = -1
        self.gfxUpdateRequest = 0
        self.gfxChannelEnableState = BridgeChannelTx.CHANNEL_UNINIT
        self.gfxMacLinkState = BridgeChannelTx.LINK_UNINIT
        self.gfxDmaLinkState = BridgeChannelTx.LINK_UNINIT
        self.gfxFwdLinkState = BridgeChannelTx.LINK_UNINIT
        self.gfxUpdateCount = 0
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '].__init__(), mode=' + MODE_s[self.mode])
        #self.onEnableClick(self.mode)
        
    def gfxUpdate(self):
        #print('BridgeChannelTx.gfxUpdate attempt')
        #if (self.gfxUpdateRequest == 1):
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            self.gfxUpdateRequest = 0
            #print('BridgeChannelTx.gfxUpdate')
            application.runScript('setDef(Geth.Diagram.update=1)')

    def gfxBrdgChannelEnable(self):
        if (self.gfxChannelEnableState != BridgeChannelTx.CHANNEL_ENABLED):
            self.gfxChannelEnableState = BridgeChannelTx.CHANNEL_ENABLED
            gethBrdgPortTxEn_obj[self.portIdx_i][self.channelIdx_i].text = "visible"
            gethBrdgPortTxDis_obj[self.portIdx_i][self.channelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1
        
    def gfxBrdgChannelDisable(self):
        if (self.gfxChannelEnableState != BridgeChannelTx.CHANNEL_DISABLED):
            self.gfxChannelEnableState = BridgeChannelTx.CHANNEL_DISABLED
            gethBrdgPortTxEn_obj[self.portIdx_i][self.channelIdx_i].text = "hidden"
            gethBrdgPortTxDis_obj[self.portIdx_i][self.channelIdx_i].text = "visible"
            self.gfxUpdateRequest = 1

    def gfxLinkToMacEnable(self):
        if (self.gfxMacLinkState != BridgeChannelTx.LINK_ENABLED):
            self.gfxMacLinkState = BridgeChannelTx.LINK_ENABLED
            gethMacToBrdgTxLink_obj[self.portIdx_i][self.channelIdx_i].text = "visible"
            self.gfxUpdateRequest = 1
        
    def gfxLinkToMacDisable(self):
        if (self.gfxMacLinkState != BridgeChannelTx.LINK_DISABLED):
            self.gfxMacLinkState = BridgeChannelTx.LINK_DISABLED
            gethMacToBrdgTxLink_obj[self.portIdx_i][self.channelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1

    def gfxLinkToDmaEnable(self):
        if (self.gfxDmaLinkState != BridgeChannelTx.LINK_ENABLED):
            self.gfxDmaLinkState = BridgeChannelTx.LINK_ENABLED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaTxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "visible"
            gethBrdgToDmaTxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1

    def gfxLinkToDmaDashed(self):
        if (self.gfxDmaLinkState != BridgeChannelTx.LINK_DASHED):
            self.gfxDmaLinkState = BridgeChannelTx.LINK_DASHED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaTxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            gethBrdgToDmaTxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "visible"
            self.gfxUpdateRequest = 1

    def gfxLinkToDmaDisabled(self):
        if (self.gfxDmaLinkState != BridgeChannelTx.LINK_DISABLED):
            self.gfxDmaLinkState = BridgeChannelTx.LINK_DISABLED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaTxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            gethBrdgToDmaTxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            #application.runScript('setDef(Geth.Diagram.update=1)')
            self.gfxUpdateRequest = 1

    def gfxBrdgPortToPortForwardLinkShow(self, targetChannelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.gfxBrdgPortToPortForwardLinkShow +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '], targetChannelIdx_i = ' + str(targetChannelIdx_i))
        if (self.gfxFwdLinkState != BridgeChannelTx.LINK_ENABLED):
            self.gfxFwdLinkState = BridgeChannelTx.LINK_ENABLED
            gethBrdgPortToPortLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "visible"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1
    
    def gfxBrdgPortToPortForwardLinkDashed(self, targetChannelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.gfxBrdgPortToPortForwardLinkDashed +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '].gfxBrdgPortToPortForwardLinkDashed(' + str(targetChannelIdx_i) + ')')
        if (self.gfxFwdLinkState != BridgeChannelTx.LINK_DASHED):
            self.gfxFwdLinkState = BridgeChannelTx.LINK_DASHED
            #print('self.channelIdx_i = ' + str(self.channelIdx_i))
            gethBrdgPortToPortLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "hidden"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "visible"
            self.gfxUpdateRequest = 1
    
    def gfxBrdgPortToPortForwardLinkHide(self, targetChannelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.gfxBrdgPortToPortForwardLinkHide +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        if (self.gfxFwdLinkState != BridgeChannelTx.LINK_DISABLED):
            self.gfxFwdLinkState = BridgeChannelTx.LINK_DISABLED
            gethBrdgPortToPortLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "hidden"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i^1][targetChannelIdx_i][self.channelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1

    def updateForwarding(self):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.updateForwarding +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '].updateForwarding()')
        #print('forwardState = ' + MODE_s[self.isForwardEnabled()])
        if (self.isForwardEnabled() == BridgeChannelTx.FORWARD_ENABLED):
            self.forwardingSet(BridgeChannelTx.FORWARD_ENABLED)
    
    def forwardingChannelSet(self, fwdMode_i, targetChannelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortTx.BridgeChannel.forwardingChannelSet +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '].forwardingChannelSet(' + MODE_s[fwdMode_i] + ', targetChannel=' + str(targetChannelIdx_i) + ')')
        if (fwdMode_i == BridgeChannelTx.FORWARD_ENABLED):
            #forwarding enabled
            #print('forward enabled, linkeState = ' + LINK_MODE_s[self.linkedState])
            if (self.linkedState == BridgeChannelTx.LINK_DISABLED):
                #link still disabled
                #get the forwarding state of the other port.channel
                if (self.isForwardEnabledInOtherPort(targetChannelIdx_i) == BridgeChannelTx.FORWARD_ENABLED):
                    #print('the other port has forwarding enabled too')
                    #forward enabled in other port.channel
                    #get the forwarding channel from the other port.channel
                    targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
                    #check if the forwarding channel from the othr port.channel is equal to this channel
                    if (self.channelIdx_i == targetTargetChannelIdx_i):
                        #both forwarding channels match
                        self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                        self.linkedState = BridgeChannelTx.LINK_ENABLED
                        self.linkedChannel = targetChannelIdx_i
                        bridge.port[self.portIdx_i ^ 1].channelTx[targetChannelIdx_i].updateForwarding()
                    else:
                        #forwarding channel of the other port does not match to this channel
                        self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                        self.linkedState = BridgeChannelTx.LINK_DASHED
                        self.linkedChannel = targetChannelIdx_i
                else:
                    #forward disabled in other port.channel
                    #print('the other port has forwarding disabled')
                    self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                    self.linkedState = BridgeChannelTx.LINK_DASHED
                    self.linkedChannel = targetChannelIdx_i
            elif (self.linkedState == BridgeChannelTx.LINK_DASHED):
                #link enabled, but dashed (incomplete)
                self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                self.linkedState = BridgeChannelTx.LINK_ENABLED
                self.linkedChannel = targetChannelIdx_i
            else:
                #link fully enabled, check the other port
                #print('forward link enabled, but let us check the other port')
                if (self.isForwardEnabledInOtherPort(targetChannelIdx_i) == BridgeChannelTx.FORWARD_ENABLED) and (self.isOtherPortEnabled(targetChannelIdx_i) == BridgeChannelTx.CHANNEL_ENABLED):
                    #print('the other port has forwarding enabled too, everything is fine actually')
                    #get the forwarding channel from the other port.channel
                    targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
                    #print('the other port tries to link to channel ' + str(targetTargetChannelIdx_i))
                    #check if the forwarding channel from the othr port.channel is equal to this channel
                    if (self.channelIdx_i == targetTargetChannelIdx_i):
                        #both forwarding channels match
                        #print('we have a channel match')
                        self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                        self.linkedState = BridgeChannelTx.LINK_ENABLED
                        self.linkedChannel = targetChannelIdx_i
                    else:
                        #forwarding channel of the other port does not match to this channel
                        #print('channels do not match')
                        self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                        self.linkedState = BridgeChannelTx.LINK_DASHED
                        self.linkedChannel = targetChannelIdx_i
                else:
                    #print('forwarding disabled on the other port')
                    self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                    self.linkedState = BridgeChannelTx.LINK_DASHED
                    self.linkedChannel = targetChannelIdx_i
        else:
            #forwarding disabled
            #print('forward disabled')
            self.linkedState = BridgeChannelTx.LINK_DISABLED
            self.gfxBrdgPortToPortForwardLinkHide(targetChannelIdx_i)
            self.linkedChannel = -1
            #get the forwarding channel from the other port.channel
            targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
            if (self.channelIdx_i == targetTargetChannelIdx_i):
                bridge.port[self.portIdx_i ^ 1].channelTx[targetChannelIdx_i].updateForwarding()
        self.gfxUpdate()
            
    
    def forwardingSet(self, fwdMode_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.forwardingSet +')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].forwardingSet(' + MODE_s[fwdMode_i] + ')')
        targetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i][self.channelIdx_i].currentIndex
        #print("targetChannelIdx_i = " + str(targetChannelIdx_i) + " linkedChannel = " + str(self.linkedChannel))
        if (self.linkedChannel > -1) and (self.linkedChannel != targetChannelIdx_i):
            #linked channel selection has changed
            self.forwardingChannelSet(BridgeChannelTx.CHANNEL_DISABLED, self.linkedChannel)
        self.forwardingChannelSet(fwdMode_i, targetChannelIdx_i)
        self.gfxUpdate()


    def isOtherPortEnabled(self, targetChannelIdx_i):
        state_i = gethBrdgPortChannelTxEn_obj[self.portIdx_i ^ 1][targetChannelIdx_i].checked
        if (state_i == 1):
            state_i = 2;
        return state_i
    
    def isForwardEnabledInOtherPort(self, targetChannelIdx_i):
        state_i = GethBrdgPortForwardEnableGet(self.portIdx_i ^ 1, targetChannelIdx_i)
        return state_i
    
    def isForwardEnabled(self):
        state_i = GethBrdgPortForwardEnableGet(self.portIdx_i, self.channelIdx_i)
        return state_i
        
    def enableGet(self):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.enableGet +++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        self.mode = gethBrdgPortChannelTxEn_obj[self.portIdx_i][self.channelIdx_i].checked
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].enableGet(' + str(self.mode) + ')')        
        if self.mode == BridgeChannelTx.CHANNEL_UNDEF:
            self.mode = BridgeChannelTx.CHANNEL_ENABLED
        return (self.mode)

    def onForwardChannelSelectChange(self, channelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.onForwardChannelSelectChange +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].onForwardChannelSelectChange(' + str(channelIdx_i) + ')')
        #breakpoint()
        self.gfxBrdgPortToPortForwardLinkHide(self.linkedChannel)
        self.forwardingSet(BridgeChannelTx.FORWARD_ENABLED)
        self.gfxUpdate()

    def onFwdEnable(self, fwdState_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.onFwdEnable +++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelTx[' + str(self.channelIdx_i) + '].onFwdEnable(' + MODE_s[fwdState_i] + ')')
        #breakpoint()
        if (self.enableGet() == BridgeChannelTx.CHANNEL_ENABLED):
            #print("channel enabled")
            if (fwdState_i == BridgeChannelTx.FORWARD_ENABLED):
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
                self.forwardingSet(BridgeChannelTx.FORWARD_ENABLED)
            else:
                self.forwardingSet(BridgeChannelTx.FORWARD_DISABLED)
                if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_ENABLED) == STATE_SUCCESS):
                    self.gfxLinkToDmaEnable()
                    self.dmaLinkEn_b = 1
                else:
                    self.gfxLinkToDmaDashed()
                    self.dmaLinkEn_b = 1
            self.gfxUpdate()
    
    def onDmaSelectChange(self, dmaChIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.onDmaSelectChange +')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].onDmaSelectChange(' + str(dmaChIdx_i) + ')')
        #breakpoint()
        if (self.dmaLinkEn_b == 1):
            self.dmaLinkEn_b = 0
            self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelTx.CHANNEL_DISABLED)
            self.gfxLinkToDmaDisabled()
            
            self.dmaChannel = dma.channelTx[dmaChIdx_i]
            if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelTx.CHANNEL_ENABLED) == STATE_SUCCESS):
                self.gfxLinkToDmaEnable()
                self.dmaLinkEn_b = 1
            else:
                self.gfxLinkToDmaDashed()
                self.dmaLinkEn_b = 1
        self.gfxUpdate()
    
    def onEnableClick(self, mode):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.onEnableClick +')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].onEnableClick(' +  MODE_s[mode] + ')')
        self.mode = mode
        if (mode == BridgeChannelTx.CHANNEL_ENABLED):
            self.gfxBrdgChannelEnable()
            self.gfxLinkToMacEnable()
            if (self.isForwardEnabled() == BridgeChannelTx.FORWARD_ENABLED):
                #forwarding enabled
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelTx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
                self.forwardingSet(BridgeChannelTx.FORWARD_ENABLED)
            else:
                #forwarding disabled
                #print("dmaChannel = " + str(self.dmaChannel.dmaChIdx_i))
                if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelTx.CHANNEL_ENABLED) == STATE_SUCCESS):
                    self.gfxLinkToDmaEnable()
                    self.dmaLinkEn_b = 1
                else:
                    self.gfxLinkToDmaDashed()
                    self.dmaLinkEn_b = 1
        else:
            self.gfxBrdgChannelDisable()
            self.gfxLinkToMacDisable()
            if (self.isForwardEnabled() == BridgeChannelTx.FORWARD_ENABLED):
                #forwarding enabled
                #breakpoint()
                self.forwardingSet(BridgeChannelTx.FORWARD_DISABLED)
            else:
                #forwarding disabled
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelTx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
        self.gfxUpdate()

    def enableSet(self, mode):
        #check_state_i = 0
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.enableSet +++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].enableSet(' +  MODE_s[mode] + ')')
        if (self.mode != mode):
            #check_state_i = gethBrdgPortChannelTxEn_obj[self.portIdx_i][self.channelIdx_i].checked
            tempMode = mode
            if tempMode == 2:
                tempMode = 1
            setCwObj(gethBrdgPortChannelTxEn_obj[self.portIdx_i][self.channelIdx_i], tempMode)
        else:
            self.onEnableClick(mode)

    def reconnectDma(self, dmaChIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.reconnectDma ++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].reconnectDma()')
        if (self.dmaChannel.dmaChIdx_i == dmaChIdx_i):
            #print('Bridge[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].dmaChannelTx[' + str(dmaChIdx_i) + '] reconnect')
            self.enableSet(self.mode)
    
    def manualInit(self):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelTx.manualInit ++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++')
        self.onEnableClick(self.mode)
        self.init = 0

class BridgeChannelRx:
    CHANNEL_ENABLED = 2
    CHANNEL_UNDEF = 1
    CHANNEL_DISABLED = 0
    CHANNEL_UNINIT = -1
    FORWARD_ENABLED = 2
    FORWARD_DISABLED = 0
    LINK_DISABLED = 0
    LINK_ENABLED = 1
    LINK_DASHED = 2
    LINK_UNINIT = -1
    
    def __init__(self, portIdx_i, channelIdx_i, dmaChannel):
        self.init = 1
        self.channelIdx_i = channelIdx_i
        self.portIdx_i = portIdx_i
        self.dmaLinkEn_b = 0
        dmaChIdx_i = GethRxBrdgToDmaMapGet(portIdx_i, channelIdx_i)
        if (dmaChannel.dmaChIdx_i == dmaChIdx_i):
            self.dmaChannel = dmaChannel
        else:
            self.dmaChannel = dma.channelRx[dmaChIdx_i]
        self.mode = self.enableGet()
        self.linkedState = BridgeChannelRx.LINK_UNINIT
        self.linkedChannel = -1
        self.gfxUpdateRequest = 0
        self.gfxChannelEnableState = BridgeChannelRx.CHANNEL_UNINIT
        self.gfxMacLinkState = BridgeChannelRx.LINK_UNINIT
        self.gfxDmaLinkState = BridgeChannelRx.LINK_UNINIT
        self.gfxFwdLinkState = BridgeChannelRx.LINK_UNINIT
        self.gfxUpdateCount = 0
        #self.onEnableClick(self.mode)
        
    def gfxUpdate(self):
        #print('BridgeChannelRx.gfxUpdate attempt')
        #if (self.gfxUpdateRequest == 1):
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            self.gfxUpdateRequest = 0
            #print('BridgeChannelRx.gfxUpdate')
            application.runScript('setDef(Geth.Diagram.update=1)')

    def gfxBrdgChannelEnable(self):
        if (self.gfxChannelEnableState != BridgeChannelRx.CHANNEL_ENABLED):
            self.gfxChannelEnableState = BridgeChannelRx.CHANNEL_ENABLED
            gethBrdgPortRxEn_obj[self.portIdx_i][self.channelIdx_i].text = "visible"
            gethBrdgPortRxDis_obj[self.portIdx_i][self.channelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1
        
    def gfxBrdgChannelDisable(self):
        if (self.gfxChannelEnableState != BridgeChannelRx.CHANNEL_DISABLED):
            self.gfxChannelEnableState = BridgeChannelRx.CHANNEL_DISABLED
            gethBrdgPortRxEn_obj[self.portIdx_i][self.channelIdx_i].text = "hidden"
            gethBrdgPortRxDis_obj[self.portIdx_i][self.channelIdx_i].text = "visible"
            self.gfxUpdateRequest = 1

    def gfxLinkToDmaEnable(self):
        if (self.gfxDmaLinkState != BridgeChannelRx.LINK_ENABLED):
            self.gfxDmaLinkState = BridgeChannelRx.LINK_ENABLED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaRxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "visible"
            gethBrdgToDmaRxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1

    def gfxLinkToDmaDashed(self):
        if (self.gfxDmaLinkState != BridgeChannelRx.LINK_DASHED):
            self.gfxDmaLinkState = BridgeChannelRx.LINK_DASHED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaRxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            gethBrdgToDmaRxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "visible"
            self.gfxUpdateRequest = 1
        
    def gfxLinkToDmaDisabled(self):
        if (self.gfxDmaLinkState != BridgeChannelRx.LINK_DISABLED):
            self.gfxDmaLinkState = BridgeChannelRx.LINK_DISABLED
            dmaChIdx_i = self.dmaChannel.dmaChIdx_i
            gethBrdgToDmaRxLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            gethBrdgToDmaRxDashedLink_obj[self.portIdx_i][self.channelIdx_i][dmaChIdx_i].text = "hidden"
            #application.runScript('setDef(Geth.Diagram.update=1)')
            self.gfxUpdateRequest = 1

    def gfxBrdgPortToPortForwardLinkShow(self, targetChannelIdx_i):
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel.gfxBrdgPortToPortForwardLinkShow +')
        #print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '], targetChannelIdx_i = ' + str(targetChannelIdx_i))
        if (self.gfxFwdLinkState != BridgeChannelRx.LINK_ENABLED):
            self.gfxFwdLinkState = BridgeChannelRx.LINK_ENABLED
            gethBrdgPortToPortLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "visible"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1
    
    def gfxBrdgPortToPortForwardLinkDashed(self, targetChannelIdx_i):
        if (self.gfxFwdLinkState != BridgeChannelRx.LINK_DASHED):
            self.gfxFwdLinkState = BridgeChannelRx.LINK_DASHED
            gethBrdgPortToPortLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "hidden"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "visible"
            self.gfxUpdateRequest = 1
    
    def gfxBrdgPortToPortForwardLinkHide(self, targetChannelIdx_i):
        if (self.gfxFwdLinkState != BridgeChannelRx.LINK_DISABLED):
            self.gfxFwdLinkState = BridgeChannelRx.LINK_DISABLED
            gethBrdgPortToPortLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "hidden"
            gethBrdgPortToPortDashedLink_obj[self.portIdx_i][self.channelIdx_i][targetChannelIdx_i].text = "hidden"
            self.gfxUpdateRequest = 1
    
    def updateForwarding(self):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].updateRxForwarding()')
        #print('forwardState = ' + MODE_s[self.isForwardEnabled()])
        if (self.isForwardEnabled() == BridgeChannelRx.FORWARD_ENABLED):
            self.forwardingSet(BridgeChannelRx.FORWARD_ENABLED)
    
    def forwardingChannelSet(self, fwdMode_i, targetChannelIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].forwardingChannelSet(' + MODE_s[fwdMode_i] + ', targetChannel=' + str(targetChannelIdx_i) + ')')
        if (fwdMode_i == BridgeChannelRx.FORWARD_ENABLED):
            #forwarding enabled
            #print('forward enabled, linkeState = ' + LINK_MODE_s[self.linkedState])
            if (self.linkedState == BridgeChannelRx.LINK_DISABLED):
                #link still disabled
                #get the forwarding state of the other port.channel
                if (self.isForwardEnabledInOtherPort(targetChannelIdx_i) == BridgeChannelRx.FORWARD_ENABLED):
                    #print('the other port has forwarding enabled too')
                    #forward enabled in other port.channel
                    #get the forwarding channel from the other port.channel
                    targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
                    #check if the forwarding channel from the othr port.channel is equal to this channel
                    if (self.channelIdx_i == targetTargetChannelIdx_i):
                        #both forwarding channels match
                        self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                        self.linkedState = BridgeChannelRx.LINK_ENABLED
                        self.linkedChannel = targetChannelIdx_i
                        bridge.port[self.portIdx_i ^ 1].channelRx[targetChannelIdx_i].updateForwarding()
                    else:
                        #forwarding channel of the other port does not match to this channel
                        self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                        self.linkedState = BridgeChannelRx.LINK_DASHED
                        self.linkedChannel = targetChannelIdx_i
                else:
                    #forward disabled in other port.channel
                    #print('the other port has forwarding disabled')
                    self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                    self.linkedState = BridgeChannelRx.LINK_DASHED
                    self.linkedChannel = targetChannelIdx_i
            elif (self.linkedState == BridgeChannelRx.LINK_DASHED):
                #link enabled, but dashed (incomplete)
                self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                self.linkedState = BridgeChannelRx.LINK_ENABLED
                self.linkedChannel = targetChannelIdx_i
            else:
                #link fully enabled, check the other port
                #print('forward link enabled, but let us check the other port')
                if (self.isForwardEnabledInOtherPort(targetChannelIdx_i) == BridgeChannelRx.FORWARD_ENABLED) and (self.isOtherPortEnabled(targetChannelIdx_i) == BridgeChannelRx.CHANNEL_ENABLED):
                    #print('the other port has forwarding enabled too, everything is fine actually')
                    #get the forwarding channel from the other port.channel
                    targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
                    #print('the other port tries to link to channel ' + str(targetTargetChannelIdx_i))
                    #check if the forwarding channel from the othr port.channel is equal to this channel
                    if (self.channelIdx_i == targetTargetChannelIdx_i):
                        #both forwarding channels match
                        #print('we have a channel match')
                        self.gfxBrdgPortToPortForwardLinkShow(targetChannelIdx_i)
                        self.linkedState = BridgeChannelRx.LINK_ENABLED
                        self.linkedChannel = targetChannelIdx_i
                    else:
                        #forwarding channel of the other port does not match to this channel
                        #print('channels do not match')
                        self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                        self.linkedState = BridgeChannelRx.LINK_DASHED
                        self.linkedChannel = targetChannelIdx_i
                else:
                    #print('forwarding disabled on the other port')
                    self.gfxBrdgPortToPortForwardLinkDashed(targetChannelIdx_i)
                    self.linkedState = BridgeChannelRx.LINK_DASHED
                    self.linkedChannel = targetChannelIdx_i
        else:
            #forwarding disabled
            #print('forward disabled')
            self.linkedState = BridgeChannelRx.LINK_DISABLED
            self.gfxBrdgPortToPortForwardLinkHide(targetChannelIdx_i)
            self.linkedChannel = -1
            #get the forwarding channel from the other port.channel
            targetTargetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i ^ 1][targetChannelIdx_i].currentIndex
            if (self.channelIdx_i == targetTargetChannelIdx_i):
                bridge.port[self.portIdx_i ^ 1].channelRx[targetChannelIdx_i].updateForwarding()
        self.gfxUpdate()
    
    def forwardingSet(self, fwdMode_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort.BridgeChannelRx.forwardingSet +')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].Channel[' + str(self.channelIdx_i) + '].forwardingSet(' + MODE_s[fwdMode_i] + ')')
        targetChannelIdx_i = gethBrdgPortForwardRxMap_obj[self.portIdx_i][self.channelIdx_i].currentIndex
        #print("targetChannelIdx_i = " + str(targetChannelIdx_i) + " linkedChannel = " + str(self.linkedChannel))
        if (self.linkedChannel > -1) and (self.linkedChannel != targetChannelIdx_i):
            #linked channel selection has changed
            self.forwardingChannelSet(BridgeChannelRx.CHANNEL_DISABLED, self.linkedChannel)
        self.forwardingChannelSet(fwdMode_i, targetChannelIdx_i)
        self.gfxUpdate()

    def isOtherPortEnabled(self, targetChannelIdx_i):
        state_i = gethBrdgPortChannelTxEn_obj[self.portIdx_i ^ 1][targetChannelIdx_i].checked
        if (state_i == 1):
            state_i = 2;
        return state_i
    
    def isForwardEnabledInOtherPort(self, targetChannelIdx_i):
        state_i = GethBrdgPortForwardEnableGet(self.portIdx_i ^ 1, targetChannelIdx_i)
        return state_i
    
    def isForwardEnabled(self):
        state_i = GethBrdgPortForwardEnableGet(self.portIdx_i, self.channelIdx_i)
        return state_i
        
    def enableGet(self):
        self.mode = gethBrdgPortChannelRxEn_obj[self.portIdx_i][self.channelIdx_i].checked
        if self.mode == BridgeChannelRx.CHANNEL_UNDEF:
            self.mode = BridgeChannelRx.CHANNEL_ENABLED
        return (self.mode)

    def onForwardChannelSelectChange(self, channelIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].onForwardChannelSelectChange(' + str(channelIdx_i) + ')')
        #breakpoint()
        #if (self.linkedState == BridgeChannelRx.LINK_ENABLED):
        #    #print('#print dashed line')
        self.gfxBrdgPortToPortForwardLinkHide(self.linkedChannel)
        #self.gfxBrdgPortToPortForwardLinkDashed(self.linkedChannel)
        self.forwardingSet(BridgeChannelRx.FORWARD_ENABLED)
        self.gfxUpdate()
    
    def onFwdEnable(self, fwdState_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].onFwdEnable(' + MODE_s[fwdState_i] + ')')
        #breakpoint()
        if (self.enableGet() == BridgeChannelRx.CHANNEL_ENABLED):
            if (fwdState_i == BridgeChannelRx.FORWARD_ENABLED):
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
                self.forwardingSet(BridgeChannelRx.FORWARD_ENABLED)
            else:
                self.forwardingSet(BridgeChannelRx.FORWARD_DISABLED)
                if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_ENABLED) == STATE_SUCCESS):
                    self.gfxLinkToDmaEnable()
                    self.dmaLinkEn_b = 1
                else:
                    self.gfxLinkToDmaDashed()
                    self.dmaLinkEn_b = 1
            self.gfxUpdate()
    
    def onDmaSelectChange(self, dmaChIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].onDmaSelectChange(' + str(dmaChIdx_i) + ')')
        #breakpoint()
        if (self.dmaLinkEn_b == 1):
            self.dmaLinkEn_b = 0
            self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_DISABLED)
            self.gfxLinkToDmaDisabled()
            
            self.dmaChannel = dma.channelRx[dmaChIdx_i]
            if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_ENABLED) == STATE_SUCCESS):
                self.gfxLinkToDmaEnable()
                self.dmaLinkEn_b = 1
            else:
                self.gfxLinkToDmaDashed()
                self.dmaLinkEn_b = 1
        self.gfxUpdate()
    
    def onEnableClick(self, mode):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].onEnableClick(' +  MODE_s[mode] + ')')
        self.mode = mode
        if (mode == BridgeChannelRx.CHANNEL_ENABLED):
            self.gfxBrdgChannelEnable()
            if (self.isForwardEnabled() == BridgeChannelRx.FORWARD_ENABLED):
                #forwarding enabled
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
                self.forwardingSet(BridgeChannelRx.FORWARD_ENABLED)
            else:
                #forwarding disabled
                if (self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_ENABLED) == STATE_SUCCESS):
                    self.gfxLinkToDmaEnable()
                    self.dmaLinkEn_b = 1
                else:
                    self.gfxLinkToDmaDashed()
                    self.dmaLinkEn_b = 1
        else:
            self.gfxBrdgChannelDisable()
            if (self.isForwardEnabled() == BridgeChannelRx.FORWARD_ENABLED):
                #forwarding enabled
                #breakpoint()
                self.forwardingSet(BridgeChannelRx.FORWARD_DISABLED)
            else:
                #forwarding disabled
                if (self.dmaLinkEn_b == 1):
                    self.dmaLinkEn_b = 0
                    self.dmaChannel.enableSet(self.portIdx_i, self.channelIdx_i, DmaChannelRx.CHANNEL_DISABLED)
                    self.gfxLinkToDmaDisabled()
        self.gfxUpdate()

    def enableSet(self, mode):
        #check_state_i = 0
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.Port[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].enableRxSet(' +  MODE_s[mode] + ') (' + str(mode) + ')')
        if (self.mode != mode):
            #check_state_i = gethBrdgPortChannelEn_obj[self.portIdx_i][self.channelIdx_i].checked
            tempMode = mode
            if tempMode == 2:
                tempMode = 1
            #print("set BridgePort.ChannelRx[" + str(self.channelIdx_i) + "] = " + str(tempMode))
            setCwObj(gethBrdgPortChannelRxEn_obj[self.portIdx_i][self.channelIdx_i], tempMode)
        else:
            #print("call onEnableRxClick(mode)")
            self.onEnableClick(mode)

    def reconnectDma(self, dmaChIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePortRx.BridgeChannel +++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].reconnectDmaRx()')
        if (self.dmaChannel.dmaChIdx_i == dmaChIdx_i):
            #print('Bridge[' + str(self.portIdx_i) + '].ChannelRx[' + str(self.channelIdx_i) + '].dmaChannelRx[' + str(dmaChIdx_i) + '] reconnect')
            self.enableSet(self.mode)
    
    def manualInit(self):
        self.onEnableClick(self.mode)
        self.init = 0
   
class BridgePort:
    def __init__(self, portIdx_i, dma):
        #read bridge mode, single port, or dual port
        self.portIdx_i = portIdx_i
        self.dma = dma
        
        for i in range(0, 8):
            dma.channelTx[i].bind_to(self.TriggeredByDmaTx)
            dma.channelRx[i].bind_to(self.TriggeredByDmaRx)
            #GethTxBrdgToDmaMapGet(self.portIdx_i, 0)
        self.channelTx = [BridgeChannelTx(portIdx_i, 0, dma.channelTx[0]), BridgeChannelTx(portIdx_i, 1, dma.channelTx[1]), BridgeChannelTx(portIdx_i, 2, dma.channelTx[2]), BridgeChannelTx(portIdx_i, 3, dma.channelTx[3]), BridgeChannelTx(portIdx_i, 4, dma.channelTx[4]), BridgeChannelTx(portIdx_i, 5, dma.channelTx[5]), BridgeChannelTx(portIdx_i, 6, dma.channelTx[6]), BridgeChannelTx(portIdx_i, 7, dma.channelTx[7])]
        self.channelRx = [BridgeChannelRx(portIdx_i, 0, dma.channelRx[0]), BridgeChannelRx(portIdx_i, 1, dma.channelRx[1]), BridgeChannelRx(portIdx_i, 2, dma.channelRx[2]), BridgeChannelRx(portIdx_i, 3, dma.channelRx[3]), BridgeChannelRx(portIdx_i, 4, dma.channelRx[4]), BridgeChannelRx(portIdx_i, 5, dma.channelRx[5]), BridgeChannelRx(portIdx_i, 6, dma.channelRx[6]), BridgeChannelRx(portIdx_i, 7, dma.channelRx[7])]
        #self.channelTx = [BridgeChannelTx(portIdx_i, 0, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 0)]), BridgeChannelTx(portIdx_i, 1, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 1)]), BridgeChannelTx(portIdx_i, 2, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 2)]), BridgeChannelTx(portIdx_i, 3, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 3)]), BridgeChannelTx(portIdx_i, 4, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 4)]), BridgeChannelTx(portIdx_i, 5, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 5)]), BridgeChannelTx(portIdx_i, 6, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 6)]), BridgeChannelTx(portIdx_i, 7, dma.channelTx[GethTxBrdgToDmaMapGet(self.portIdx_i, 7)])]
        #self.channelRx = [BridgeChannelRx(portIdx_i, 0, dma.channelRx[0]), BridgeChannelRx(portIdx_i, 1, dma.channelRx[1]), BridgeChannelRx(portIdx_i, 2, dma.channelRx[2]), BridgeChannelRx(portIdx_i, 3, dma.channelRx[3]), BridgeChannelRx(portIdx_i, 4, dma.channelRx[4]), BridgeChannelRx(portIdx_i, 5, dma.channelRx[5]), BridgeChannelRx(portIdx_i, 6, dma.channelRx[6]), BridgeChannelRx(portIdx_i, 7, dma.channelRx[7])]

#    def ChannelEnableGet(self, channelIdx_i):
#        state_i = self.channel[channelIdx_i].enableGet()
#        return state_i

#    def ChannelEnableSet(self, channelIdx_i, mode):
#        self.channel[channelIdx_i].enableSet(mode)

    def TriggeredByDmaTx(self, dmaChIdx_i, portIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort +++++++++++++++++++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.BridgePort[' + str(self.portIdx_i) + '].TriggeredByDmaTx(' + str(dmaChIdx_i) + ') for port ' + str(portIdx_i))
        if (self.portIdx_i == portIdx_i):
            for i in range(0, 8):
                self.channelTx[i].reconnectDma(dmaChIdx_i)

    def TriggeredByDmaRx(self, dmaChIdx_i, portIdx_i):
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('+ Bridge.BridgePort +++++++++++++++++++++++++++++++')
        #print('+++++++++++++++++++++++++++++++++++++++++++++++++++')
        #print('Bridge.BridgePort[' + str(self.portIdx_i) + '].TriggeredByDmaRx(' + str(dmaChIdx_i) + ') for port ' + str(portIdx_i))
        if (self.portIdx_i == portIdx_i):
            for i in range(0, 8):
                self.channelRx[i].reconnectDma(dmaChIdx_i)

class Bridge:
    def __init__(self, dma):
        #read bridge mode, single port, or dual port
        self.brdgMode = int(GETH_FORWARD_CONTROL_Q_CH_MAPPING_EN.getValue())
        self.portSel = GETH_FORWARD_CONTROL_PORT_SEL.currentIndex
        self.port = [BridgePort(0, dma), BridgePort(1, dma)]
        self.dma = dma
        
#    def ChannelEnableGet(self, portIdx_i, channelIdx_i):
#        state_i = self.port[portIdx_i].ChannelEnableGet(channelIdx_i)
#        return state_i

#    def ChannelEnableSet(self, portIdx_i, channelIdx_i, mode):
#        self.port[portIdx_i].ChannelEnableSet(channelIdx_i, mode)        

class DmaChannelTx:
    CHANNEL_ENABLED = 1
    CHANNEL_DISABLED = 0
    CHANNEL_UNINIT = -1
    def __init__(self, dmaChIdx_i):
        #print('DmaChannelTx[' + str(dmaChIdx_i) + '].init')
        self.portSelect_i = -1
        self.portIdx_i = -1
        self.useCount = 0
        self.init = 1
        self.connectRequestPort = -1
        self.dmaChIdx_i = dmaChIdx_i
        self.mode = self.enableGet()
        self._observers = []
        self.gfxUpdateRequest = 0
        self.gfxDmaEnableState = DmaChannelTx.CHANNEL_UNINIT
        self.brdgChanUseMap = [0, 0, 0, 0, 0, 0, 0, 0]
        #self.onClickEvent(self.mode)
        
    def gfxUpdate(self):
        #print('DmaChannelTx.gfxUpdate attempt')
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            #print('DmaChannelTx.gfxUpdate')
            self.gfxUpdateRequest = 0
            application.runScript('setDef(Geth.Diagram.update=1)')
            
    def gfxDmaEnable(self):
        if (self.gfxDmaEnableState != DmaChannelTx.CHANNEL_ENABLED):
            self.gfxDmaEnableState = DmaChannelTx.CHANNEL_ENABLED
            gethDmaTxEn_obj[self.dmaChIdx_i].text = "visible"
            gethDmaTxDis_obj[self.dmaChIdx_i].text = "hidden"
            GETH_DMA_CHANNEL_SELECT.setTabTextColor(self.dmaChIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1

    def gfxDmaDisable(self):
        if (self.gfxDmaEnableState != DmaChannelTx.CHANNEL_DISABLED):
            self.gfxDmaEnableState = DmaChannelTx.CHANNEL_DISABLED
            gethDmaTxEn_obj[self.dmaChIdx_i].text = "hidden"
            gethDmaTxDis_obj[self.dmaChIdx_i].text = "visible"
            GETH_DMA_CHANNEL_SELECT.setTabTextColor(self.dmaChIdx_i, COLOR_BLACK) 
            self.gfxUpdateRequest = 1

    def GethDmaChannelStateGet(dmaChIdx_i):
        state_i = 0
        if (dmaChIdx_i < 8):
            state_i = gethDmaEnable_obj[dmaChIdx_i].checked
        return state_i
        
    def enableGet(self):
        self.mode = int(gethDmaTxEnable_obj[self.dmaChIdx_i].getValue())
        return (self.mode)

    def onEnableClick(self, mode):
        #print('---------------------------------------------------')
        #print('- Dma.ChannelTx -----------------------------------')
        #print('---------------------------------------------------')
        #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].onEnableTxClick(' + MODE_s[mode] + ')')
        #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].onEnableTxClick(' + str(mode) + ')')
        self.mode = mode
        if (mode == DmaChannelTx.CHANNEL_ENABLED):
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].mode = ENABLED')
            self.gfxDmaEnable()
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].useCount++')
            self.useCount += 1
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].useCount = ' + str(self.useCount))
        else:
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].mode = DISABLED')
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].useCount--')
            self.useCount -= 1
            if (self.useCount < 0):
                #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].useCount reset')
                self.useCount = 0
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].useCount = ' + str(self.useCount))
            if (self.useCount <= 0):
                #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '] disable channel')
                self.useCount = 0
                self.gfxDmaDisable()
                self.portSelect_i = -1
                for i in range(0, 8):
                    self.brdgChanUseMap[i] = 0
                if (self.connectRequestPort > -1):
                    #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '] handle portRequest by for Port ' + str(self.connectRequestPort))
                    for callback in self._observers:
                        ###print('DmaChannelTx[' + str(self.dmaChIdx_i) + '] send trigger to bridge')
                        callback(self.dmaChIdx_i, self.connectRequestPort)
        self.gfxUpdate()

    def enableSet(self, portIdx_i, brdgChanIdx_i, mode):
        state_i = STATE_SUCCESS
        #print('---------------------------------------------------')
        #print('- Dma.ChannelTx -----------------------------------')
        #print('---------------------------------------------------')
        #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].enableTxSet(BrdgPort' + str(portIdx_i) + ', ' +str(brdgChanIdx_i) + ', ' + MODE_s[mode] + ')')
        #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].portSelect = ' + str(self.portSelect_i))
        if (self.portSelect_i == portIdx_i) or (self.portSelect_i == -1):
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].portSelect = match or unselected')
            if (mode == DmaChannelTx.CHANNEL_ENABLED):
                self.portSelect_i = portIdx_i
                GethDmaBridgePortSet(self.dmaChIdx_i, portIdx_i)
                if (self.connectRequestPort == portIdx_i):
                    self.connectRequestPort = -1
            else:
                self.portSelect_i = -1

            if (self.mode != mode):
                #print('DmaChannelTx.enableTxSet: mode does not match')
                self.brdgChanUseMap[brdgChanIdx_i] = 1
                tempMode = mode
                if tempMode == 2:
                    tempMode = 1
                #setCwObj(gethDmaTxEnable_obj[self.dmaChIdx_i], tempMode)
                gethDmaTxEnable_obj[self.dmaChIdx_i].setToValue(tempMode)
                self.onEnableClick(mode)
            else:
                #print('DmaChannelTx.enableTxSet: mode match')
                if (mode == DmaChannelTx.CHANNEL_ENABLED):
                    #print('DmaChannelTx.enableTxSet: enable')
                    if (self.brdgChanUseMap[brdgChanIdx_i] == 0):
                        #print('DmaChannelTx.brdgChanUseMap[' + str(brdgChanIdx_i) + '] = 0')
                        self.brdgChanUseMap[brdgChanIdx_i] = 1
                        self.onEnableClick(mode)
                else:
                    #print('DmaChannelTx.enableTxSet: disable')
                    self.onEnableClick(mode)
        else:
            #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].portSelect = mismatch')
            if (mode == DmaChannelTx.CHANNEL_ENABLED):
                #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].mode = ENABLED')
                #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].connectRequestPort = ' + str(portIdx_i))
                self.connectRequestPort = portIdx_i
                state_i = STATE_FAIL
            else:
                #print('DmaChannelTx[' + str(self.dmaChIdx_i) + '].mode = DISABLED')
                self.connectRequestPort = -1
        return state_i
        
    def PortSelectGet(self):
        return self.portSelect_i
        
    def PortSelectSet(self, portIdx_i):
        self.portSelect_i = portIdx_i

    def bind_to(self, callback):
        #print('bound')
        self._observers.append(callback)
        
    def manualInit(self):
        #print('---------------------------------------------------')
        #print('- Dma.DmaChannelTx ----------------------------------')
        #print('---------------------------------------------------')
        #print("DMA.Channel[" + str(self.dmaChIdx_i) + "].manualInit")
        #print("gethDmaTxEnable_obj[" + str(self.dmaChIdx_i) + "].checked = " + str(int(gethDmaTxEnable_obj[self.dmaChIdx_i].getValue())))
        #print("self.useCount = " + str(self.useCount))
        self.mode = self.enableGet()
        self.onEnableClick(self.mode)
        #print("self.useCount = " + str(self.useCount))
        self.init = 0
        
class DmaChannelRx:
    CHANNEL_ENABLED = 1
    CHANNEL_DISABLED = 0
    CHANNEL_UNINIT = -1
    def __init__(self, dmaChIdx_i):
        #print('DmaChannelRx[' + str(dmaChIdx_i) + '].init')
        self.init = 1
        self.portSelect_i = -1
        self.portIdx_i = -1
        self.useCount = 0
        self.connectRequestPort = -1
        self.dmaChIdx_i = dmaChIdx_i
        self.mode = self.enableGet()
        self._observers = []
        self.gfxUpdateRequest = 0
        self.gfxDmaEnableState = DmaChannelRx.CHANNEL_UNINIT
        self.brdgChanUseMap = [0, 0, 0, 0, 0, 0, 0, 0]
        self.rxDescTypeLocked = 0
        self.rxDescTypeLockedPort = -1
        #self.onClickEvent(self.mode)
        
    def gfxUpdate(self):
        #print('DmaChannelRx.gfxUpdate attempt')
        if ((self.gfxUpdateRequest == 1) and (self.init == 0)):
            #print('DmaChannelRx.gfxUpdate')
            self.gfxUpdateRequest = 0
            application.runScript('setDef(Geth.Diagram.update=1)')
            
    def gfxDmaEnable(self):
        if (self.gfxDmaEnableState != DmaChannelRx.CHANNEL_ENABLED):
            self.gfxDmaEnableState = DmaChannelRx.CHANNEL_ENABLED
            gethDmaRxEn_obj[self.dmaChIdx_i].text = "visible"
            gethDmaRxDis_obj[self.dmaChIdx_i].text = "hidden"
            GETH_DMA_CHANNEL_SELECT.setTabTextColor(self.dmaChIdx_i, COLOR_GREEN)
            self.gfxUpdateRequest = 1

    def gfxDmaDisable(self):
        if (self.gfxDmaEnableState != DmaChannelRx.CHANNEL_DISABLED):
            self.gfxDmaEnableState = DmaChannelRx.CHANNEL_DISABLED
            gethDmaRxEn_obj[self.dmaChIdx_i].text = "hidden"
            gethDmaRxDis_obj[self.dmaChIdx_i].text = "visible"
            GETH_DMA_CHANNEL_SELECT.setTabTextColor(self.dmaChIdx_i, COLOR_BLACK) 
            self.gfxUpdateRequest = 1

    def GethDmaChannelStateGet(dmaChIdx_i):
        state_i = 0
        if (dmaChIdx_i < 8):
            state_i = gethDmaEnable_obj[dmaChIdx_i].checked
        return state_i
        
    def enableGet(self):
        self.mode = int(gethDmaRxEnable_obj[self.dmaChIdx_i].getValue())
        return (self.mode)

    def onEnableClick(self, mode):
        #print('---------------------------------------------------')
        #print('- Dma.ChannelRx -----------------------------------')
        #print('---------------------------------------------------')
        #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].onEnableClick(' + MODE_s[mode] + ')')
        #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].onEnableClick(' + str(mode) + ')')
        self.mode = mode
        if (mode == DmaChannelRx.CHANNEL_ENABLED):
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].mode = ENABLED')
            self.gfxDmaEnable()
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].useCount++')
            self.useCount += 1
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].useCount = ' + str(self.useCount))
            self.updateTimeStampCfg(self.portSelect_i, gethMacTimeStampEn_obj[self.portSelect_i].checked)
        else:
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].mode = DISABLED')
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].useCount--')
            self.useCount -= 1
            if (self.useCount < 0):
                #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].useCount reset')
                self.useCount = 0
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].useCount = ' + str(self.useCount))
            if (self.useCount <= 0):
                #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '] disable channel')
                self.useCount = 0
                self.gfxDmaDisable()
                self.updateTimeStampCfg(self.portSelect_i, gethMacTimeStampEn_obj[self.portSelect_i].checked)
                self.portSelect_i = -1
                for i in range(0, 8):
                    self.brdgChanUseMap[i] = 0
                if (self.connectRequestPort > -1):
                    #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '] handle portRequest by for Port ' + str(self.connectRequestPort))
                    for callback in self._observers:
                        ###print('DmaChannelRx[' + str(self.dmaChIdx_i) + '] send trigger to bridge')
                        callback(self.dmaChIdx_i, self.connectRequestPort)
        self.gfxUpdate()

    def enableSet(self, portIdx_i, brdgChanIdx_i, mode):
        state_i = STATE_SUCCESS
        #print('---------------------------------------------------')
        #print('- Dma.ChannelRx -----------------------------------')
        #print('---------------------------------------------------')
        #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].enableRxSet(BrdgPort' + str(portIdx_i) + ', ' +str(brdgChanIdx_i) + ', ' + MODE_s[mode] + ')')
        #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].portSelect = ' + str(self.portSelect_i))
        if (self.portSelect_i == portIdx_i) or (self.portSelect_i == -1):
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].portSelect = match or unselected')
            if (mode == DmaChannelRx.CHANNEL_ENABLED):
                self.portSelect_i = portIdx_i
                GethDmaBridgePortSet(self.dmaChIdx_i, portIdx_i)
                if (self.connectRequestPort == portIdx_i):
                    self.connectRequestPort = -1
            else:
                self.portSelect_i = -1

            if (self.mode != mode):
                #print('DmaChannelRx.enableRxSet: mode does not match')
                self.brdgChanUseMap[brdgChanIdx_i] = 1
                tempMode = mode
                if tempMode == 2:
                    tempMode = 1
                #setCwObj(gethDmaRxEnable_obj[self.dmaChIdx_i], tempMode)
                gethDmaRxEnable_obj[self.dmaChIdx_i].setToValue(tempMode)
                self.onEnableClick(mode)
            else:
                #print('DmaChannelRx.enableRxSet: mode match')
                if (mode == DmaChannelRx.CHANNEL_ENABLED):
                    #print('DmaChannelRx.enableRxSet: enable')
                    if (self.brdgChanUseMap[brdgChanIdx_i] == 0):
                        #print('DmaChannelRx.brdgChanUseMap[' + str(brdgChanIdx_i) + '] = 0')
                        self.brdgChanUseMap[brdgChanIdx_i] = 1
                        self.onEnableClick(mode)
                else:
                    #print('DmaChannelRx.enableRxSet: disable')
                    self.onEnableClick(mode)
        else:
            #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].portSelect = mismatch')
            if (mode == DmaChannelRx.CHANNEL_ENABLED):
                #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].mode = ENABLED')
                #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].connectRequestPort = ' + str(portIdx_i))
                self.connectRequestPort = portIdx_i
                state_i = STATE_FAIL
            else:
                #print('DmaChannelRx[' + str(self.dmaChIdx_i) + '].mode = DISABLED')
                self.connectRequestPort = -1
        return state_i

    def PortSelectGet(self):
        return self.portSelect_i
        
    def PortSelectSet(self, portIdx_i):
        self.portSelect_i = portIdx_i

    def bind_to(self, callback):
        #print('bound')
        self._observers.append(callback)
        
    def manualInit(self):
        #print('---------------------------------------------------')
        #print('- Dma.DmaChannelRx --------------------------------')
        #print('---------------------------------------------------')
        #print("DMA.ChannelRx[" + str(self.dmaChIdx_i) + "].manualInit")
        #print("gethDmaRxEnable_obj[" + str(self.dmaChIdx_i) + "].checked = " + str(int(gethDmaRxEnable_obj[self.dmaChIdx_i].getValue())))
        #print("self.useRxCount = " + str(self.useCount))
        self.mode = self.enableGet()
        self.onEnableClick(self.mode)
        #print("self.useRxCount = " + str(self.useCount))
        self.init = 0
        
    def updateTimeStampCfg(self, portIdx_i, timeStampSts_i):
        #print("DmaChannelRx[" + str(self.dmaChIdx_i) + "].updateTimeStampCfg(" + str(portIdx_i) + "," + str(timeStampSts_i) + ")")
        if timeStampSts_i == 0:
            #print("unchecked")
            if self.rxDescTypeLocked == 1:
                if self.rxDescTypeLockedPort == portIdx_i:
                    #print('unlock: ' + gethMacTimeStampEn_s[portIdx_i] + ' ,' + gethDmaRxDescType_s[self.dmaChIdx_i])
                    application.unlock(gethMacTimeStampEn_s[portIdx_i], gethDmaRxDescType_s[self.dmaChIdx_i])
                    self.rxDescTypeLocked = 0
                    self.rxDescTypeLockedPort = -1
        else:
            #print("checked")
            if self.rxDescTypeLocked == 0:
                if self.rxDescTypeLockedPort == -1:
                    if self.enableGet() != 0:
                        #print('lock: ' + gethMacTimeStampEn_s[portIdx_i] + ' ,' + gethDmaRxDescType_s[self.dmaChIdx_i])
                        application.lock(gethMacTimeStampEn_s[portIdx_i], gethDmaRxDescType_s[self.dmaChIdx_i])
                        self.rxDescTypeLocked = 1
                        self.rxDescTypeLockedPort = portIdx_i

class Dma:
    def __init__(self):
        self.channelTx = [DmaChannelTx(0), DmaChannelTx(1), DmaChannelTx(2), DmaChannelTx(3), DmaChannelTx(4), DmaChannelTx(5), DmaChannelTx(6), DmaChannelTx(7)]
        self.channelRx = [DmaChannelRx(0), DmaChannelRx(1), DmaChannelRx(2), DmaChannelRx(3), DmaChannelRx(4), DmaChannelRx(5), DmaChannelRx(6), DmaChannelRx(7)]
        
    def updateTimeStampCfg(self, portIdx_i, timeStampSts_i):
        #print("Dma.updateTimeStampCfg(" + str(portIdx_i) + "," + str(timeStampSts_i) + ")")
        for idx in range(0, 8):
            self.channelRx[idx].updateTimeStampCfg(portIdx_i, timeStampSts_i)
     
def macRxQueuePrioSet(element):
    def callback(checkState):
        #GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_0
        portIdx_i = int(element.objectName[9])
        queueIdx_i = int(element.objectName[28])
        prioIdx_i = int(element.objectName[30])
        
        if checkState == 0:
            #prio unchecked
            for i in range(0, 8):
                if i != queueIdx_i:
                    #print('unlock: ' + gethMacRxQueuePrio_s[portIdx_i][queueIdx_i][prioIdx_i] + ', ' + gethMacRxQueuePrio_s[portIdx_i][i][prioIdx_i] + '=0')
                    application.unlock(gethMacRxQueuePrio_s[portIdx_i][queueIdx_i][prioIdx_i], gethMacRxQueuePrio_s[portIdx_i][i][prioIdx_i] + '=0')
        else:
            #prio checked
            for i in range(0, 8):
                if i != queueIdx_i:
                    #print('lock: ' + gethMacRxQueuePrio_s[portIdx_i][queueIdx_i][prioIdx_i] + ', ' + gethMacRxQueuePrio_s[portIdx_i][i][prioIdx_i] + '=0')
                    application.lock(gethMacRxQueuePrio_s[portIdx_i][queueIdx_i][prioIdx_i], gethMacRxQueuePrio_s[portIdx_i][i][prioIdx_i] + '=0')
    return callback 

def Save_Disclaimer(file, filename):
    file.write("/**\n")
    file.write(" * \\file " + filename + "\n")
    file.write(" * \\brief Functions to interface to the Geth MAC\n")
    file.write(" *\n")
    file.write(" * \\copyright Copyright (c) 2019-2020 Infineon Technologies AG. All rights reserved.\n")
    file.write(" *\n")
    file.write(" *\n")
    file.write(" *                                 IMPORTANT NOTICE\n")
    file.write(" *\n")
    file.write(" *\n")
    file.write(" * Use of this file is subject to the terms of use agreed between (i) you or\n")
    file.write(" * the company in which ordinary course of business you are acting and (ii)\n")
    file.write(" * Infineon Technologies AG or its licensees. If and as long as no such\n")
    file.write(" * terms of use are agreed, use of this file is subject to following:\n")
    file.write("\n")
    file.write("\n")
    file.write(" * Boost Software License - Version 1.0 - August 17th, 2003\n")
    file.write("\n")
    file.write(" * Permission is hereby granted, free of charge, to any person or\n")
    file.write(" * organization obtaining a copy of the software and accompanying\n")
    file.write(" * documentation covered by this license (the \"Software\") to use, reproduce,\n")
    file.write(" * display, distribute, execute, and transmit the Software, and to prepare\n")
    file.write(" * derivative works of the Software, and to permit third-parties to whom the\n")
    file.write(" * Software is furnished to do so, all subject to the following:\n")
    file.write("\n")
    file.write(" * The copyright notices in the Software and this entire statement, including\n")
    file.write(" * the above license grant, this restriction and the following disclaimer, must\n")
    file.write(" * be included in all copies of the Software, in whole or in part, and all\n")
    file.write(" * derivative works of the Software, unless such copies or derivative works are\n")
    file.write(" * solely in the form of machine-executable object code generated by a source\n")
    file.write(" * language processor.\n")
    file.write("\n")
    file.write(" * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n")
    file.write(" * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n")
    file.write(" * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n")
    file.write(" * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n")
    file.write(" * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n")
    file.write(" * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n")
    file.write(" * DEALINGS IN THE SOFTWARE.\n")
    file.write(" */\n")
    file.write("\n")

def Save_IncludeGuardOpen(file, text):
    file.write("#ifndef " + text + "\n")
    file.write("#define " + text + "\n")
    file.write("\n")
    file.write("#include \"types.h\"\n")
    file.write("\n")

def Save_IncludeGuardClose(file, text):
    file.write("#endif /* " + text + " */ \n")
    file.write("\n")

def Save_Prot_C_Objects():
    file = open("geth_prot_a.c", "w")
    
    Save_Disclaimer(file, "geth_prot_a.c")
    file.write("#include \"types.h\"\n")
    file.write("#include \"tc4d_geth_prot_cfg.h\"\n")
    file.write("#include \"geth_prot_a.h\"\n\n")
    
    file.write("/* MAC/DMA Access Protection */\n")
    file.write("const uint32 GETH_ACCENn_WRA[] = {")
    for i in range(0, 8):
        obj_s = "GETH_ACCENCH" + str(i) + "_WRA"
        file.write(obj_s)
        if i < 7:
            file.write(", ")
    file.write("};\n")
    file.write("const uint32 GETH_ACCENn_WRB[] = {")
    for i in range(0, 8):
        obj_s = "GETH_ACCENCH" + str(i) + "_WRB"
        file.write(obj_s)
        if i < 7:
            file.write(", ")
    file.write("};\n")
    file.write("const uint32 GETH_ACCENn_RDA[] = {")
    for i in range(0, 8):
        obj_s = "GETH_ACCENCH" + str(i) + "_RDA"
        file.write(obj_s)
        if i < 7:
            file.write(", ")
    file.write("};\n")
    file.write("const uint32 GETH_ACCENn_RDB[] = {")
    for i in range(0, 8):
        obj_s = "GETH_ACCENCH" + str(i) + "_RDB"
        file.write(obj_s)
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("\n")
    file.close()

def Save_Dma_C_Objects():
    file = open("geth_dma_a.c", "w")
    
    Save_Disclaimer(file, "geth_dma_a.c")
    file.write("#include \"types.h\"\n")
    file.write("#include \"tc4d_geth_dma_cfg.h\"\n")
    file.write("#include \"geth_dma_a.h\"\n\n")
    
    file.write("/* descriptor type per DMA channel, 0 = normal descriptor, 1 = normal + context descriptor*/\n")
    file.write("const uint8 GETH_DMA_TX_DESC_TYPE_LIST[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_TX_DESC_TYPE'
        idx = globals()[objObject].currentIndex
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* descriptor type per DMA channel, 0 = normal descriptor, 1 = normal + context descriptor*/\n")
    file.write("const uint8 GETH_DMA_RX_DESC_TYPE_LIST[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_RX_DESC_TYPE'
        idx = globals()[objObject].currentIndex
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* time stamping enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("const uint8 GETH_DMA_TS_EN[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_TS_EN'
        if (globals()[objObject].checked == True):
            idx = 1
        else:
            idx = 0
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* tx interrupt enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("const uint8 GETH_DMA_INT_TIE[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_INTERRUPT_ENABLE_TIE'
        if (globals()[objObject].checked == True):
            idx = 1
        else:
            idx = 0
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* rx interrupt enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("const uint8 GETH_DMA_INT_RIE[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_INTERRUPT_ENABLE_RIE'
        if (globals()[objObject].checked == True):
            idx = 1
        else:
            idx = 0
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Tx channel enabled, 0 = disabled, 1 = enabled*/\n")
    file.write("const uint8 GETH_DMA_TXCH_EN[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_TXCH' + str(i) + '_EN'
        idx = globals()[objObject].getValue()
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Rx channel enabled, 0 = disabled, 1 = enabled*/\n")
    file.write("const uint8 GETH_DMA_RXCH_EN[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_RXCH' + str(i) + '_EN'
        idx = globals()[objObject].getValue()
        file.write(str(idx))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Tx TDES2.VTIR */\n")
    file.write("const uint8 GETH_DMA_TX_TDES2_VTIR[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_TDES2_VTIR'
        value = globals()[objObject].currentIndex
        file.write(str(value))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Tx CTXT.TDES3.VT */\n")
    file.write("const uint16 GETH_DMA_TX_CDES3_VT[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_CDES3_VT'
        value = globals()[objObject].value
        file.write(str(value))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Tx channel buffer size */\n")
    file.write("const uint16 GETH_DMA_TX_BUFFER_SIZE[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_TX_BUFFER_SIZE'
        value = globals()[objObject].value
        file.write(str(value))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("/* DMA Rx channel buffer size */\n")
    file.write("const uint16 GETH_DMA_RX_BUFFER_SIZE[] = {")
    for i in range(0, 8):
        objObject = 'GETH_DMA_CH' + str(i) + '_RX_BUFFER_SIZE'
        value = globals()[objObject].value
        file.write(str(value))
        if i < 7:
            file.write(", ")
    file.write("};\n")

    file.write("\n")
    file.close()

def Save_Prot_H_Objects():
    file = open("geth_prot_a.h", "w")
    
    Save_Disclaimer(file, "geth_prot_a.h")
    Save_IncludeGuardOpen(file, "GETH_PROT_A_H");
    
    file.write("/* MAC/DMA Access Protection */\n")
    file.write("extern const uint32 GETH_ACCENn_WRA[];\n")
    file.write("extern const uint32 GETH_ACCENn_WRB[];\n")
    file.write("extern const uint32 GETH_ACCENn_RDA[];\n")
    file.write("extern const uint32 GETH_ACCENn_RDB[];\n")

    file.write("\n")
    Save_IncludeGuardClose(file, "GETH_PROT_A_H");
    file.close()

def Save_Dma_H_Objects():
    file = open("geth_dma_a.h", "w")
    
    Save_Disclaimer(file, "geth_dma_a.h")
    Save_IncludeGuardOpen(file, "GETH_DMA_A_H");
    
    file.write("/* descriptor type per DMA channel, 0 = normal descriptor, 1 = normal + context descriptor*/\n")
    file.write("extern const uint8 GETH_DMA_TX_DESC_TYPE_LIST[];\n")

    file.write("/* descriptor type per DMA channel, 0 = normal descriptor, 1 = normal + context descriptor*/\n")
    file.write("extern const uint8 GETH_DMA_RX_DESC_TYPE_LIST[];\n")

    file.write("/* time stamping enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("extern const uint8 GETH_DMA_TS_EN[];\n")

    file.write("/* tx interrupt enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("extern const uint8 GETH_DMA_INT_TIE[];\n")

    file.write("/* rx interrupt enabled per DMA channel, 0 = disabled, 1 = enabled*/\n")
    file.write("extern const uint8 GETH_DMA_INT_RIE[];\n")

    file.write("/* DMA Tx channel enabled, 0 = disabled, 1 = enabled*/\n")
    file.write("extern const uint8 GETH_DMA_TXCH_EN[];\n")

    file.write("/* DMA Rx channel enabled, 0 = disabled, 1 = enabled*/\n")
    file.write("extern const uint8 GETH_DMA_RXCH_EN[];\n")

    file.write("/* DMA Tx TDES2.VTIR */\n")
    file.write("extern const uint8 GETH_DMA_TX_TDES2_VTIR[];\n")

    file.write("/* DMA Tx CTXT.TDES3.VT */\n")
    file.write("extern const uint16 GETH_DMA_TX_CDES3_VT[];\n")

    file.write("/* DMA Tx channel buffer size */\n")
    file.write("extern const uint16 GETH_DMA_TX_BUFFER_SIZE[];\n")

    file.write("/* DMA Rx channel buffer size */\n")
    file.write("extern const uint16 GETH_DMA_RX_BUFFER_SIZE[];\n")

    file.write("\n")
    Save_IncludeGuardClose(file, "GETH_DMA_A_H");
    file.close()

def Save_Mac_H_Objects():
    file = open("geth_mac_a.h", "w")
    
    Save_Disclaimer(file, "geth_mac_a.h")
    Save_IncludeGuardOpen(file, "GETH_MAC_A_H");
    
    file.write("/* broadcast default address */\n")
    file.write("extern const uint8 g_gethBroadCast_a[6];\n\n")
    
    file.write("/* MAC0 addresses */\n")
    file.write("extern const uint8 GETH_MAC0_ADDR[][6];\n")
    file.write("\n")

    for i in range(0, 10):
        file.write("#define GETH_MAC0_ADDR" + str(i) + " {")
        objObject = 'GETH_PORT0_MAC_ADDRESS' + str(i)
        addr_s = globals()[objObject].text
        
        addr_s = addr_s.replace('x', 'F', 8) 
        addr_s = '0x' + addr_s
        addr_s = addr_s.replace(':', ', 0x', 7) 
        file.write(addr_s)
        file.write("}\n")

    file.write("\n")
    file.write("/* MAC1 addresses */\n")
    file.write("extern const uint8 GETH_MAC1_ADDR[][6];\n")
    file.write("\n")

    for i in range(0, 10):
        file.write("#define GETH_MAC1_ADDR" + str(i) + " {")
        objObject = 'GETH_PORT1_MAC_ADDRESS' + str(i)
        addr_s = globals()[objObject].text
        
        addr_s = addr_s.replace('x', 'F', 8) 
        addr_s = '0x' + addr_s
        addr_s = addr_s.replace(':', ', 0x', 7) 
        file.write(addr_s)
        file.write("}\n")

    file.write("\n")
    objObject = 'GETH_PORT0_MTL_EST_CONTROL_EEST'
    objObject2 = 'GETH_PORT0_MTL_EST_GCL_LLR'
    maxCnt = int(globals()[objObject2].text)
    if globals()[objObject].checked == 1 and  maxCnt > 0:
        file.write("/* MAC0 EST GCL */\n")
        file.write("extern const uint32 GETH_PORT0_MTL_EST_GCL_DATA[];\n")
            
    objObject = 'GETH_PORT1_MTL_EST_CONTROL_EEST'
    objObject2 = 'GETH_PORT1_MTL_EST_GCL_LLR'
    maxCnt = int(globals()[objObject2].text)
    if globals()[objObject].checked == 1 and  maxCnt > 0:
        file.write("/* MAC1 EST GCL */\n")
        file.write("extern const uint32 GETH_PORT1_MTL_EST_GCL_DATA[];\n")

    file.write("\n")
    Save_IncludeGuardClose(file, "GETH_DMA_A_H");
    file.close()

def Save_Mac_C_Objects():
    file = open("geth_mac_a.c", "w")
    
    Save_Disclaimer(file, "geth_mac_a.c")
    
    file.write("#include \"types.h\"\n")
    file.write("#include \"geth_mac_a.h\"\n")
    file.write("#include \"tc4d_geth_mac_cfg.h\"\n")
    file.write("\n")
    file.write("/* broadcast default address */\n")
    file.write("const uint8 g_gethBroadCast_a[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};\n\n")
    
    file.write("/* MAC0 addresses */\n")
    file.write("const uint8 GETH_MAC0_ADDR[][6] = {")
    for i in range(0, 10):
        objObject = 'GETH_PORT0_MAC_ADDRESS' + str(i)
        addr_s = globals()[objObject].text
        addr_s = addr_s.replace('x', 'F') 
        addr_s = '0x' + addr_s
        addr_s = addr_s.replace(':', ', 0x', 7)
        if i > 0:
            file.write("                                   ")
        file.write("{")
        file.write(addr_s)
        file.write("}")
        if i < 9:
            file.write(",  /* MAC0 Address " + str(i) + " */ \n")
    file.write("}; /* MAC0 Address 9 */\n")
    file.write("\n")

    file.write("/* MAC1 addresses */\n")
    file.write("const uint8 GETH_MAC1_ADDR[][6] = {")
    for i in range(0, 10):
        objObject = 'GETH_PORT1_MAC_ADDRESS' + str(i)
        addr_s = globals()[objObject].text
        
        addr_s = addr_s.replace('x', 'F') 
        addr_s = '0x' + addr_s
        addr_s = addr_s.replace(':', ', 0x', 7)
        if i > 0:
            file.write("                                   ")
        file.write("{")
        file.write(addr_s)
        file.write("}")
        if i < 9:
            file.write(",  /* MAC1 Address " + str(i) + " */ \n")
    file.write("}; /* MAC1 Address 9 */\n")
    
    file.write("\n")
    objObject = 'GETH_PORT0_MTL_EST_CONTROL_EEST'
    objObject2 = 'GETH_PORT0_MTL_EST_GCL_LLR'
    maxCnt = int(globals()[objObject2].text)
    if globals()[objObject].checked == 1 and  maxCnt > 0:
        file.write("/* MAC0 EST GCL */\n")
        file.write("const uint32 GETH_PORT0_MTL_EST_GCL_DATA[" + str(maxCnt) + "] = {")
        for i in range(0, 10):
            objObject = 'GETH_PORT0_MTL_EST_GCL_IDX' + str(i) + '_EN'
            if globals()[objObject].checked == 1:
                if maxCnt > 1:
                    file.write("GETH_PORT0_MTL_EST_GCL_DATA" + str(i) + ", ")
                else:
                    file.write("GETH_PORT0_MTL_EST_GCL_DATA" + str(i) + "};\n")
                maxCnt-=1
            
    file.write("\n")
    objObject = 'GETH_PORT1_MTL_EST_CONTROL_EEST'
    objObject2 = 'GETH_PORT1_MTL_EST_GCL_LLR'
    maxCnt = int(globals()[objObject2].text)
    if globals()[objObject].checked == 1 and  maxCnt > 0:
        file.write("/* MAC1 EST GCL */\n")
        file.write("const uint32 GETH_PORT1_MTL_EST_GCL_DATA[" + str(maxCnt) + "] = {")
        for i in range(0, 10):
            objObject = 'GETH_PORT1_MTL_EST_GCL_IDX' + str(i) + '_EN'
            if globals()[objObject].checked == 1:
                if maxCnt > 1:
                    file.write("GETH_PORT1_MTL_EST_GCL_DATA" + str(i) + ", ")
                else:
                    file.write("GETH_PORT1_MTL_EST_GCL_DATA" + str(i) + "};\n")
                maxCnt-=1
            
    file.write("\n")

    file.close()

def Save_Handler():
    #print('Save pressed')
    Save_Dma_H_Objects()
    Save_Dma_C_Objects()
    Save_Mac_H_Objects()
    Save_Mac_C_Objects()
    Save_Prot_H_Objects()
    Save_Prot_C_Objects()
    
#print('Run icw_tc4d.py...')
application.runScript("SetOutputOptions(1)")

##GETH_PORT0_MAC_RXQ_CTRL1_UPQ
###print(GETH_PORT0_MAC_RXQ_CTRL4_UFFQE.__dict__.keys())
##object_methods = [method_name for method_name in dir(GETH_PORT0_MAC_RXQ_CTRL4_UFFQE) if callable(getattr(GETH_PORT0_MAC_RXQ_CTRL4_UFFQE, method_name))]
###print (object_methods)
###print (str(GETH_PORT0_MTL_QUEUE0_EN.getValue()))

FILE_SAVE.connect('triggered()', Save_Handler)
#FILE_SAVE_AS.connect('triggered()', Save_Handler)

dma = Dma()
bridge = Bridge(dma)
mac = [Mac(0, bridge.port[0]), Mac(1, bridge.port[1])]

GETH_MACEN_MAC0.connect('stateChanged(int)', mac[0].enableSet)
GETH_MACEN_MAC1.connect('stateChanged(int)', mac[1].enableSet)

#GETH_PORT0_MTL_QUEUE0_EN.connect('buttonClicked(int)', mac[0].queue[0].onClickEvent)
#GETH_PORT0_MTL_QUEUE1_EN.connect('buttonClicked(int)', mac[0].queue[1].onClickEvent)
#GETH_PORT0_MTL_QUEUE2_EN.connect('buttonClicked(int)', mac[0].queue[2].onClickEvent)
#GETH_PORT0_MTL_QUEUE3_EN.connect('buttonClicked(int)', mac[0].queue[3].onClickEvent)
#GETH_PORT0_MTL_QUEUE4_EN.connect('buttonClicked(int)', mac[0].queue[4].onClickEvent)
#GETH_PORT0_MTL_QUEUE5_EN.connect('buttonClicked(int)', mac[0].queue[5].onClickEvent)
#GETH_PORT0_MTL_QUEUE6_EN.connect('buttonClicked(int)', mac[0].queue[6].onClickEvent)
#GETH_PORT0_MTL_QUEUE7_EN.connect('buttonClicked(int)', mac[0].queue[7].onClickEvent)

#GETH_PORT1_MTL_QUEUE0_EN.connect('buttonClicked(int)', mac[1].queue[0].onClickEvent)
#GETH_PORT1_MTL_QUEUE1_EN.connect('buttonClicked(int)', mac[1].queue[1].onClickEvent)
#GETH_PORT1_MTL_QUEUE2_EN.connect('buttonClicked(int)', mac[1].queue[2].onClickEvent)
#GETH_PORT1_MTL_QUEUE3_EN.connect('buttonClicked(int)', mac[1].queue[3].onClickEvent)
#GETH_PORT1_MTL_QUEUE4_EN.connect('buttonClicked(int)', mac[1].queue[4].onClickEvent)
#GETH_PORT1_MTL_QUEUE5_EN.connect('buttonClicked(int)', mac[1].queue[5].onClickEvent)
#GETH_PORT1_MTL_QUEUE6_EN.connect('buttonClicked(int)', mac[1].queue[6].onClickEvent)
#GETH_PORT1_MTL_QUEUE7_EN.connect('buttonClicked(int)', mac[1].queue[7].onClickEvent)

GETH_PORT0_MTL_TXQ0_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[0].onClickEvent)
GETH_PORT0_MTL_TXQ1_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[1].onClickEvent)
GETH_PORT0_MTL_TXQ2_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[2].onClickEvent)
GETH_PORT0_MTL_TXQ3_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[3].onClickEvent)
GETH_PORT0_MTL_TXQ4_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[4].onClickEvent)
GETH_PORT0_MTL_TXQ5_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[5].onClickEvent)
GETH_PORT0_MTL_TXQ6_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[6].onClickEvent)
GETH_PORT0_MTL_TXQ7_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[0].queueTx[7].onClickEvent)

GETH_PORT1_MTL_TXQ0_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[0].onClickEvent)
GETH_PORT1_MTL_TXQ1_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[1].onClickEvent)
GETH_PORT1_MTL_TXQ2_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[2].onClickEvent)
GETH_PORT1_MTL_TXQ3_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[3].onClickEvent)
GETH_PORT1_MTL_TXQ4_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[4].onClickEvent)
GETH_PORT1_MTL_TXQ5_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[5].onClickEvent)
GETH_PORT1_MTL_TXQ6_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[6].onClickEvent)
GETH_PORT1_MTL_TXQ7_OPERATION_MODE_TXQEN.connect('buttonClicked(int)', mac[1].queueTx[7].onClickEvent)

GETH_PORT0_MAC_RXQ_CTRL0_RXQ0EN.connect('buttonClicked(int)', mac[0].queueRx[0].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ1EN.connect('buttonClicked(int)', mac[0].queueRx[1].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ2EN.connect('buttonClicked(int)', mac[0].queueRx[2].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ3EN.connect('buttonClicked(int)', mac[0].queueRx[3].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ4EN.connect('buttonClicked(int)', mac[0].queueRx[4].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ5EN.connect('buttonClicked(int)', mac[0].queueRx[5].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ6EN.connect('buttonClicked(int)', mac[0].queueRx[6].onClickEvent)
GETH_PORT0_MAC_RXQ_CTRL0_RXQ7EN.connect('buttonClicked(int)', mac[0].queueRx[7].onClickEvent)

GETH_PORT1_MAC_RXQ_CTRL0_RXQ0EN.connect('buttonClicked(int)', mac[1].queueRx[0].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ1EN.connect('buttonClicked(int)', mac[1].queueRx[1].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ2EN.connect('buttonClicked(int)', mac[1].queueRx[2].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ3EN.connect('buttonClicked(int)', mac[1].queueRx[3].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ4EN.connect('buttonClicked(int)', mac[1].queueRx[4].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ5EN.connect('buttonClicked(int)', mac[1].queueRx[5].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ6EN.connect('buttonClicked(int)', mac[1].queueRx[6].onClickEvent)
GETH_PORT1_MAC_RXQ_CTRL0_RXQ7EN.connect('buttonClicked(int)', mac[1].queueRx[7].onClickEvent)

GETH_PORT_0_CONTROL_TXQ_EN0.connect('stateChanged(int)', bridge.port[0].channelTx[0].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN1.connect('stateChanged(int)', bridge.port[0].channelTx[1].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN2.connect('stateChanged(int)', bridge.port[0].channelTx[2].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN3.connect('stateChanged(int)', bridge.port[0].channelTx[3].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN4.connect('stateChanged(int)', bridge.port[0].channelTx[4].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN5.connect('stateChanged(int)', bridge.port[0].channelTx[5].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN6.connect('stateChanged(int)', bridge.port[0].channelTx[6].onEnableClick)
GETH_PORT_0_CONTROL_TXQ_EN7.connect('stateChanged(int)', bridge.port[0].channelTx[7].onEnableClick)

GETH_PORT_1_CONTROL_TXQ_EN0.connect('stateChanged(int)', bridge.port[1].channelTx[0].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN1.connect('stateChanged(int)', bridge.port[1].channelTx[1].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN2.connect('stateChanged(int)', bridge.port[1].channelTx[2].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN3.connect('stateChanged(int)', bridge.port[1].channelTx[3].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN4.connect('stateChanged(int)', bridge.port[1].channelTx[4].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN5.connect('stateChanged(int)', bridge.port[1].channelTx[5].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN6.connect('stateChanged(int)', bridge.port[1].channelTx[6].onEnableClick)
GETH_PORT_1_CONTROL_TXQ_EN7.connect('stateChanged(int)', bridge.port[1].channelTx[7].onEnableClick)

GETH_PORT_0_CONTROL_RXC_EN0.connect('stateChanged(int)', bridge.port[0].channelRx[0].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN1.connect('stateChanged(int)', bridge.port[0].channelRx[1].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN2.connect('stateChanged(int)', bridge.port[0].channelRx[2].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN3.connect('stateChanged(int)', bridge.port[0].channelRx[3].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN4.connect('stateChanged(int)', bridge.port[0].channelRx[4].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN5.connect('stateChanged(int)', bridge.port[0].channelRx[5].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN6.connect('stateChanged(int)', bridge.port[0].channelRx[6].onEnableClick)
GETH_PORT_0_CONTROL_RXC_EN7.connect('stateChanged(int)', bridge.port[0].channelRx[7].onEnableClick)

GETH_PORT_1_CONTROL_RXC_EN0.connect('stateChanged(int)', bridge.port[1].channelRx[0].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN1.connect('stateChanged(int)', bridge.port[1].channelRx[1].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN2.connect('stateChanged(int)', bridge.port[1].channelRx[2].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN3.connect('stateChanged(int)', bridge.port[1].channelRx[3].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN4.connect('stateChanged(int)', bridge.port[1].channelRx[4].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN5.connect('stateChanged(int)', bridge.port[1].channelRx[5].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN6.connect('stateChanged(int)', bridge.port[1].channelRx[6].onEnableClick)
GETH_PORT_1_CONTROL_RXC_EN7.connect('stateChanged(int)', bridge.port[1].channelRx[7].onEnableClick)


GETH_DMA_TXCH0_EN.connect('buttonClicked(int)', dma.channelTx[0].onEnableClick)
GETH_DMA_TXCH1_EN.connect('buttonClicked(int)', dma.channelTx[1].onEnableClick)
GETH_DMA_TXCH2_EN.connect('buttonClicked(int)', dma.channelTx[2].onEnableClick)
GETH_DMA_TXCH3_EN.connect('buttonClicked(int)', dma.channelTx[3].onEnableClick)
GETH_DMA_TXCH4_EN.connect('buttonClicked(int)', dma.channelTx[4].onEnableClick)
GETH_DMA_TXCH5_EN.connect('buttonClicked(int)', dma.channelTx[5].onEnableClick)
GETH_DMA_TXCH6_EN.connect('buttonClicked(int)', dma.channelTx[6].onEnableClick)
GETH_DMA_TXCH7_EN.connect('buttonClicked(int)', dma.channelTx[7].onEnableClick)

GETH_DMA_RXCH0_EN.connect('buttonClicked(int)', dma.channelRx[0].onEnableClick)
GETH_DMA_RXCH1_EN.connect('buttonClicked(int)', dma.channelRx[1].onEnableClick)
GETH_DMA_RXCH2_EN.connect('buttonClicked(int)', dma.channelRx[2].onEnableClick)
GETH_DMA_RXCH3_EN.connect('buttonClicked(int)', dma.channelRx[3].onEnableClick)
GETH_DMA_RXCH4_EN.connect('buttonClicked(int)', dma.channelRx[4].onEnableClick)
GETH_DMA_RXCH5_EN.connect('buttonClicked(int)', dma.channelRx[5].onEnableClick)
GETH_DMA_RXCH6_EN.connect('buttonClicked(int)', dma.channelRx[6].onEnableClick)
GETH_DMA_RXCH7_EN.connect('buttonClicked(int)', dma.channelRx[7].onEnableClick)

GETH_TXQ_MAP_PORT_0_TXQ0_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[0].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ1_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[1].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ2_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[2].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ3_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[3].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ4_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[4].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ5_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[5].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ6_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[6].onDmaSelectChange)
GETH_TXQ_MAP_PORT_0_TXQ7_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[7].onDmaSelectChange)

GETH_TXQ_MAP_PORT_1_TXQ0_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[0].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ1_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[1].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ2_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[2].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ3_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[3].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ4_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[4].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ5_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[5].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ6_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[6].onDmaSelectChange)
GETH_TXQ_MAP_PORT_1_TXQ7_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[7].onDmaSelectChange)

GETH_RXQ_MAP_PORT_0_RXQ0_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[0].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ1_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[1].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ2_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[2].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ3_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[3].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ4_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[4].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ5_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[5].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ6_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[6].onDmaSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ7_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[7].onDmaSelectChange)

GETH_RXQ_MAP_PORT_1_RXQ0_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[0].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ1_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[1].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ2_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[2].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ3_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[3].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ4_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[4].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ5_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[5].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ6_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[6].onDmaSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ7_DMA_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[7].onDmaSelectChange)


GETH_PORT_0_CONTROL_FWD_EN0.connect('stateChanged(int)', bridge.port[0].channelTx[0].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN1.connect('stateChanged(int)', bridge.port[0].channelTx[1].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN2.connect('stateChanged(int)', bridge.port[0].channelTx[2].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN3.connect('stateChanged(int)', bridge.port[0].channelTx[3].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN4.connect('stateChanged(int)', bridge.port[0].channelTx[4].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN5.connect('stateChanged(int)', bridge.port[0].channelTx[5].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN6.connect('stateChanged(int)', bridge.port[0].channelTx[6].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN7.connect('stateChanged(int)', bridge.port[0].channelTx[7].onFwdEnable)

GETH_PORT_1_CONTROL_FWD_EN0.connect('stateChanged(int)', bridge.port[1].channelTx[0].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN1.connect('stateChanged(int)', bridge.port[1].channelTx[1].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN2.connect('stateChanged(int)', bridge.port[1].channelTx[2].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN3.connect('stateChanged(int)', bridge.port[1].channelTx[3].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN4.connect('stateChanged(int)', bridge.port[1].channelTx[4].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN5.connect('stateChanged(int)', bridge.port[1].channelTx[5].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN6.connect('stateChanged(int)', bridge.port[1].channelTx[6].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN7.connect('stateChanged(int)', bridge.port[1].channelTx[7].onFwdEnable)

GETH_PORT_0_CONTROL_FWD_EN0.connect('stateChanged(int)', bridge.port[0].channelRx[0].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN1.connect('stateChanged(int)', bridge.port[0].channelRx[1].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN2.connect('stateChanged(int)', bridge.port[0].channelRx[2].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN3.connect('stateChanged(int)', bridge.port[0].channelRx[3].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN4.connect('stateChanged(int)', bridge.port[0].channelRx[4].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN5.connect('stateChanged(int)', bridge.port[0].channelRx[5].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN6.connect('stateChanged(int)', bridge.port[0].channelRx[6].onFwdEnable)
GETH_PORT_0_CONTROL_FWD_EN7.connect('stateChanged(int)', bridge.port[0].channelRx[7].onFwdEnable)

GETH_PORT_1_CONTROL_FWD_EN0.connect('stateChanged(int)', bridge.port[1].channelRx[0].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN1.connect('stateChanged(int)', bridge.port[1].channelRx[1].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN2.connect('stateChanged(int)', bridge.port[1].channelRx[2].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN3.connect('stateChanged(int)', bridge.port[1].channelRx[3].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN4.connect('stateChanged(int)', bridge.port[1].channelRx[4].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN5.connect('stateChanged(int)', bridge.port[1].channelRx[5].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN6.connect('stateChanged(int)', bridge.port[1].channelRx[6].onFwdEnable)
GETH_PORT_1_CONTROL_FWD_EN7.connect('stateChanged(int)', bridge.port[1].channelRx[7].onFwdEnable)

#GETH_TXQ_MAP_PORT_0_TXQ0_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[0].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ1_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[1].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ2_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[2].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ3_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[3].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ4_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[4].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ5_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[5].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ6_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[6].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_0_TXQ7_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelTx[7].onForwardChannelSelectChange)
#
#GETH_TXQ_MAP_PORT_1_TXQ0_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[0].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ1_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[1].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ2_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[2].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ3_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[3].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ4_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[4].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ5_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[5].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ6_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[6].onForwardChannelSelectChange)
#GETH_TXQ_MAP_PORT_1_TXQ7_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelTx[7].onForwardChannelSelectChange)

GETH_RXQ_MAP_PORT_0_RXQ0_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[0].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ1_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[1].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ2_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[2].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ3_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[3].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ4_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[4].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ5_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[5].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ6_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[6].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_0_RXQ7_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[0].channelRx[7].onForwardChannelSelectChange)

GETH_RXQ_MAP_PORT_1_RXQ0_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[0].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ1_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[1].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ2_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[2].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ3_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[3].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ4_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[4].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ5_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[5].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ6_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[6].onForwardChannelSelectChange)
GETH_RXQ_MAP_PORT_1_RXQ7_FWD_MAP.connect('currentIndexChanged(int)', bridge.port[1].channelRx[7].onForwardChannelSelectChange)

GETH_PORT0_MTL_QUEUE0_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[0].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE1_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[1].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE2_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[2].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE3_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[3].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE4_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[4].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE5_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[5].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE6_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[6].onPayloadSizeChange)
GETH_PORT0_MTL_QUEUE7_PAYLOAD_SIZE.connect('valueChanged(int)', mac[0].queueTx[7].onPayloadSizeChange)

GETH_PORT1_MTL_QUEUE0_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[0].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE1_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[1].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE2_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[2].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE3_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[3].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE4_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[4].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE5_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[5].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE6_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[6].onPayloadSizeChange)
GETH_PORT1_MTL_QUEUE7_PAYLOAD_SIZE.connect('valueChanged(int)', mac[1].queueTx[7].onPayloadSizeChange)

GETH_PORT0_MAC_QUEUE_SELECT.connect('currentChanged(int)', mac[0].onQueueTabSelectChange)
GETH_PORT1_MAC_QUEUE_SELECT.connect('currentChanged(int)', mac[1].onQueueTabSelectChange)

GETH_PORT0_MTL_TC0_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[0].onModeChange)
GETH_PORT0_MTL_TC1_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[1].onModeChange)
GETH_PORT0_MTL_TC2_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[2].onModeChange)
GETH_PORT0_MTL_TC3_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[3].onModeChange)
GETH_PORT0_MTL_TC4_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[4].onModeChange)
GETH_PORT0_MTL_TC5_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[5].onModeChange)
GETH_PORT0_MTL_TC6_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[6].onModeChange)
GETH_PORT0_MTL_TC7_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[0].trafficClass.channel[7].onModeChange)

GETH_PORT1_MTL_TC0_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[0].onModeChange)
GETH_PORT1_MTL_TC1_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[1].onModeChange)
GETH_PORT1_MTL_TC2_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[2].onModeChange)
GETH_PORT1_MTL_TC3_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[3].onModeChange)
GETH_PORT1_MTL_TC4_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[4].onModeChange)
GETH_PORT1_MTL_TC5_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[5].onModeChange)
GETH_PORT1_MTL_TC6_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[6].onModeChange)
GETH_PORT1_MTL_TC7_ETS_CONTROL_TSA.connect('buttonClicked(int)', mac[1].trafficClass.channel[7].onModeChange)

GETH_PORT0_MAC_ADDRESS0.connect('editingFinished()', mac[0].addr[0].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS1.connect('editingFinished()', mac[0].addr[1].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS2.connect('editingFinished()', mac[0].addr[2].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS3.connect('editingFinished()', mac[0].addr[3].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS4.connect('editingFinished()', mac[0].addr[4].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS5.connect('editingFinished()', mac[0].addr[5].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS6.connect('editingFinished()', mac[0].addr[6].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS7.connect('editingFinished()', mac[0].addr[7].onMacAddrChange)
GETH_PORT0_MAC_ADDRESS8.connect('editingFinished()', mac[0].addr[8].onMacAddrChange)

GETH_PORT1_MAC_ADDRESS0.connect('editingFinished()', mac[1].addr[0].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS1.connect('editingFinished()', mac[1].addr[1].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS2.connect('editingFinished()', mac[1].addr[2].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS3.connect('editingFinished()', mac[1].addr[3].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS4.connect('editingFinished()', mac[1].addr[4].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS5.connect('editingFinished()', mac[1].addr[5].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS6.connect('editingFinished()', mac[1].addr[6].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS7.connect('editingFinished()', mac[1].addr[7].onMacAddrChange)
GETH_PORT1_MAC_ADDRESS8.connect('editingFinished()', mac[1].addr[8].onMacAddrChange)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_7)

application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_0)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_1)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_2)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_3)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_4)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_5)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_6)
application.connectLockUnlock(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_7)

GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ0_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ1_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ2_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ3_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ4_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ5_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ6_7))

GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_0))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_1))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_2))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_3))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_4))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_5))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_6))
GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT0_MAC_RXQ_CTRL_PSRQ7_7))

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_7)

application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_0)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_1)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_2)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_3)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_4)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_5)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_6)
application.connectLockUnlock(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_7)

application.connectLockUnlock(GETH_PORT0_MAC_TIMESTAMP_CONTROL_TSENA)
application.connectLockUnlock(GETH_PORT1_MAC_TIMESTAMP_CONTROL_TSENA)


GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ0_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ1_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ2_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ3_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ4_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ5_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ6_7))

GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_0.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_0))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_1.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_1))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_2.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_2))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_3.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_3))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_4.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_4))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_5.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_5))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_6.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_6))
GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_7.connect('stateChanged(int)', macRxQueuePrioSet(GETH_PORT1_MAC_RXQ_CTRL_PSRQ7_7))

GETH_PORT0_MAC_TIMESTAMP_CONTROL_TSENA.connect('stateChanged(int)', mac[0].timeStampEnableClick)
GETH_PORT1_MAC_TIMESTAMP_CONTROL_TSENA.connect('stateChanged(int)', mac[1].timeStampEnableClick)

#print("*******************************")
#print("* DMA manual init             *")
#print("*******************************")
for i in range(0, 8):
    dma.channelTx[i].manualInit()
    dma.channelRx[i].manualInit()

#print("*******************************")
#print("* Bridge0 Channel manual init *")
#print("*******************************")
for i in range(0, 8):
    mac[0].bridgePort.channelTx[i].manualInit()
    mac[0].bridgePort.channelRx[i].manualInit()
#print("*******************************")
#print("* Bridge1 Channel manual init *")
#print("*******************************")
for i in range(0, 8):
    mac[1].bridgePort.channelTx[i].manualInit()
    mac[1].bridgePort.channelRx[i].manualInit()

#print("*******************************")
#print("* Mac0 manual init            *")
#print("*******************************")
mac[0].manualInit()
#print("*******************************")
#print("* Mac1 manual init            *")
#print("*******************************")
mac[1].manualInit()

#print("*******************************")
#print("* Mac0 trafficClass init      *")
#print("*******************************")
mac[0].trafficClass.initDoneSet()
#print("*******************************")
#print("* Mac1 trafficClass init      *")
#print("*******************************")
mac[1].trafficClass.initDoneSet()

for idx in range(0, 2):
    #print("*******************************")
    #print("* Mac" + str(idx) + " timeStamp init         *")
    #print("*******************************")
    mac[idx].timeStampEnableClick(gethMacTimeStampEn_obj[idx].checked)

application.runScript('setDef(Geth.Diagram.update=1)')