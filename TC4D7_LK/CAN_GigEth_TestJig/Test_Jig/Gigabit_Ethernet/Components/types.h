/**
 * \file types.h
 * \brief Functions to interface to the virtual COM port
 *
 * \version V0.1.0
 * \copyright Copyright (c) 2019-2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** RS           Ronny Schulze                                                 **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2022-02-08, DM:   Initial version                                  **
*******************************************************************************/

#ifndef COMPONENTS_TYPES_H_
#define COMPONENTS_TYPES_H_

#include "Ifx_Types.h"

/**********************************************************************************************************************
 * MACROS
 *********************************************************************************************************************/
/* Error types */
#ifndef SUCCESS
#define SUCCESS (0)
#endif /* SUCCESS */
#ifndef FAILURE
#define FAILURE (-1)
#endif /* FAILURE */

/* BIT defines */
#define BIT_0       0x0001
#define BIT_1       0x0002
#define BIT_2       0x0004
#define BIT_3       0x0008
#define BIT_4       0x0010
#define BIT_5       0x0020
#define BIT_6       0x0040
#define BIT_7       0x0080
#define BIT_8       0x0100
#define BIT_9       0x0200
#define BIT_10      0x0400
#define BIT_11      0x0800
#define BIT_12      0x1000
#define BIT_13      0x2000
#define BIT_14      0x4000
#define BIT_15      0x8000

#define big_endian16(a)             (((a & 0xFF) << 8) | ((a >> 8) & 0xFF))
#define swapEndianess16(a)          (((a & 0xFF) << 8) | ((a >> 8) & 0xFF))
#define big_endian32(a)             (((a & 0xFF) << 24) | ((a & 0xFF00) << 8) | ((a & 0xFF0000) >> 8) | ((a >> 24) & 0xFF))
#define swapEndianess32(a)          (((a & 0xFF) << 24) | ((a & 0xFF00) << 8) | ((a & 0xFF0000) >> 8) | ((a >> 24) & 0xFF))
#define ip_endian32(a, b, c, d)     (((d & 0xFF) << 24) | ((c & 0xFF) << 16) | ((b & 0xFF) << 8) | (a & 0xFF))

#if defined(CONFIG_BOARD_SERIALIO_ENABLE)
#define EOL "\n\r"
#endif

#if defined(CONFIG_BOARD_SIMIO_ENABLE)
#define EOL "\n"
#endif

extern void *memcpy64(void *dst, void const *src, size_t len);

#define MEMCPY(dst, src, len)   memcpy64(dst,src,len)

typedef union
{
    uint64 qword;
    struct
    {
        uint64 low: 32;
        uint64 high: 32;
    } dword;
} uint64s;

typedef union
{
    uint32 dword;
    uint16 word[2];
    uint8  byte[4];
} uint32s;

typedef struct
{
    uint8 used;
    uint16 packedId;
    uint16 secOverflow;
    uint32 second;
    uint32 nanoSecond;
} Sys_TimeStamp_t;

#if 0
typedef struct __packed__
{
    uint16 packedId;
    uint16 secOverflow;
    union
    {
        uint64 raw;
        struct
        {
            uint64 second: 32;
            uint64 nanoSecond: 32;
        } split;
    } time;
} PTP_TimeStamp;
#endif

typedef struct __packed__
{
  uint8 DestMAC[6]; /* destination MAC address */
  uint8 SrcMAC[6];  /* source MAC address */
  uint16 EtherType; /* upper layer frame type, big-endian */
  uint8 Payload[];
} EthernetHeader;

#endif /* COMPONENTS_TYPES_H_ */
